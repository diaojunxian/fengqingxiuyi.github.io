<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风清袖一的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fengqingxiuyi.github.io/"/>
  <updated>2016-08-20T03:30:06.000Z</updated>
  <id>https://fengqingxiuyi.github.io/</id>
  
  <author>
    <name>青峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>尚妆统一图片压缩库算法说明</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/20/Android/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/%E5%B0%9A%E5%A6%86%E7%BB%9F%E4%B8%80%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%BA%93%E7%AE%97%E6%B3%95%E8%AF%B4%E6%98%8E/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/20/Android/图片压缩/尚妆统一图片压缩库算法说明/</id>
    <published>2016-08-20T03:19:35.000Z</published>
    <updated>2016-08-20T03:30:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="http://git.showjoy.net/android/showjoyandroid_compress" target="_blank" rel="external">尚妆统一图片压缩库</a></p>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>本图片压缩库的算法基于<a href="https://github.com/Curzibn/Luban/blob/master/DESCRIPTION.md" target="_blank" rel="external">Luban算法步骤</a>稍作改进。</p>
<h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><p>从网上下载的81张不同尺寸的图片，依次分享到微信朋友圈，再保存到手机上，然后进行数据统计。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><h3 id="朋友圈图片压缩后比例变化"><a href="#朋友圈图片压缩后比例变化" class="headerlink" title="朋友圈图片压缩后比例变化"></a>朋友圈图片压缩后比例变化</h3><p><img src="../../../../../../images/Android/图片压缩/图片压缩比例变化.png" alt="图片压缩比例变化"></p>
<h3 id="朋友圈图片压缩后尺寸变化"><a href="#朋友圈图片压缩后尺寸变化" class="headerlink" title="朋友圈图片压缩后尺寸变化"></a>朋友圈图片压缩后尺寸变化</h3><p><img src="../../../../../../images/Android/图片压缩/图片压缩尺寸变化.png" alt="图片压缩尺寸变化"></p>
<h3 id="朋友圈图片压缩数据统计表"><a href="#朋友圈图片压缩数据统计表" class="headerlink" title="朋友圈图片压缩数据统计表"></a>朋友圈图片压缩数据统计表</h3><p><a href="../../../../../../file/Android/图片压缩/朋友圈图片压缩数据统计表.xlsx">朋友圈图片压缩数据统计表</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/20/Android/图片压缩/尚妆统一图片压缩库算法说明/">https://fengqingxiuyi.github.io/2016/08/20/Android/图片压缩/尚妆统一图片压缩库算法说明/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;项目地址&quot;&gt;&lt;a href=&quot;#项目地址&quot; class=&quot;headerlink&quot; title=&quot;项目地址&quot;&gt;&lt;/a&gt;项目地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://git.showjoy.net/android/showjoyandroid_compres
    
    </summary>
    
      <category term="Android_图片压缩" scheme="https://fengqingxiuyi.github.io/categories/Android-%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/"/>
    
    
  </entry>
  
  <entry>
    <title>vi_vim命令</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/%E5%91%BD%E4%BB%A4/vi_vim/vi_vim%E5%91%BD%E4%BB%A4/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/命令/vi_vim/vi_vim命令/</id>
    <published>2016-08-15T14:21:19.000Z</published>
    <updated>2016-08-15T14:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：已经忘记转载自哪里了，表示抱歉，查了很多文章，都不是完全一样。本文仅用作记录。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>vi（vim）是上Linux非常常用的编辑器，很多Linux发行版都默认安装了vi(vim)。vi(vim)命令繁多但是如果使用灵活之后将会大大提高效率。vi是“visual interface”的缩写，vim是vi IMproved(增强版的vi)。在一般的系统管理维护中vi就够用，如果想使用代码加亮的话可以使用vim。</p>
<h1 id="vi的3个模式"><a href="#vi的3个模式" class="headerlink" title="vi的3个模式"></a>vi的3个模式</h1><p>1）插入模式：在此模式下可以输入字符，按ESC将回到命令模式。<br>2）命令模式：可以移动光标、删除字符等。<br>3）低行模式：可以保存文件、退出vi、设置vi、查找等功能(低行模式也可以看作是命令模式里的)。</p>
<h1 id="vi命令大全"><a href="#vi命令大全" class="headerlink" title="vi命令大全"></a>vi命令大全</h1><p><img src="../../../../../../images/命令/vi_vim/vi_vim命令.jpg" alt="vi_vim命令.jpg"></p>
<h1 id="进入vi的命令"><a href="#进入vi的命令" class="headerlink" title="进入vi的命令"></a>进入vi的命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vi filename :打开或新建文件，并将光标置于第一行首</div><div class="line">vi +n filename ：打开文件，并将光标置于第n行首</div><div class="line">vi + filename ：打开文件，并将光标置于最后一行首</div><div class="line">vi +/pattern filename：打开文件，并将光标置于第一个与pattern匹配的串处</div><div class="line">vi -r filename ：在上次正用vi编辑时发生系统崩溃，恢复filename</div><div class="line">vi -o/O filename1 filename2 ... ：打开多个文件，依次进行编辑</div></pre></td></tr></table></figure>
<h1 id="vi-关闭文件"><a href="#vi-关闭文件" class="headerlink" title="vi 关闭文件"></a>vi 关闭文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">:w       //保存文件</div><div class="line">:w vpser.net //保存至vpser.net文件</div><div class="line">:q          //退出编辑器，如果文件已修改请使用下面的命令</div><div class="line">:q!        //退出编辑器，且不保存</div><div class="line">:wq         //退出编辑器，且保存文件</div></pre></td></tr></table></figure>
<h1 id="移动光标类命令"><a href="#移动光标类命令" class="headerlink" title="移动光标类命令"></a>移动光标类命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">h ：光标左移一个字符</div><div class="line">l ：光标右移一个字符</div><div class="line">space：光标右移一个字符</div><div class="line">Backspace：光标左移一个字符</div><div class="line">k或Ctrl+p：光标上移一行</div><div class="line">j或Ctrl+n ：光标下移一行</div><div class="line">Enter ：光标下移一行</div><div class="line">w或W ：光标右移一个字至字首</div><div class="line">b或B ：光标左移一个字至字首</div><div class="line">e或E ：光标右移一个字至字尾</div><div class="line">) ：光标移至句尾</div><div class="line">( ：光标移至句首</div><div class="line">&#125;：光标移至段落开头</div><div class="line">&#123;：光标移至段落结尾</div><div class="line">nG：光标移至第n行首</div><div class="line">n+：光标下移n行</div><div class="line">n-：光标上移n行</div><div class="line">n$：光标移至第n行尾</div><div class="line">H ：光标移至屏幕顶行</div><div class="line">M ：光标移至屏幕中间行</div><div class="line">L ：光标移至屏幕最后行</div><div class="line">0：（注意是数字零）光标移至当前行首</div><div class="line">$：光标移至当前行尾</div><div class="line">n+        //向下跳n行</div><div class="line">n-         //向上跳n行</div><div class="line">nG        //跳到行号为n的行</div><div class="line">G           //跳至文件的底部</div></pre></td></tr></table></figure>
<h1 id="屏幕翻滚类命令"><a href="#屏幕翻滚类命令" class="headerlink" title="屏幕翻滚类命令"></a>屏幕翻滚类命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Ctrl+u：向文件首翻半屏</div><div class="line">Ctrl+d：向文件尾翻半屏</div><div class="line">Ctrl+f：向文件尾翻一屏</div><div class="line">Ctrl＋b；向文件首翻一屏</div><div class="line">nz：将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部。</div></pre></td></tr></table></figure>
<h1 id="插入文本类命令"><a href="#插入文本类命令" class="headerlink" title="插入文本类命令"></a>插入文本类命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">i ：在光标前</div><div class="line">I ：在当前行首</div><div class="line">a：光标后</div><div class="line">A：在当前行尾</div><div class="line">o：在当前行之下新开一行</div><div class="line">O：在当前行之上新开一行</div><div class="line">r：替换当前字符</div><div class="line">R：替换当前字符及其后的字符，直至按ESC键</div><div class="line">s：从当前光标位置处开始，以输入的文本替代指定数目的字符</div><div class="line">S：删除指定数目的行，并以所输入文本代替之</div><div class="line">ncw或nCW：修改指定数目的字</div><div class="line">nCC：修改指定数目的行</div></pre></td></tr></table></figure>
<h1 id="复制、粘贴"><a href="#复制、粘贴" class="headerlink" title="复制、粘贴"></a>复制、粘贴</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">yy    //将当前行复制到缓存区，也可以用 <span class="string">"ayy 复制，"</span>a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。</div><div class="line">nyy   //将当前行向下n行复制到缓冲区，也可以用 <span class="string">"anyy 复制，"</span>a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。</div><div class="line">yw    //复制从光标开始到词尾的字符。</div><div class="line">nyw   //复制从光标开始的n个单词。</div><div class="line">y^      //复制从光标到行首的内容。  </div><div class="line">y$      //复制从光标到行尾的内容。</div><div class="line">p        //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用<span class="string">"ap 进行粘贴。</span></div><div class="line">P        //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用"aP 进行粘贴。</div></pre></td></tr></table></figure>
<h1 id="文本替换"><a href="#文本替换" class="headerlink" title="文本替换"></a>文本替换</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">:s/old/new      //用new替换行中首次出现的old</div><div class="line">:s/old/new/g         //用new替换行中所有的old</div><div class="line">:n,m s/old/new/g     //用new替换从n到m行里所有的old</div><div class="line">:%s/old/new/g      //用new替换当前文件里所有的old</div></pre></td></tr></table></figure>
<h1 id="简单替换表达式"><a href="#简单替换表达式" class="headerlink" title="简单替换表达式"></a>简单替换表达式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">        :%s/four/4/g</div><div class="line">“%” 范围前缀表示在所有行中执行替换，最后的 “g” 标记表示替换行中的所有匹配点，如果仅仅对当前行进行操作，那么只要去掉%即可</div><div class="line"></div><div class="line">如果你有一个像 “thirtyfour” 这样的单词，上面的命令会出错。这种情况下，这个单词会被替换成”thirty4″。要解决这个问题，用 “&lt;”来指定匹配单词开头：</div><div class="line">         :%s/&lt;four/4/g</div><div class="line">显然，这样在处理 “fourty” 的时候还是会出错。用 “&gt;” 来解决这个问题：</div><div class="line">        :%s/&lt;four&gt;/4/g</div><div class="line">如果你在编码，你可能只想替换注释中的 “four”，而保留代码中的。由于这很难指定，可以在替换命令中加一个 “c” 标记，这样，Vim 会在每次替换前提示你：</div><div class="line">        :%s/&lt;four&gt;/4/gc</div><div class="line">单词精确匹配替换</div><div class="line">sed <span class="_">-e</span> <span class="string">"s/\&lt;old\&gt;/new/g"</span>  file</div></pre></td></tr></table></figure>
<h1 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ndw或ndW：删除光标处开始及其后的n-1个字</div><div class="line"><span class="keyword">do</span>：删至行首</div><div class="line">d$：删至行尾</div><div class="line">ndd：删除当前行及其后n-1行</div><div class="line">x或X：删除一个字符，x删除光标后的，而X删除光标前的</div><div class="line">Ctrl+u：删除输入方式下所输入的文本</div><div class="line">x         //删除当前字符</div><div class="line">nx         //删除从光标开始的n个字符</div><div class="line">dd       //删除当前行</div><div class="line">ndd     //向下删除当前行在内的n行</div><div class="line">u        //撤销上一步操作</div><div class="line">U       //撤销对当前行的所有操作</div></pre></td></tr></table></figure>
<h1 id="搜索及替换命令"><a href="#搜索及替换命令" class="headerlink" title="搜索及替换命令"></a>搜索及替换命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/pattern：从光标开始处向文件尾搜索pattern</div><div class="line">?pattern：从光标开始处向文件首搜索pattern</div><div class="line">n：在同一方向重复上一次搜索命令</div><div class="line">N：在反方向上重复上一次搜索命令</div><div class="line">：s/p1/p2/g：将当前行中所有p1均用p2替代</div><div class="line">：n1,n2s/p1/p2/g：将第n1至n2行中所有p1均用p2替代</div><div class="line">：g/p1/s//p2/g：将文件中所有p1均用p2替换</div></pre></td></tr></table></figure>
<h1 id="选项设置"><a href="#选项设置" class="headerlink" title="选项设置"></a>选项设置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">all：列出所有选项设置情况</div><div class="line">term：设置终端类型</div><div class="line">ignorance：在搜索中忽略大小写</div><div class="line">list：显示制表位(Ctrl+I)和行尾标志（$)</div><div class="line">number：显示行号</div><div class="line">report：显示由面向行的命令修改过的数目</div><div class="line">terse：显示简短的警告信息</div><div class="line">warn：在转到别的文件时若没保存当前文件则显示NO write信息</div><div class="line">nomagic：允许在搜索模式中，使用前面不带“/”的特殊字符</div><div class="line">nowrapscan：禁止vi在搜索到达文件两端时，又从另一端开始</div><div class="line">mesg：允许vi显示其他用户用write写到自己终端上的信息</div></pre></td></tr></table></figure>
<h1 id="最后行方式命令"><a href="#最后行方式命令" class="headerlink" title="最后行方式命令"></a>最后行方式命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">：n1,n2 co n3：将n1行到n2行之间的内容拷贝到第n3行下</div><div class="line">：n1,n2 m n3：将n1行到n2行之间的内容移至到第n3行下</div><div class="line">：n1,n2 d ：将n1行到n2行之间的内容删除</div><div class="line">：w ：保存当前文件</div><div class="line">：e filename：打开文件filename进行编辑</div><div class="line">：x：保存当前文件并退出</div><div class="line">：q：退出vi</div><div class="line">：q!：不保存文件并退出vi</div><div class="line">：!<span class="built_in">command</span>：执行shell命令<span class="built_in">command</span></div><div class="line">：n1,n2 w!<span class="built_in">command</span>：将文件中n1行至n2行的内容作为<span class="built_in">command</span>的输入并执行之，若不指定n1，n2，则表示将整个文件内容作为<span class="built_in">command</span>的输入</div><div class="line">：r!<span class="built_in">command</span>：将命令<span class="built_in">command</span>的输出结果放到当前行</div></pre></td></tr></table></figure>
<h1 id="寄存器操作"><a href="#寄存器操作" class="headerlink" title="寄存器操作"></a>寄存器操作</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">“?nyy：将当前行及其下n行的内容保存到寄存器？中，其中?为一个字母，n为一个数字</div><div class="line">“?nyw：将当前行及其下n个字保存到寄存器？中，其中?为一个字母，n为一个数字</div><div class="line">“?nyl：将当前行及其下n个字符保存到寄存器？中，其中?为一个字母，n为一个数字</div><div class="line">“?p：取出寄存器？中的内容并将其放到光标位置处。这里？可以是一个字母，也可以是一个数字</div><div class="line">ndd：将当前行及其下共n行文本删除，并将所删内容放到1号删除寄存器中。</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/命令/vi_vim/vi_vim命令/">https://fengqingxiuyi.github.io/2016/08/15/命令/vi_vim/vi_vim命令/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：已经忘记转载自哪里了，表示抱歉，查了很多文章，都不是完全一样。本文仅用作记录。&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;vi（vim）是上Linux非常常用的编辑
    
    </summary>
    
      <category term="命令_vi_vim" scheme="https://fengqingxiuyi.github.io/categories/%E5%91%BD%E4%BB%A4-vi-vim/"/>
    
    
  </entry>
  
  <entry>
    <title>常用Git命令清单</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/%E5%91%BD%E4%BB%A4/Git/%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/命令/Git/常用Git命令清单/</id>
    <published>2016-08-15T14:21:19.000Z</published>
    <updated>2016-08-15T16:01:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文转载自<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">常用 Git 命令清单</a>，本文仅用作记录。</p>
<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。详见下图：</p>
<p><img src="../../../../../../images/命令/Git/Git操作流程图.png" alt="Git操作流程图"></p>
<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。<br>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p>
<h1 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></div><div class="line">$ git init</div><div class="line"></div><div class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></div><div class="line">$ git init [project-name]</div><div class="line"></div><div class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></div><div class="line">$ git <span class="built_in">clone</span> [url]</div></pre></td></tr></table></figure>
<h1 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h1><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示当前的Git配置</span></div><div class="line">$ git config --list</div><div class="line"></div><div class="line"><span class="comment"># 编辑Git配置文件</span></div><div class="line">$ git config <span class="_">-e</span> [--global]</div><div class="line"></div><div class="line"><span class="comment"># 设置提交代码时的用户信息</span></div><div class="line">$ git config [--global] user.name <span class="string">"[name]"</span></div><div class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></div></pre></td></tr></table></figure>
<h1 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加指定文件到暂存区</span></div><div class="line">$ git add [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></div><div class="line">$ git add [dir]</div><div class="line"></div><div class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></div><div class="line">$ git add .</div><div class="line"></div><div class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></div><div class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></div><div class="line">$ git add -p</div><div class="line"></div><div class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></div><div class="line">$ git rm [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></div><div class="line">$ git rm --cached [file]</div><div class="line"></div><div class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></div><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
<h1 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 提交暂存区到仓库区</span></div><div class="line">$ git commit -m [message]</div><div class="line"></div><div class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></div><div class="line">$ git commit [file1] [file2] ... -m [message]</div><div class="line"></div><div class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></div><div class="line">$ git commit <span class="_">-a</span></div><div class="line"></div><div class="line"><span class="comment"># 提交时显示所有diff信息</span></div><div class="line">$ git commit -v</div><div class="line"></div><div class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></div><div class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></div><div class="line">$ git commit --amend -m [message]</div><div class="line"></div><div class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></div><div class="line">$ git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure>
<h1 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有本地分支</span></div><div class="line">$ git branch</div><div class="line"></div><div class="line"><span class="comment"># 列出所有远程分支</span></div><div class="line">$ git branch -r</div><div class="line"></div><div class="line"><span class="comment"># 列出所有本地分支和远程分支</span></div><div class="line">$ git branch <span class="_">-a</span></div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></div><div class="line">$ git branch [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></div><div class="line">$ git checkout -b [branch]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，指向指定commit</span></div><div class="line">$ git branch [branch] [commit]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></div><div class="line">$ git branch --track [branch] [remote-branch]</div><div class="line"></div><div class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></div><div class="line">$ git checkout [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 切换到上一个分支</span></div><div class="line">$ git checkout -</div><div class="line"></div><div class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></div><div class="line">$ git branch --set-upstream [branch] [remote-branch]</div><div class="line"></div><div class="line"><span class="comment"># 合并指定分支到当前分支</span></div><div class="line">$ git merge [branch]</div><div class="line"></div><div class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></div><div class="line">$ git cherry-pick [commit]</div><div class="line"></div><div class="line"><span class="comment"># 删除分支</span></div><div class="line">$ git branch <span class="_">-d</span> [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 删除远程分支</span></div><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote/branch]</div></pre></td></tr></table></figure>
<h1 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有tag</span></div><div class="line">$ git tag</div><div class="line"></div><div class="line"><span class="comment"># 新建一个tag在当前commit</span></div><div class="line">$ git tag [tag]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个tag在指定commit</span></div><div class="line">$ git tag [tag] [commit]</div><div class="line"></div><div class="line"><span class="comment"># 删除本地tag</span></div><div class="line">$ git tag <span class="_">-d</span> [tag]</div><div class="line"></div><div class="line"><span class="comment"># 删除远程tag</span></div><div class="line">$ git push origin :refs/tags/[tagName]</div><div class="line"></div><div class="line"><span class="comment"># 查看tag信息</span></div><div class="line">$ git show [tag]</div><div class="line"></div><div class="line"><span class="comment"># 提交指定tag</span></div><div class="line">$ git push [remote] [tag]</div><div class="line"></div><div class="line"><span class="comment"># 提交所有tag</span></div><div class="line">$ git push [remote] --tags</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，指向某个tag</span></div><div class="line">$ git checkout -b [branch] [tag]</div></pre></td></tr></table></figure>
<h1 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示有变更的文件</span></div><div class="line">$ git status</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的版本历史</span></div><div class="line">$ git <span class="built_in">log</span></div><div class="line"></div><div class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></div><div class="line">$ git <span class="built_in">log</span> --stat</div><div class="line"></div><div class="line"><span class="comment"># 搜索提交历史，根据关键词</span></div><div class="line">$ git <span class="built_in">log</span> -S [keyword]</div><div class="line"></div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</div><div class="line"></div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</div><div class="line"></div><div class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></div><div class="line">$ git <span class="built_in">log</span> --follow [file]</div><div class="line">$ git whatchanged [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></div><div class="line">$ git <span class="built_in">log</span> -p [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示过去5次提交</span></div><div class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</div><div class="line"></div><div class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></div><div class="line">$ git shortlog -sn</div><div class="line"></div><div class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></div><div class="line">$ git blame [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和工作区的差异</span></div><div class="line">$ git diff</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></div><div class="line">$ git diff --cached [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></div><div class="line">$ git diff HEAD</div><div class="line"></div><div class="line"><span class="comment"># 显示两次提交之间的差异</span></div><div class="line">$ git diff [first-branch]...[second-branch]</div><div class="line"></div><div class="line"><span class="comment"># 显示今天你写了多少行代码</span></div><div class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></div><div class="line">$ git show [commit]</div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交发生变化的文件</span></div><div class="line">$ git show --name-only [commit]</div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></div><div class="line">$ git show [commit]:[filename]</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的最近几次提交</span></div><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<h1 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载远程仓库的所有变动</span></div><div class="line">$ git fetch [remote]</div><div class="line"></div><div class="line"><span class="comment"># 显示所有远程仓库</span></div><div class="line">$ git remote -v</div><div class="line"></div><div class="line"><span class="comment"># 显示某个远程仓库的信息</span></div><div class="line">$ git remote show [remote]</div><div class="line"></div><div class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></div><div class="line">$ git remote add [shortname] [url]</div><div class="line"></div><div class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></div><div class="line">$ git pull [remote] [branch]</div><div class="line"></div><div class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></div><div class="line">$ git push [remote] [branch]</div><div class="line"></div><div class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></div><div class="line">$ git push [remote] --force</div><div class="line"></div><div class="line"><span class="comment"># 推送所有分支到远程仓库</span></div><div class="line">$ git push [remote] --all</div></pre></td></tr></table></figure>
<h1 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></div><div class="line">$ git checkout [file]</div><div class="line"></div><div class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></div><div class="line">$ git checkout [commit] [file]</div><div class="line"></div><div class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></div><div class="line">$ git checkout .</div><div class="line"></div><div class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></div><div class="line">$ git reset [file]</div><div class="line"></div><div class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></div><div class="line">$ git reset --hard</div><div class="line"></div><div class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></div><div class="line">$ git reset [commit]</div><div class="line"></div><div class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></div><div class="line">$ git reset --hard [commit]</div><div class="line"></div><div class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></div><div class="line">$ git reset --keep [commit]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></div><div class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></div><div class="line">$ git revert [commit]</div><div class="line"></div><div class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></div><div class="line">$ git stash</div><div class="line">$ git stash pop</div></pre></td></tr></table></figure>
<h1 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成一个可供发布的压缩包</span></div><div class="line">$ git archive</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/命令/Git/常用Git命令清单/">https://fengqingxiuyi.github.io/2016/08/15/命令/Git/常用Git命令清单/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文转载自&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用 Git 命令清单&lt;/a&gt;，本文仅用作记录。&lt;/p&gt;

    
    </summary>
    
      <category term="命令_Git" scheme="https://fengqingxiuyi.github.io/categories/%E5%91%BD%E4%BB%A4-Git/"/>
    
    
  </entry>
  
  <entry>
    <title>ADB命令</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/%E5%91%BD%E4%BB%A4/ADB/ADB%E5%91%BD%E4%BB%A4/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/命令/ADB/ADB命令/</id>
    <published>2016-08-15T14:17:19.000Z</published>
    <updated>2016-08-15T14:34:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文<code>常用命令</code>部分转载自<a href="http://zmywly8866.github.io/2015/01/24/all-adb-command.html" target="_blank" rel="external">Android ADB命令大全(通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等)</a>，本文仅用作记录。</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">获取序列号：adb get-serialno</div><div class="line">查看连接计算机的设备：adb devices</div><div class="line">重启机器：adb reboot</div><div class="line">重启到bootloader，即刷机模式：adb reboot bootloader</div><div class="line">重启到recovery，即恢复模式：adb reboot recovery</div><div class="line">查看<span class="built_in">log</span>：adb logcat</div><div class="line">终止adb服务进程：adb <span class="built_in">kill</span>-server</div><div class="line">重启adb服务进程：adb start-server</div><div class="line">获取机器MAC地址：adb shell  cat /sys/class/net/wlan0/address</div><div class="line">获取CPU序列号：adb shell cat /proc/cpuinfo</div><div class="line">安装APK：adb install &lt;apkfile&gt; //比如：adb install baidu.apk</div><div class="line">保留数据和缓存文件，重新安装apk：adb install -r &lt;apkfile&gt; //比如：adb install -r baidu.apk</div><div class="line">安装apk到sd卡：adb install <span class="_">-s</span> &lt;apkfile&gt; // 比如：adb install <span class="_">-s</span> baidu.apk</div><div class="line">卸载APK：adb uninstall &lt;package&gt; //比如：adb uninstall com.baidu.search</div><div class="line">卸载app但保留数据和缓存文件：adb uninstall -k &lt;package&gt; //比如：adb uninstall -k com.baidu.search</div><div class="line">启动应用：adb shell am start -n &lt;package_name&gt;/.&lt;activity_class_name&gt;</div><div class="line">查看设备cpu和内存占用情况：adb shell top</div><div class="line">查看占用内存前6的app：adb shell top -m 6</div><div class="line">刷新一次内存信息，然后返回：adb shell top -n 1</div><div class="line">查询各进程内存使用情况：adb shell procrank</div><div class="line">杀死一个进程：adb shell <span class="built_in">kill</span> [pid]</div><div class="line">查看进程列表：adb shell ps</div><div class="line">查看指定进程状态：adb shell ps -x [PID]</div><div class="line">查看后台services信息：adb shell service list</div><div class="line">查看当前内存占用：adb shell cat /proc/meminfo</div><div class="line">查看IO内存分区：adb shell cat /proc/iomem</div><div class="line">将system分区重新挂载为可读写分区：adb remount</div><div class="line">从本地复制文件到设备：adb push &lt;<span class="built_in">local</span>&gt; &lt;remote&gt;</div><div class="line">从设备复制文件到本地：adb pull &lt;remote&gt;  &lt;<span class="built_in">local</span>&gt;</div><div class="line">列出目录下的文件和文件夹，等同于dos中的dir命令：adb shell ls</div><div class="line">进入文件夹，等同于dos中的<span class="built_in">cd</span> 命令：adb shell <span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">重命名文件：adb shell rename path/oldfilename path/newfilename</div><div class="line">删除system/avi.apk：adb shell rm /system/avi.apk</div><div class="line">删除文件夹及其下面所有文件：adb shell rm -r &lt;folder&gt;</div><div class="line">移动文件：adb shell mv path/file newpath/file</div><div class="line">设置文件权限：adb shell chmod 777 /system/fonts/DroidSansFallback.ttf</div><div class="line">新建文件夹：adb shell mkdir path/foldelname</div><div class="line">查看文件内容：adb shell cat &lt;file&gt;</div><div class="line">查看wifi密码：adb shell cat /data/misc/wifi/*.conf</div><div class="line">清除<span class="built_in">log</span>缓存：adb logcat -c</div><div class="line">查看bug报告：adb bugreport</div><div class="line">获取设备名称：adb shell cat /system/build.prop</div><div class="line">查看ADB帮助：adb <span class="built_in">help</span></div><div class="line">跑monkey：adb shell monkey -v -p your.package.name 500</div></pre></td></tr></table></figure>
<h1 id="开发所需命令"><a href="#开发所需命令" class="headerlink" title="开发所需命令"></a>开发所需命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1、adb shell dumpsys activity | grep mFocusedActivity：获取真机显示页面的Activity名称，例如：mFocusedActivity: ActivityRecord&#123;4801e67 u0 com.showjoy.ggl/.module.home.MainActivity t867&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/命令/ADB/ADB命令/">https://fengqingxiuyi.github.io/2016/08/15/命令/ADB/ADB命令/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文&lt;code&gt;常用命令&lt;/code&gt;部分转载自&lt;a href=&quot;http://zmywly8866.github.io/2015/01/24/all-adb-command.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android AD
    
    </summary>
    
      <category term="命令_ADB" scheme="https://fengqingxiuyi.github.io/categories/%E5%91%BD%E4%BB%A4-ADB/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac技巧</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/%E5%BF%AB%E6%8D%B7%E9%94%AE/Mac/Mac%E6%8A%80%E5%B7%A7/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/快捷键/Mac/Mac技巧/</id>
    <published>2016-08-15T14:11:19.000Z</published>
    <updated>2016-08-15T14:33:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文仅用作记录。</p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1、⇧：代表的是<span class="built_in">shift</span>键</div><div class="line">2、⌥：代表的是option键</div><div class="line">3、⌘：代表的是<span class="built_in">command</span>键</div></pre></td></tr></table></figure>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1、⇧⌘c：打开Mac的“我的电脑”</div><div class="line">2、⇧⌘g：前往自定义路径的文件夹</div><div class="line">3、先⌘c再⌥⌘v：剪切</div><div class="line">4、⌘x：剪切文字文本一类的</div><div class="line">5、⌘[：倒退到上一步，如网页之间的前进与后退</div><div class="line">6、⌘]：前进到下一步，如网页之间的前进与后退</div><div class="line">7、OS X常用快捷键：/Volumes/MAIN/qingfeng/Data/技术文章/OS X常用快捷键.jpg</div><div class="line">￼</div><div class="line">8、Mac 键盘快捷键：https://support.apple.com/zh-cn/HT201236</div></pre></td></tr></table></figure>
<h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1、开启窗口三指拖拽功能：系统偏好设置-&gt;辅助功能-&gt;左边窗口中的“鼠标与触控板”-&gt;右下角的“触控板选项…”-&gt;勾选“启用拖移”并设置为“三指拖移”然后点击“好”即可</div></pre></td></tr></table></figure>
<h1 id="OS-X常用快捷键"><a href="#OS-X常用快捷键" class="headerlink" title="OS X常用快捷键"></a>OS X常用快捷键</h1><p><img src="../../../../../../images/快捷键/Mac/OSX常用快捷键.jpg" alt="OS X常用快捷键"></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/快捷键/Mac/Mac技巧/">https://fengqingxiuyi.github.io/2016/08/15/快捷键/Mac/Mac技巧/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文仅用作记录。&lt;/p&gt;
&lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
    
    </summary>
    
      <category term="快捷键_Mac" scheme="https://fengqingxiuyi.github.io/categories/%E5%BF%AB%E6%8D%B7%E9%94%AE-Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>AndroidStudio快捷键</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/%E5%BF%AB%E6%8D%B7%E9%94%AE/AndroidStudio/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/快捷键/AndroidStudio/AndroidStudio快捷键/</id>
    <published>2016-08-15T14:08:19.000Z</published>
    <updated>2016-08-15T14:34:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：已经不知道是转载的谁的了，表示抱歉，其中有一大部分和网上的应该是一样的，但是结尾部分有所不同，有兴趣的可以看一下，本文仅用作记录。</p>
<h1 id="查找／查看相关"><a href="#查找／查看相关" class="headerlink" title="查找／查看相关"></a>查找／查看相关</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">⌘O: 全局查找class类名</div><div class="line">⌘F: 在当前编辑文件中查找</div><div class="line">⌘F12: 当前编辑的文件中结构快速导航</div><div class="line">⌘E: 打开最近访问的文件列表</div><div class="line">⌥⌘O: 输入类名／方法名／字段名来查找任何匹配的类／方法／字段</div><div class="line">⇧⌘O: 全局项目查找文件（类／资源文件／布局文件都通过该快捷键查找）</div><div class="line">⌃H: 查看当前编辑class类的hierarchy结构</div><div class="line">⌥F7: 列出全局项目中该类／方法 被引用／调用的情况</div><div class="line">⌥⌘F7: 列出全局项目中该类／方法 被引用／调用的情况</div><div class="line">⌃⌥H: 方法被调用结构［method’s Call Hierarchy］</div><div class="line">⌘P: 列出函数方法一系列的有效参数，如果光标是一个方法调用的括号之间</div><div class="line">⇧⌘F7: 快速，高亮显示变量在当前文件中的引用情况,使用⌘G和⇧⌘G快捷键 可以前往跳到下一个/上一个高亮的变量，按⎋移除高亮显示</div><div class="line">F1: 查看类／方法的注释文档</div></pre></td></tr></table></figure>
<h1 id="控制操作相关"><a href="#控制操作相关" class="headerlink" title="控制操作相关"></a>控制操作相关</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">⌘/: 注释与取消注释，注释效果 //…</div><div class="line">⌥⌘/: 注释与取消注释，注释效果 /*…*/</div><div class="line">⇧⌥up/down: 移动行上下移动</div><div class="line">⌘delete: 删除行</div><div class="line">⌘d: 复制行</div><div class="line">⌘J: 快速生成模版代码块，如<span class="keyword">if</span>,<span class="keyword">while</span>,<span class="built_in">return</span>等</div><div class="line">⌘N: 快速生成getter／setter方法，构造方法，toString()方法等</div><div class="line">⌥⌘T: Surround with快速调出<span class="keyword">if</span>,<span class="keyword">for</span>,try...catch,<span class="keyword">while</span>等环绕代码</div><div class="line">⌃O: 引入重写父类的方法［Override Methods］</div><div class="line">⌃I: 引入实现接口或抽象类方法［Implement Methods］</div><div class="line">⌃Space: 当申明一个变量时，根据变量类型提示给出建议的变量名称，等还有其他很多智能提示作用</div><div class="line">⌥⌘L: 代码格式化</div><div class="line">⌘⇧U: 切换选中内容的大小写</div></pre></td></tr></table></figure>
<h1 id="代码重构相关"><a href="#代码重构相关" class="headerlink" title="代码重构相关"></a>代码重构相关</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">⇧F6: 代码重构时，类名／方法名／变量名 重命名操作</div><div class="line">⌘R: 代码重构时，可以用来批量重命名变量</div><div class="line">⌥⌘M: 方法重构，方法抽离</div><div class="line">⌥⌘P: 参数重构，将方法内变量抽离成方法参数</div><div class="line">⌥⌘V: 变量抽离，</div><div class="line">⌥⌘F: 字段抽离，将方法内的变量抽离成类字段申明,简单说就是把变量的申明从方法内重构抽离到方法外</div></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">F1　　显示注释文档</div><div class="line">F2　　高亮错误或警告快速定位</div><div class="line">Command + F12　　显示当前文件的结构(查看所有方法)</div><div class="line">Command + F　　查找文本</div><div class="line">Command + R　　替换文本</div><div class="line">Command + O　　查找类</div><div class="line">Command + E　　最近打开的文件</div><div class="line">Command + 1　　打开或隐藏工程面板</div><div class="line">Command + B　　打开光标处的类或方法</div><div class="line">Command + X　　删除行</div><div class="line">Command + D　　复制行</div><div class="line">Command + P　　方法参数提示</div><div class="line">Command + /　　单行注释</div><div class="line">Option + Command + /　　多行注释</div><div class="line">Option + Command + O　　查找类中的方法或变量</div><div class="line">Option + Command + left/right　　返回至上次浏览的位置</div><div class="line">Option + Command + [或]　　可以跳到大括号的开头结尾</div><div class="line">Option + Command + T　　可以把代码包在一块内 例如try/catch</div><div class="line">Option + Command + V　　new对象时快速返回变量类型及变量名</div><div class="line">Option + Command + F　　选中变量名 将局部变量变成成员变量</div><div class="line">Option + Command + M　　把选中内容抽取成方法</div><div class="line">Option + Command + L　　格式化代码</div><div class="line"></div><div class="line">Shift + F6　　重命名</div><div class="line">Shift + Option + C　　对比最近修改的代码</div><div class="line">Shift + Command + U　　大小写装换</div><div class="line">Shift + Command + Up/Down　　代码向上/下移动</div><div class="line">Shift + Command + O　　查找文件</div><div class="line"></div><div class="line">Option + F1　　定位代码所在位置</div><div class="line">Option + 回车　　导入包 自动修正</div><div class="line">Control + H　　显示当前类的继承结构</div><div class="line">Control + Option + O　　优化导入的类和包</div><div class="line">Control + Option + 空格　　智能提示</div><div class="line">Control + Shift + 空格　　提示类名和接口名</div><div class="line"></div><div class="line">⇧⌘A: 你可以调用任何菜单或动作的名称在Android studio中</div><div class="line">⇧⌘sapce：代码提示（Class Name Completion）</div><div class="line"><span class="built_in">shift</span>+A: annotate</div><div class="line">在AS属性窗口中搜索postfix，可以查看类似快速编写<span class="keyword">for</span>循环语句的步骤</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/快捷键/AndroidStudio/AndroidStudio快捷键/">https://fengqingxiuyi.github.io/2016/08/15/快捷键/AndroidStudio/AndroidStudio快捷键/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：已经不知道是转载的谁的了，表示抱歉，其中有一大部分和网上的应该是一样的，但是结尾部分有所不同，有兴趣的可以看一下，本文仅用作记录。&lt;/p&gt;
&lt;h1 id=&quot;查找／查看相关&quot;&gt;&lt;a href=&quot;#查找／查看相关&quot; class=&quot;headerlink&quot; title=&quot;查找／
    
    </summary>
    
      <category term="快捷键_AndroidStudio" scheme="https://fengqingxiuyi.github.io/categories/%E5%BF%AB%E6%8D%B7%E9%94%AE-AndroidStudio/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac上Android相关环境变量的配置</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/Mac%E4%B8%8AAndroid%E7%9B%B8%E5%85%B3%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/环境变量/Mac上Android相关环境变量的配置/</id>
    <published>2016-08-15T13:51:19.000Z</published>
    <updated>2016-08-15T14:33:24.000Z</updated>
    
    <content type="html"><![CDATA[<font color="red">注：本文所述环境变量，只在Mac下有效</font>

<p>如果是针对当前用户进行环境变量的设置，只需要打开终端后，输入命令vi ~/.bash_profile即可自行配置环境变量（此处需要懂得vi的基本知识），如果没有.bash_profile文件则可以使用touch命令创建该文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch ~/.bash_profile</div></pre></td></tr></table></figure>
<p>自行配置环境变量不做过多阐述，根据例子即可明白：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#配置JAVA_HOME，此处路径根据自己的版本填写</span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92:.jdk/Contents/Home</div><div class="line"><span class="comment">#把JAVA添加到到环境变量PATH中</span></div><div class="line"><span class="built_in">export</span> PATH=.:<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</div><div class="line"><span class="comment">#配置CLASSPATH</span></div><div class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</div><div class="line"></div><div class="line"><span class="comment">#设置gradle的主目录</span></div><div class="line"><span class="built_in">export</span> GRADLE_HOME=<span class="string">"/Applications/Android Studio.app/Contents/gradle/gradle-2.10/"</span></div><div class="line"><span class="comment">#把JAVA添加到到环境变量PATH中</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GRADLE_HOME</span>/bin</div><div class="line"><span class="comment">#配置NDK环境变量</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/Volumes/MAIN/qingfeng/Software/sdk/platform-tools</div><div class="line"><span class="built_in">export</span> NDK_ROOT=/Volumes/MAIN/qingfeng/Software/android-ndk-r10e</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$NDK_ROOT</span></div></pre></td></tr></table></figure>
<p>配置完成后，使用以下命令即可使环境变量生效：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.bash_profile</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/环境变量/Mac上Android相关环境变量的配置/">https://fengqingxiuyi.github.io/2016/08/15/环境变量/Mac上Android相关环境变量的配置/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;red&quot;&gt;注：本文所述环境变量，只在Mac下有效&lt;/font&gt;

&lt;p&gt;如果是针对当前用户进行环境变量的设置，只需要打开终端后，输入命令vi ~/.bash_profile即可自行配置环境变量（此处需要懂得vi的基本知识），如果没有.bash_profi
    
    </summary>
    
      <category term="环境变量" scheme="https://fengqingxiuyi.github.io/categories/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>通用BaseAtapter</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/Android/View/Atapter/%E9%80%9A%E7%94%A8BaseAtapter/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/Android/View/Atapter/通用BaseAtapter/</id>
    <published>2016-08-15T05:39:21.000Z</published>
    <updated>2016-08-15T06:49:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>我们在开发项目的过程中，经常会用到ListView、GridView这一类的控件，从而不可避免的会用到<code>BaseAtapter</code>。然后我们必须实现那四个方法(getCount、getItem、getItemId、getView)，编写类似的代码，实在是太繁琐了。因此，我们需要创建一个通用的BaseAdapter来解决我们的难题。</p>
<h1 id="继承BaseAdapter"><a href="#继承BaseAdapter" class="headerlink" title="继承BaseAdapter"></a>继承BaseAdapter</h1><p>既然我们想要创建一个通用的BaseAdapter，那肯定需要继承于BaseAdapter，然后由于需要从外部传递data到adapter中进行处理，data的格式又是多样化的，所以我们需要使用<code>泛型</code>来解决这个问题，于是有了这样的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建构造方法"><a href="#创建构造方法" class="headerlink" title="创建构造方法"></a>创建构造方法</h2><p>接着就是同样的套路了，即创建构造方法，接收最为基本的<code>上下文</code>和<code>data</code>。于是有了，这样的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> Context context;</div><div class="line"><span class="keyword">protected</span> List&lt;T&gt; data;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CommonAdapter</span><span class="params">(Context context, List&lt;T&gt; data)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.context = context;</div><div class="line">	<span class="keyword">this</span>.data = data;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>差点忘了还有布局文件了，如果你的SDK支持LayoutRes注解的话，那就再好不过了，只需要一行代码就可以搞定了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="meta">@LayoutRes</span> <span class="function"><span class="keyword">int</span> <span class="title">getLayoutId</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>如果不支持的话，也没有关系，从构造方法传入即可，但是这样其实不太好。</p>
<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>得到外部传入的数据之后，我们需要在那四个方法中进行一些基本的操作了，如判空操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@see</span> android.widget.Adapter#getCount()</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span> == data ? <span class="number">0</span> : data.size();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@see</span> android.widget.Adapter#getItem(int)</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == data || data.size() &lt;= position) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> data.get(position);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@see</span> android.widget.Adapter#getItemId(int)</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> position;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getView方法比较复杂，相对于其他三个方法而言，所以在这里就单独讲解，由于getView方法是需要ViewHolder类来进行协助管理的，所以在执行getView方法中的具体操作之前，需要先创建一个ViewHolder类</p>
<h1 id="创建ViewHolder"><a href="#创建ViewHolder" class="headerlink" title="创建ViewHolder"></a>创建ViewHolder</h1><h2 id="获得ViewHolder实例"><a href="#获得ViewHolder实例" class="headerlink" title="获得ViewHolder实例"></a>获得ViewHolder实例</h2><p>首先因为holder的相关操作都是在getView方法中执行的，所以，我们需要的参数有这么几个：position、convertView、parent，又因为我们之后需要在ViewHolder类中进行数据展示，所以必不可少的参数还有这两个：context、layoutId。有了这5个参数之后，我们就可以大干一场了：</p>
<p>我们可以创建一个静态方法，用于获取ViewHolder的实例，如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewHolder <span class="title">get</span><span class="params">(Context context, View convertView, </span></span></div><div class="line">        ViewGroup parent, <span class="keyword">int</span> layoutId, <span class="keyword">int</span> position) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == convertView) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(context, parent, layoutId, position);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        ViewHolder holder = (ViewHolder) convertView.getTag();</div><div class="line">        holder.mPosition = position;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建构造方法-1"><a href="#创建构造方法-1" class="headerlink" title="创建构造方法"></a>创建构造方法</h2><p>根据上述代码，我们显然已经知道了构造方法的内容了，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(Context context, ViewGroup parent, <span class="keyword">int</span> layoutId, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mPosition = position;</div><div class="line">    <span class="keyword">this</span>.mConvertView = LayoutInflater.from(context).inflate(layoutId, parent, <span class="keyword">false</span>);</div><div class="line">    <span class="keyword">this</span>.mConvertView.setTag(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="getView"><a href="#getView" class="headerlink" title="getView"></a>getView</h1><p>既然我们已经处理好了ViewHolder类，那么现在就让我们来解决getView这个问题吧！其实我们只需要执行以下三步就可以了：</p>
<ol>
<li>获得ViewHolder实例；</li>
<li>将需要传递出去的ViewHolder实例、指定位置的数据传递出去；</li>
<li>返回ViewHolder中获得的mConvertView</li>
</ol>
<p>即如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@see</span> android.widget.Adapter#getView(int, View, ViewGroup)</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">    ViewHolder holder = ViewHolder.get(context, convertView, parent, getLayoutId(), position);</div><div class="line">    </div><div class="line">    convert(holder, getItem(position), position);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> holder.getConvertView();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(ViewHolder holder, T t, <span class="keyword">int</span> position)</span></span>;</div></pre></td></tr></table></figure>
<h1 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h1><p>最后让我们重新回到ViewHolder类中，之前我已经说过了，我们需要在ViewHolder类中展示数据，所以我们需要创建一个方法，用于支持<code>通过viewId获取控件</code>。</p>
<p>这意味着我们需要将通过<code>mConvertView.findViewById(viewId)</code>获得的数据存储起来，然后在需要用到的地方取出来，这个时候你也许想起了，这不就是map么，是的，不过我不建议用map进行操作，这里我使用的SparseArray。</p>
<h2 id="存储View"><a href="#存储View" class="headerlink" title="存储View"></a>存储View</h2><p>这里我们首先需要在构造方法中创建SparseArray的实例，并将其定义为全局变量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T extends View&gt;<span class="function">T <span class="title">getView</span><span class="params">(<span class="keyword">int</span> viewId)</span> </span>&#123;</div><div class="line">    View view = mViews.get(viewId);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == view) &#123;</div><div class="line">        view = mConvertView.findViewById(viewId);</div><div class="line">        mViews.put(viewId, view);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (T) view;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="获取View"><a href="#获取View" class="headerlink" title="获取View"></a>获取View</h2><p>进行数据展示的操作有很多种，这里我就以最简单的显示文字内容为例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ViewHolder <span class="title">setText</span><span class="params">(<span class="keyword">int</span> viewId, String text)</span> </span>&#123;</div><div class="line">    TextView tv = getView(viewId);</div><div class="line">    tv.setText(text);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这句话表明当我们在自己的adapter类中重写了convert方法后，只需要使用holder实例，调用setText方法，并传递viewId和text内容就可以正常显示文本了！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，我们的通用BaseAdapter就已经全部完工了，这里我就不公布源代码了，大家自行研究就会懂了。</p>
<p>对于<code>获取View</code>那一节，你可能会觉得比较麻烦，因为之后想要显示图片，我要在ViewHolder类中添加一个显示图片方法；想要设置背景，还需要在ViewHolder类中添加一个设置背景的方法……我想说这其实并没有什么，因为这对于整个项目都是通用的，只要设置一遍就可以了，如果你不想让ViewHoder类发生变化，也可以试试提取出来，记得告诉我哦，蟹蟹~😄</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/Android/View/Atapter/通用BaseAtapter/">https://fengqingxiuyi.github.io/2016/08/15/Android/View/Atapter/通用BaseAtapter/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;我们在开发项目的过程中，经常会用到ListView、GridView这一类的控件，从而不可避免的会用到&lt;code&gt;BaseAtapter&lt;/code
    
    </summary>
    
      <category term="Android_View_Atapter" scheme="https://fengqingxiuyi.github.io/categories/Android-View-Atapter/"/>
    
    
  </entry>
  
  <entry>
    <title>declare-styleable中format详解</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/Android/View/%E8%87%AA%E5%AE%9A%E4%B9%89View/%E5%B1%9E%E6%80%A7/declare-styleable%E4%B8%ADformat%E8%AF%A6%E8%A7%A3/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/declare-styleable中format详解/</id>
    <published>2016-08-14T16:19:11.000Z</published>
    <updated>2016-08-14T16:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自：<a href="http://blog.csdn.net/lihengfang/article/details/8290754" target="_blank" rel="external">declare-styleable中format详解</a></p>
<p>我们在做项目的时候，由于android自带的属性不能满足需求，android提供了自定义属性的方法，其中的format是做什么用的？以及如何使用它？下面列出一些常用的。</p>
<h1 id="reference：参考某一资源ID。"><a href="#reference：参考某一资源ID。" class="headerlink" title="reference：参考某一资源ID。"></a>reference：参考某一资源ID。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"background"</span> format = <span class="string">"reference"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ImageView</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span></div><div class="line">	android:background = <span class="string">"@drawable/图片ID"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="color：颜色值。"><a href="#color：颜色值。" class="headerlink" title="color：颜色值。"></a>color：颜色值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"textColor"</span> format = <span class="string">"color"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span></div><div class="line">	android:textColor = <span class="string">"#00FF00"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="boolean：布尔值。"><a href="#boolean：布尔值。" class="headerlink" title="boolean：布尔值。"></a>boolean：布尔值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"focusable"</span> format = <span class="string">"boolean"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span></div><div class="line">	android:focusable = <span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="dimension：尺寸值。"><a href="#dimension：尺寸值。" class="headerlink" title="dimension：尺寸值。"></a>dimension：尺寸值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"layout_width"</span> format = <span class="string">"dimension"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="float：浮点值。"><a href="#float：浮点值。" class="headerlink" title="float：浮点值。"></a>float：浮点值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"AlphaAnimation"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"fromAlpha"</span> format = <span class="string">"float"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"toAlpha"</span> format = <span class="string">"float"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;alpha</div><div class="line">	android:fromAlpha = <span class="string">"1.0"</span></div><div class="line">	android:toAlpha = <span class="string">"0.7"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="integer：整型值。"><a href="#integer：整型值。" class="headerlink" title="integer：整型值。"></a>integer：整型值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"AnimatedRotateDrawable"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"visible"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"frameDuration"</span> format=<span class="string">"integer"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"framesCount"</span> format=<span class="string">"integer"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"pivotX"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"pivotY"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"drawable"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;animated-rotate</div><div class="line">	xmlns:android = <span class="string">"http://schemas.android.com/apk/res/android"</span> </div><div class="line">	android:drawable = <span class="string">"@drawable/图片ID"</span> </div><div class="line">	android:pivotX = <span class="string">"50%"</span> </div><div class="line">	android:pivotY = <span class="string">"50%"</span> </div><div class="line">	android:framesCount = <span class="string">"12"</span> </div><div class="line">	android:frameDuration = <span class="string">"100"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="string：字符串。"><a href="#string：字符串。" class="headerlink" title="string：字符串。"></a>string：字符串。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"MapView"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"apiKey"</span> format = <span class="string">"string"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;com.google.android.maps.MapView</div><div class="line">	android:layout_width = <span class="string">"fill_parent"</span></div><div class="line">	android:layout_height = <span class="string">"fill_parent"</span></div><div class="line">	android:apiKey = <span class="string">"0jOkQ80oD1JL9C6HAja99uGXCRiS2CGjKO_bc_g"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="fraction：百分数。"><a href="#fraction：百分数。" class="headerlink" title="fraction：百分数。"></a>fraction：百分数。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"RotateDrawable"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"visible"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"fromDegrees"</span> format = <span class="string">"float"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"toDegrees"</span> format = <span class="string">"float"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"pivotX"</span> format = <span class="string">"fraction"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"pivotY"</span> format = <span class="string">"fraction"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"drawable"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;rotate</div><div class="line">	xmlns:android = <span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">	android:interpolator = <span class="string">"@anim/动画ID"</span></div><div class="line">	android:fromDegrees = <span class="string">"0"</span></div><div class="line">	android:toDegrees = <span class="string">"360"</span></div><div class="line">	android:pivotX = <span class="string">"200%"</span></div><div class="line">	android:pivotY = <span class="string">"300%"</span></div><div class="line">	android:duration = <span class="string">"5000"</span></div><div class="line">	android:repeatMode = <span class="string">"restart"</span></div><div class="line">	android:repeatCount = <span class="string">"infinite"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="enum：枚举值。"><a href="#enum：枚举值。" class="headerlink" title="enum：枚举值。"></a>enum：枚举值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name=<span class="string">"orientation"</span>&gt;</div><div class="line">		&lt;enum name=<span class="string">"horizontal"</span> value=<span class="string">"0"</span> /&gt;</div><div class="line">		&lt;enum name=<span class="string">"vertical"</span> value=<span class="string">"1"</span> /&gt;</div><div class="line">	&lt;/attr&gt;           </div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line">	xmlns:android = <span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">	android:orientation = <span class="string">"vertical"</span></div><div class="line">	android:layout_width = <span class="string">"fill_parent"</span></div><div class="line">	android:layout_height = <span class="string">"fill_parent"</span>&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<h1 id="flag：位或运算。"><a href="#flag：位或运算。" class="headerlink" title="flag：位或运算。"></a>flag：位或运算。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name=<span class="string">"windowSoftInputMode"</span>&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateUnspecified"</span> value = <span class="string">"0"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateUnchanged"</span> value = <span class="string">"1"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateHidden"</span> value = <span class="string">"2"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateAlwaysHidden"</span> value = <span class="string">"3"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateVisible"</span> value = <span class="string">"4"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateAlwaysVisible"</span> value = <span class="string">"5"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"adjustUnspecified"</span> value = <span class="string">"0x00"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"adjustResize"</span> value = <span class="string">"0x10"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"adjustPan"</span> value = <span class="string">"0x20"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"adjustNothing"</span> value = <span class="string">"0x30"</span> /&gt;</div><div class="line">	&lt;/attr&gt;        </div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">	android:name = <span class="string">".StyleAndThemeActivity"</span></div><div class="line">	android:label = <span class="string">"@string/app_name"</span></div><div class="line">	android:windowSoftInputMode = <span class="string">"stateUnspecified | stateUnchanged　|　stateHidden"</span>&gt;</div><div class="line">	&lt;intent-filter&gt;</div><div class="line">		&lt;action android:name = <span class="string">"android.intent.action.MAIN"</span> /&gt;</div><div class="line">		&lt;category android:name = <span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</div><div class="line">	&lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure>
<p>特别要注意：</p>
<p>属性定义时可以指定多种类型值。</p>
<p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"background"</span> format = <span class="string">"reference|color"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ImageView</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span></div><div class="line">	android:background = <span class="string">"@drawable/图片ID|#00FF00"</span>/&gt;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/declare-styleable中format详解/">https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/declare-styleable中format详解/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载自：&lt;a href=&quot;http://blog.csdn.net/lihengfang/article/details/8290754&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;declare-styleable中format详解&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android_View_自定义View_属性" scheme="https://fengqingxiuyi.github.io/categories/Android-View-%E8%87%AA%E5%AE%9A%E4%B9%89View-%E5%B1%9E%E6%80%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>attr和styleable的关系</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/Android/View/%E8%87%AA%E5%AE%9A%E4%B9%89View/%E5%B1%9E%E6%80%A7/attr%E5%92%8Cstyleable%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/attr和styleable的关系/</id>
    <published>2016-08-14T16:12:21.000Z</published>
    <updated>2016-08-14T16:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自：<a href="http://www.jianshu.com/p/61b79e7f88fc" target="_blank" rel="external">深入理解Android 自定义attr Style styleable以及其应用</a></p>
<p>注：本文只截取了其中的<code>attr和styleable的关系</code>部分，其他部分可以查看原文，进行研究。</p>
<h1 id="attr和styleable的关系"><a href="#attr和styleable的关系" class="headerlink" title="attr和styleable的关系"></a>attr和styleable的关系</h1><p>首先要明确一点，<font color="red">attr不依赖于styleable，styleable只是为了方便attr的使用。</font></p>
<p>我们自己定义属性完全可以不放到styleable里面，比如直接在resources文件中定义一些属性：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;attr name=<span class="string">"custom_attr1"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">&lt;attr name=<span class="string">"custom_attr2"</span> format=<span class="string">"string"</span> /&gt;</div></pre></td></tr></table></figure>
<p>定义一个attr就会在R文件里面生成一个Id，那么我们去获取这个属性时，必须调用如下代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int[] custom_attrs = &#123;R.attr.custom_attr1,R.custom_attr2&#125;;</div><div class="line">TypedArray typedArray = context.obtainStyledAttributes(<span class="built_in">set</span>,custom_attrs);</div></pre></td></tr></table></figure>
<p>而通过定义一个styleable，我们可以在R文件里自动生成一个int[]，数组里面的int就是定义在styleable里面的attr的id。所以我们在获取属性的时候就可以直接使用styleable数组来获取一系列的属性。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"custom_attrs"</span>&gt;   </div><div class="line">        &lt;attr name=<span class="string">"custom_attr1"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">        &lt;attr name=<span class="string">"custom_attr2"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>获取：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TypedArray typedArray = context.obtainStyledAttributes(<span class="built_in">set</span>,R.styleable.custom_attrs);</div></pre></td></tr></table></figure>
<p>由上面的例子可以知道，定义一个declare-styleable，在获取属性的时候为我们自动提供了一个属性数组。此外，我觉得使用declare-styleable的方式有利于我们我们把相关的属性组织起来，有一个分组的概念，属性的使用范围更加明确。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/attr和styleable的关系/">https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/attr和styleable的关系/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载自：&lt;a href=&quot;http://www.jianshu.com/p/61b79e7f88fc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解Android 自定义attr Style styleable以及其应用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Android_View_自定义View_属性" scheme="https://fengqingxiuyi.github.io/categories/Android-View-%E8%87%AA%E5%AE%9A%E4%B9%89View-%E5%B1%9E%E6%80%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>属性的设置与使用</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/Android/View/%E8%87%AA%E5%AE%9A%E4%B9%89View/%E5%B1%9E%E6%80%A7/%E5%B1%9E%E6%80%A7%E7%9A%84%E8%AE%BE%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/Android/View/自定义View/属性/属性的设置与使用/</id>
    <published>2016-08-14T15:53:21.000Z</published>
    <updated>2016-08-14T16:30:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了将某些公用的View抽取成通用的View，我们需要用到自定义View，而且一般情况下，为了方便快捷，我们需要在布局文件中就设置好值，所以我们需要学会运用<code>属性</code>。接下来就让我们一起进入实战演练一番吧！</p>
<p><font color="00AF60"><strong><em>案例：</em></strong></font>比如说我们编写一个ShopCheckItem类，继承于RelativeLayout，用来作为自定义的View，那么我们需要执行以下几个步骤：</p>
<h1 id="编写布局文件"><a href="#编写布局文件" class="headerlink" title="编写布局文件"></a>编写布局文件</h1><p>首先我们需要编写布局文件，不要问为什么，自定义View的办法有很多种，本文只讲这种办法，慢慢看你就懂了！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;RelativeLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:paddingLeft=<span class="string">"20dp"</span></div><div class="line">    android:paddingRight=<span class="string">"20dp"</span>&gt;</div><div class="line"></div><div class="line">    &lt;com.showjoy.view.SHIconFontTextView</div><div class="line">        android:id=<span class="string">"@+id/view_shop_check_item_icon"</span></div><div class="line">        android:layout_width=<span class="string">"32dp"</span></div><div class="line">        android:layout_height=<span class="string">"32dp"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id=<span class="string">"@+id/view_shop_check_item_name"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_centerVertical=<span class="string">"true"</span></div><div class="line">        android:layout_marginLeft=<span class="string">"5dp"</span></div><div class="line">        android:layout_toRightOf=<span class="string">"@id/view_shop_check_item_icon"</span></div><div class="line">        android:textColor=<span class="string">"@color/black"</span></div><div class="line">        android:textSize=<span class="string">"16sp"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;ImageView</div><div class="line">        android:id=<span class="string">"@+id/view_shop_check_item_selected"</span></div><div class="line">        android:layout_width=<span class="string">"25dp"</span></div><div class="line">        android:layout_height=<span class="string">"25dp"</span></div><div class="line">        android:layout_alignParentRight=<span class="string">"true"</span>/&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<h1 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h1><p>接着根据布局，发现我们需要这样一些属性，如：icon、name、selected。于是我们就可以在styles.xml文件中编写自定义的属性了，具体代码如下所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"ShopCheckItem"</span>&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_check_item_icon"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_check_item_name"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_check_item_name_color"</span> format=<span class="string">"color"</span> /&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_check_item_selected"</span> format=<span class="string">"boolean"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<h1 id="自定义View"><a href="#自定义View" class="headerlink" title="自定义View"></a>自定义View</h1><p>编写好属性后，我们就可以开始自定义view的编写了，一般包括以下几个步骤：</p>
<h2 id="使用inflate方式将布局转换为View"><a href="#使用inflate方式将布局转换为View" class="headerlink" title="使用inflate方式将布局转换为View"></a>使用inflate方式将布局转换为View</h2><h2 id="找到布局文件中得控件即findViewById"><a href="#找到布局文件中得控件即findViewById" class="headerlink" title="找到布局文件中得控件即findViewById"></a>找到布局文件中得控件即findViewById</h2><h2 id="获取在布局文件中自定义属性的值"><a href="#获取在布局文件中自定义属性的值" class="headerlink" title="获取在布局文件中自定义属性的值"></a>获取在布局文件中自定义属性的值</h2><h2 id="根据自定义属性的值初始化控件"><a href="#根据自定义属性的值初始化控件" class="headerlink" title="根据自定义属性的值初始化控件"></a>根据自定义属性的值初始化控件</h2><h2 id="暴露接口"><a href="#暴露接口" class="headerlink" title="暴露接口"></a>暴露接口</h2><p>注意：接口不一定是interface，只要是提供给别人用的，就算是一个public方法也是接口，如果不清楚，可以查看这篇文章：<a href="../../../../Wiki/接口回调/">接口回调</a></p>
<p>所以，完整代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.showjoy.shop.common.view;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.text.TextUtils;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"><span class="keyword">import</span> android.widget.RelativeLayout;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.showjoy.shop.R;</div><div class="line"><span class="keyword">import</span> com.showjoy.view.SHIconFontTextView;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by qingfeng on 7/20/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShopCheckItem</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SHIconFontTextView viewShopCheckItemIcon;</div><div class="line">    <span class="keyword">private</span> TextView viewShopCheckItemName;</div><div class="line">    <span class="keyword">private</span> ImageView viewShopCheckItemSelected;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShopCheckItem</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        init(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShopCheckItem</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        init(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShopCheckItem</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        inflate(context, R.layout.view_pay_method, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">        viewShopCheckItemIcon = (SHIconFontTextView) findViewById(R.id.view_shop_check_item_icon);</div><div class="line">        viewShopCheckItemName = (TextView) findViewById(R.id.view_shop_check_item_name);</div><div class="line">        viewShopCheckItemSelected = (ImageView) findViewById(R.id.view_shop_check_item_selected);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != attrs) &#123;</div><div class="line">            TypedArray typeArray = context.obtainStyledAttributes(attrs, R.styleable.ShopCheckItem);</div><div class="line"></div><div class="line">            String icon = typeArray.getString(R.styleable.ShopCheckItem_shop_check_item_icon);</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(icon)) &#123;</div><div class="line">                viewShopCheckItemIcon.setText(icon);</div><div class="line">            &#125;</div><div class="line">            String name = typeArray.getString(R.styleable.ShopCheckItem_shop_check_item_name);</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(name)) &#123;</div><div class="line">                viewShopCheckItemName.setText(name);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> color = typeArray.getColor(R.styleable.ShopCheckItem_shop_check_item_name_color,</div><div class="line">                    context.getResources().getColor(R.color.grey5));</div><div class="line">            viewShopCheckItemName.setTextColor(color);</div><div class="line">            <span class="keyword">boolean</span> selected = typeArray.getBoolean(R.styleable.ShopCheckItem_shop_check_item_selected, <span class="keyword">false</span>);</div><div class="line">            <span class="keyword">if</span> (selected) &#123;</div><div class="line">                viewShopCheckItemSelected.setImageResource(R.mipmap.view_shop_check_item_selected);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                viewShopCheckItemSelected.setImageResource(R.drawable.view_shop_check_item_unselected);</div><div class="line">            &#125;</div><div class="line">            typeArray.recycle();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSelected</span><span class="params">(<span class="keyword">boolean</span> selected)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (selected) &#123;</div><div class="line">            viewShopCheckItemIcon.setTextColor(getContext().getResources().getColor(R.color.black));</div><div class="line">            viewShopCheckItemName.setTextColor(getContext().getResources().getColor(R.color.black));</div><div class="line">            viewShopCheckItemSelected.setImageResource(R.mipmap.view_shop_check_item_selected);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            viewShopCheckItemIcon.setTextColor(getContext().getResources().getColor(R.color.grey5));</div><div class="line">            viewShopCheckItemName.setTextColor(getContext().getResources().getColor(R.color.grey5));</div><div class="line">            viewShopCheckItemSelected.setImageResource(R.drawable.view_shop_check_item_unselected);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>是不是很简单，自定义View就是这么简单，当然自定义View不止这么一种方式咯，大家可以自行探索，然后在下方评论区域告诉我，蟹蟹~😄</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/View/自定义View/属性/属性的设置与使用/">https://fengqingxiuyi.github.io/2016/08/14/Android/View/自定义View/属性/属性的设置与使用/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了将某些公用的View抽取成通用的View，我们需要用到自定义View，而且一般情况下，为了方便快捷，我们需要在布局文件中就设置好值，所以我们需要学会运用&lt;code&gt;属性&lt;/code&gt;。接下来就让我们一起进入实战演练一番吧！&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;00A
    
    </summary>
    
      <category term="Android_View_自定义View_属性" scheme="https://fengqingxiuyi.github.io/categories/Android-View-%E8%87%AA%E5%AE%9A%E4%B9%89View-%E5%B1%9E%E6%80%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac+GitHub+Hexo+NexT使用注意点</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/MGHN/Mac+GitHub+Hexo+NexT%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/MGHN/Mac+GitHub+Hexo+NexT使用注意点/</id>
    <published>2016-08-14T13:23:19.000Z</published>
    <updated>2016-08-14T13:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文专门用于记录在使用Hexo博客过程中遇到的一些（奇葩的）问题。</p>
<h1 id="favicon不显示"><a href="#favicon不显示" class="headerlink" title="favicon不显示"></a>favicon不显示</h1><p>当我们在搭建Hexo博客的时候，必然会自定义favicon.ico，显示在网页选项卡的左上角，如图所示：</p>
<p><img src="../../../../../images/MGHN/favicon不显示.png" alt="favicon不显示"></p>
<p>设置favicon也很简单，只需要在<code>主题配置文件</code>（_config.yml）中，进行如下操作即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Put your favicon.ico into `hexo-site/source/` directory.</div><div class="line">favicon: /images/Blog/favicon.ico</div></pre></td></tr></table></figure>
<p>如果favicon的路径设置正确，而且清除了缓存，刷新了页面好几次，但favicon仍然不显示的话，可以<font color="red">等待一段时间，再去刷新</font>，可能就会显示了！</p>
<h1 id="404问题"><a href="#404问题" class="headerlink" title="404问题"></a>404问题</h1><p><font color="00AF60"><strong><em>现象：</em></strong></font>从首页点击某篇文章跳转到了404页面！</p>
<p><font color="00AF60"><strong><em>分析：</em></strong></font>既然出现了404页面，那么必定是路径问题；仔细检查路径发现，原来是以前名为mou.md的文件，现在变成了Mou.md。所以在github上路径中文件夹的名字仍然是mou，而不是Mou。</p>
<p><font color="00AF60"><strong><em>解决：</em></strong></font>本来以为只需要执行以下命令就可以了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</div></pre></td></tr></table></figure>
<p>后来发现自己还是太年轻了，因为hexo clean的只是本地的文件，和github完全没有关系，之后想了半天也毫无头绪，于是另辟蹊径：<font color="red">将Mou.md文件再重命名一下，如Mou2.md，执行上述命令之后，再重命名回Mou.md，再执行上述命令就可以了。</font>😄</p>
<p><font color="00AF60"><strong><em>总结：</em></strong></font>当我在重命名md文件时，切忌不可只是进行了<font color="red">大小写转换</font>，因为像这样把文章部署到github上之后，文件名对应的文件夹是不会发生变化的！！！</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/MGHN/Mac+GitHub+Hexo+NexT使用注意点/">https://fengqingxiuyi.github.io/2016/08/14/MGHN/Mac+GitHub+Hexo+NexT使用注意点/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文专门用于记录在使用Hexo博客过程中遇到的一些（奇葩的）问题。&lt;/p&gt;
&lt;h1 id=&quot;favicon不显示&quot;&gt;&lt;a href=&quot;#favicon不显示&quot; class=&quot;headerlink&quot; title=&quot;favicon不显示&quot;&gt;&lt;/a&gt;favicon不显示&lt;/h
    
    </summary>
    
      <category term="MGHN" scheme="https://fengqingxiuyi.github.io/categories/MGHN/"/>
    
    
  </entry>
  
  <entry>
    <title>ListView-Header</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/Android/View/ListView/ListView-Header/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/Android/View/ListView/ListView-Header/</id>
    <published>2016-08-14T13:19:21.000Z</published>
    <updated>2016-08-14T13:19:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>问：ListView没有数据时怎么显示Header？</p>
<p>答：只要ListView不设置为GONE，然后再setAdapter之前添加了headerView，就会显示Header。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/View/ListView/ListView-Header/">https://fengqingxiuyi.github.io/2016/08/14/Android/View/ListView/ListView-Header/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问：ListView没有数据时怎么显示Header？&lt;/p&gt;
&lt;p&gt;答：只要ListView不设置为GONE，然后再setAdapter之前添加了headerView，就会显示Header。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;版权声明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Android_View_ListView" scheme="https://fengqingxiuyi.github.io/categories/Android-View-ListView/"/>
    
    
  </entry>
  
  <entry>
    <title>TextView占位符</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/TextView%E5%8D%A0%E4%BD%8D%E7%AC%A6/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/TextView占位符/</id>
    <published>2016-08-14T11:15:21.000Z</published>
    <updated>2016-08-14T11:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍如何简单使用TextView占位符。</p>
<p>这个其实很简单，这里我就直接上例子了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">textView.setText(String.format(<span class="string">"%s考了%d分"</span>, <span class="string">"小明"</span>, <span class="number">88</span>);</div></pre></td></tr></table></figure>
<p>想必大家一看就懂了，置于那些想要深入研究，还有哪些占位符的小伙伴们，可以看以下文章：</p>
<p><a href="http://www.cnblogs.com/fsjohnhuang/p/4094777.html" target="_blank" rel="external">Java魔法堂：String.format详解</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/TextView占位符/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/TextView占位符/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文属于工具类文章，可以直接使用；本文主要介绍如何简单使用TextView占位符。&lt;/p&gt;
&lt;p&gt;这个其实很简单，这里我就直接上例子了：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
    
    </summary>
    
      <category term="Android_Wiki" scheme="https://fengqingxiuyi.github.io/categories/Android-Wiki/"/>
    
    
  </entry>
  
  <entry>
    <title>ImageView引用图片上下方空白</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/ImageView%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87%E4%B8%8A%E4%B8%8B%E6%96%B9%E7%A9%BA%E7%99%BD/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/ImageView引用图片上下方空白/</id>
    <published>2016-08-14T10:57:21.000Z</published>
    <updated>2016-08-14T11:15:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍如何解决ImageView引用图片上下方空白的问题。</p>
<h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>疑问：当我们将一张图片引用到我们指定的ImageView容器中，可能由于图片尺寸、比例等原因，无法铺满整个容器（表述不好），导致白边的出现，而且怎么去也去不掉。如下布局代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;ImageView</div><div class="line">    	android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    	android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    	android:src=<span class="string">"@mipmap/share_invite"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;TextView</div><div class="line">    	android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    	android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    	android:text=<span class="string">"测试空白区域文本"</span>/&gt;</div><div class="line">    </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>如上述布局代码，本身没有任何问题，但是因为图片的尺寸，比例等原因，就可能出现图片和文本之间存在空白区域的问题。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>那么怎么解决呢？</p>
<p>其实很简单，我们只需要为ImageView添加以下属性就可以了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:adjustViewBounds=<span class="string">"true"</span></div></pre></td></tr></table></figure>
<h1 id="adjustViewBounds"><a href="#adjustViewBounds" class="headerlink" title="adjustViewBounds"></a>adjustViewBounds</h1><p>我想，你一定会问，这句话代表着什么意思？为什么这样就可以了呢？这里我就给大家简要解释一下：</p>
<p>Google官方对于<code>adjustViewBounds</code>这个属性是这样介绍的：</p>
<p><code>谷歌原文：</code>Set this to true if you want the ImageView to adjust its bounds to preserve the aspect ratio of its drawable.</p>
<p><code>个人翻译（不喜勿喷）：</code>如果你想要ImageView适应边界，同时保持图片宽高比，可以将它设置为true。</p>
<p><code>我们也可以这样理解：</code>将 android:adjustViewBounds 设置为true，即可去除因图片宽高比等原因导致ImageView直接引用图片时上下方存在空白区域的问题。</p>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><font color="red">图片本身上下方无空白区域!!!</font>



<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/ImageView引用图片上下方空白/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/ImageView引用图片上下方空白/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文属于工具类文章，可以直接使用；本文主要介绍如何解决ImageView引用图片上下方空白的问题。&lt;/p&gt;
&lt;h1 id=&quot;疑问&quot;&gt;&lt;a href=&quot;#疑问&quot; class=&quot;headerlink&quot; title=&quot;疑问&quot;&gt;&lt;/a&gt;疑问&lt;/h1&gt;&lt;p&gt;疑问：当我们将一张图片
    
    </summary>
    
      <category term="Android_Wiki" scheme="https://fengqingxiuyi.github.io/categories/Android-Wiki/"/>
    
    
  </entry>
  
  <entry>
    <title>设置Hint字体大小</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/%E8%AE%BE%E7%BD%AEHint%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/设置Hint字体大小/</id>
    <published>2016-08-14T10:47:21.000Z</published>
    <updated>2016-08-14T10:52:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍如何为EditText的Hint设置字体大小。</p>
<p>设置Hint字体大小通常有以下两种方式：</p>
<h1 id="静态设置"><a href="#静态设置" class="headerlink" title="静态设置"></a>静态设置</h1><p>静态设置即在布局文件中设置相关属性。</p>
<p>很简单，我们只要在布局文件中，在EditText标签下设置textSize即可实现，但是有些情况好像设置了也没有用，尚不清楚。</p>
<h1 id="动态设置"><a href="#动态设置" class="headerlink" title="动态设置"></a>动态设置</h1><p>动态设置即在代码中动态实现Hint字体大小，有以下两种情况：</p>
<h2 id="已在布局中设置好Hint值"><a href="#已在布局中设置好Hint值" class="headerlink" title="已在布局中设置好Hint值"></a>已在布局中设置好Hint值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHint</span><span class="params">(EditText editText, <span class="keyword">int</span> fontSize)</span> </span>&#123;</div><div class="line">    CharSequence hint = registerGoodsName.getHint();</div><div class="line">    <span class="comment">// 新建一个可以添加属性的文本对象</span></div><div class="line">    SpannableString ss = <span class="keyword">new</span> SpannableString(hint);</div><div class="line">    <span class="comment">// 新建一个属性对象,设置文字的大小</span></div><div class="line">    AbsoluteSizeSpan ass = <span class="keyword">new</span> AbsoluteSizeSpan(fontSize, <span class="keyword">true</span>);</div><div class="line">    <span class="comment">// 附加属性到文本</span></div><div class="line">    ss.setSpan(ass, <span class="number">0</span>, ss.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">    <span class="comment">// 设置hint</span></div><div class="line">    editText.setHint(<span class="keyword">new</span> SpannedString(ss)); <span class="comment">// 一定要进行转换,否则属性会消失</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="未在布局中设置好Hint值"><a href="#未在布局中设置好Hint值" class="headerlink" title="未在布局中设置好Hint值"></a>未在布局中设置好Hint值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHint</span><span class="params">(EditText editText, String hint, <span class="keyword">int</span> fontSize)</span> </span>&#123;</div><div class="line">    <span class="comment">// 新建一个可以添加属性的文本对象</span></div><div class="line">    SpannableString ss = <span class="keyword">new</span> SpannableString(hint);</div><div class="line">    <span class="comment">// 新建一个属性对象,设置文字的大小</span></div><div class="line">    AbsoluteSizeSpan ass = <span class="keyword">new</span> AbsoluteSizeSpan(fontSize, <span class="keyword">true</span>);</div><div class="line">    <span class="comment">// 附加属性到文本</span></div><div class="line">    ss.setSpan(ass, <span class="number">0</span>, ss.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">    <span class="comment">// 设置hint</span></div><div class="line">    editText.setHint(<span class="keyword">new</span> SpannedString(ss)); <span class="comment">// 一定要进行转换,否则属性会消失</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/设置Hint字体大小/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/设置Hint字体大小/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文属于工具类文章，可以直接使用；本文主要介绍如何为EditText的Hint设置字体大小。&lt;/p&gt;
&lt;p&gt;设置Hint字体大小通常有以下两种方式：&lt;/p&gt;
&lt;h1 id=&quot;静态设置&quot;&gt;&lt;a href=&quot;#静态设置&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="Android_Wiki" scheme="https://fengqingxiuyi.github.io/categories/Android-Wiki/"/>
    
    
  </entry>
  
  <entry>
    <title>接口回调</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/接口回调/</id>
    <published>2016-08-14T10:40:23.000Z</published>
    <updated>2016-08-14T11:31:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍<code>接口回调</code>的相关知识。</p>
<h1 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h1><p>接口的概念：使用 interface 关键字来声明，可以看做是一种特殊的抽象类，可以指定一个类必须做什么，而不是规定它如何去做。</p>
<h1 id="接口的分类"><a href="#接口的分类" class="headerlink" title="接口的分类"></a>接口的分类</h1><p>个人看法：接口分为以下两种：</p>
<p>情况一：狭义的接口：即上述所述(<code>接口的概念</code>)。</p>
<p>情况二：广义的接口：即为了给其他类调用而存在。</p>
<p>接下来依次讲述一番他们的使用方法：</p>
<h2 id="狭义的接口"><a href="#狭义的接口" class="headerlink" title="狭义的接口"></a>狭义的接口</h2><p>情况一：狭义的接口（本文所述为同步回调），即使用 interface 关键字来声明，通常需要经历以下几个步骤：</p>
<p>（1）定义接口 Callback ,包含回调方法 click()，该接口可以重新定义一个，也可以在其他类（如：adapter类）内部，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">click</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（2）在需要设置接口回调的类中“注册接口”，比如类名为Caller，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Callback callback;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback callback)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.callback = callback;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（3）在需要设置接口回调的位置，调用回调方法，例如，为了解耦，需要将adapter中得点击事件回调到外部activity进行操作，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">adapterView.setOnClickListener(v -&gt; &#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</div><div class="line">		callback.click();</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>（4）在activity类中监听回调，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Caller().setCallback(<span class="keyword">new</span> Callback() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="comment">// do something...</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="广义的接口"><a href="#广义的接口" class="headerlink" title="广义的接口"></a>广义的接口</h2><p>情况二：广义的接口：即为了给其他类调用而存在</p>
<p>这种情况非常多，比如说，你自定义了一个View，但是缺少了给这个View设置颜色的方法，这个时候我们就可以定义一个公共的setColor方法，提供给外部调用，这就是一个接口，具体执行步骤如下所示：</p>
<p>（1）在自定义的View中定义如下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.setColor(context.getResources().getColor(color));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（2）在activity中调用该方法即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">activityView.setColor(android.R.color.black);</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此接口回调就讲完了，如果想要深入理解接口回调机制，可以查看以下文章：</p>
<p><a href="http://blog.csdn.net/xiaanming/article/details/8703708" target="_blank" rel="external">一个经典例子让你彻彻底底理解java回调机制</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/接口回调/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/接口回调/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文属于工具类文章，可以直接使用；本文主要介绍&lt;code&gt;接口回调&lt;/code&gt;的相关知识。&lt;/p&gt;
&lt;h1 id=&quot;接口的概念&quot;&gt;&lt;a href=&quot;#接口的概念&quot; class=&quot;headerlink&quot; title=&quot;接口的概念&quot;&gt;&lt;/a&gt;接口的概念&lt;/h1&gt;&lt;p&gt;接口
    
    </summary>
    
      <category term="Android_Wiki" scheme="https://fengqingxiuyi.github.io/categories/Android-Wiki/"/>
    
    
  </entry>
  
  <entry>
    <title>将layout转换为Bitmap</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/%E5%B0%86layout%E8%BD%AC%E6%8D%A2%E4%B8%BABitmap/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/将layout转换为Bitmap/</id>
    <published>2016-08-14T10:23:23.000Z</published>
    <updated>2016-08-14T11:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍如何将layout转换为Bitmap，以及遇到的一些注意点。</p>
<p>（1）编写好要转换为图片的布局文件，必须设置根控件的id。</p>
<p>（2）在要执行该业务的类中使用View.inflate的方式将布局转换为View。</p>
<p>（3）转换为View之后，找到布局文件中的控件，并为其设置数据，如果无需设置可省略。</p>
<p>（4）将View添加到要执行该业务的类的某个控件中，并将这个控件设置为invisible，便于<code>隐藏渲染</code>。<font color="red">注意：此控件的父控件应该为RealtiveLayout，避免出现空白区域，影响用户体验。</font></p>
<p>（5）调用以下方法，将layout转换为Bitmap：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout2Bitmap</span><span class="params">(ViewGroup viewGroup)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> width = viewGroup.getMeasuredWidth();</div><div class="line">    <span class="keyword">int</span> height = viewGroup.getMeasuredHeight();</div><div class="line">    Bitmap b = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);</div><div class="line">    Canvas canvas = <span class="keyword">new</span> Canvas(b);</div><div class="line">    viewGroup.draw(canvas);</div><div class="line">    img.setImageBitmap(b);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（6）<font color="red">注意：执行完第4步后，不能立刻执行第5步，因为此时页面可能还没有渲染完毕，直接执行第5步会导致提示width和height必须大于0的异常发生，需要根据业务需要，在合适的地方执行。</font></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/将layout转换为Bitmap/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/将layout转换为Bitmap/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文属于工具类文章，可以直接使用；本文主要介绍如何将layout转换为Bitmap，以及遇到的一些注意点。&lt;/p&gt;
&lt;p&gt;（1）编写好要转换为图片的布局文件，必须设置根控件的id。&lt;/p&gt;
&lt;p&gt;（2）在要执行该业务的类中使用View.inflate的方式将布局转换为V
    
    </summary>
    
      <category term="Android_Wiki" scheme="https://fengqingxiuyi.github.io/categories/Android-Wiki/"/>
    
    
  </entry>
  
  <entry>
    <title>获取指定包名下的Activity</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E5%8C%85%E5%90%8D%E4%B8%8B%E7%9A%84Activity/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/获取指定包名下的Activity/</id>
    <published>2016-08-14T10:11:23.000Z</published>
    <updated>2016-08-14T10:23:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍如何获取指定包名下的所有Activity，并实现Activity的跳转。</p>
<h1 id="Activity类文件"><a href="#Activity类文件" class="headerlink" title="Activity类文件"></a>Activity类文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getActivities</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    PackageInfo packageInfo;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        packageInfo = context.getPackageManager().getPackageInfo(</div><div class="line">                context.getPackageName(), PackageManager.GET_ACTIVITIES);</div><div class="line">        List&lt;String&gt; activityNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        List&lt;ActivityInfo&gt; activityInfos = Arrays.asList(packageInfo.activities);</div><div class="line">        <span class="comment">// 将activityInfos中的name添加到集合activityNames中</span></div><div class="line">        <span class="keyword">for</span> (ActivityInfo activityInfo : activityInfos) &#123;</div><div class="line">        activityNames.add(activityInfo.name.substring(activityInfo.name.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 显示ListView</span></div><div class="line">        <span class="keyword">if</span> (activityNames != <span class="keyword">null</span>) &#123;</div><div class="line">            testListview.setAdapter(<span class="keyword">new</span> ArrayAdapter&lt;&gt;(context,</div><div class="line">                    android.R.layout.simple_list_item_1, activityNames));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 跳转到指定的Activity页面</span></div><div class="line">        testListview.setOnItemClickListener((parent, view, position, id) -&gt; &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                activity.startActivity(<span class="keyword">new</span> Intent(activity, Class.forName(activityInfos.get(position).name)));</div><div class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;RelativeLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:background=<span class="string">"@color/black"</span>&gt;</div><div class="line"></div><div class="line">    &lt;ListView</div><div class="line">        android:id=<span class="string">"@+id/test_listview"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:divider=<span class="string">"@color/white"</span></div><div class="line">        android:dividerHeight=<span class="string">"1dp"</span> /&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/获取指定包名下的Activity/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/获取指定包名下的Activity/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文属于工具类文章，可以直接使用；本文主要介绍如何获取指定包名下的所有Activity，并实现Activity的跳转。&lt;/p&gt;
&lt;h1 id=&quot;Activity类文件&quot;&gt;&lt;a href=&quot;#Activity类文件&quot; class=&quot;headerlink&quot; title=&quot;A
    
    </summary>
    
      <category term="Android_Wiki" scheme="https://fengqingxiuyi.github.io/categories/Android-Wiki/"/>
    
    
  </entry>
  
  <entry>
    <title>Android模板制作</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/13/Android/%E6%A8%A1%E6%9D%BF/Android%E6%A8%A1%E6%9D%BF%E5%88%B6%E4%BD%9C/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/13/Android/模板/Android模板制作/</id>
    <published>2016-08-13T05:01:25.000Z</published>
    <updated>2016-08-13T10:10:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文专门介绍和<code>模板</code>相关的知识，那么问题来了：</p>
<ol>
<li>模板是什么</li>
<li>模板使用位置</li>
<li>模板如何创建(包含模板存放位置)</li>
<li>模板如何使用</li>
</ol>
<p>接下来，我就按照以上顺序为大家解读看起来高大上的<code>模板</code>。</p>
<h1 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h1><font color="red">本文所有模板路径均为Mac下的路径，Windows用户也可以查看路径中的相关信息，进而快速定位。</font>

<h1 id="模板是什么"><a href="#模板是什么" class="headerlink" title="模板是什么"></a>模板是什么</h1><p>个人理解：模板即为了帮助人们简化某些固定而繁琐的操作而制作的工具，用于快速实现这些固定而繁琐的操作。</p>
<h1 id="模板使用位置"><a href="#模板使用位置" class="headerlink" title="模板使用位置"></a>模板使用位置</h1><p>当我们在使用AndroidStudio进行开发的时候，将鼠标选中工程项目，然后右击可以在New选项下面看到很多AndroidStudio提供给我们的模板类别，例如：Activity、AIDL等。具体可看下图：</p>
<p><img src="../../../../../../images/Android/模板/工程右击-New.png" alt="工程右击-New"></p>
<p>细心的你会发现在这些模板的上面有一个选项，叫：Edit File Templates…，如下图所示：</p>
<p><img src="../../../../../../images/Android/模板/Edit-File-Templates.png" alt="Edit-File-Templates"></p>
<p>点击这个选项，会进入自定义模板页面，其中内置的变量在页面下方都有解释，是不是很方便，但是它有一个致命的缺点：一次只能创建一个java文件。具体可看下图：</p>
<p><img src="../../../../../../images/Android/模板/Edit-File-Templates-in.png" alt="Edit-File-Templates-in"></p>
<p>因为觉得这个很简单，所以我就不做过多阐述了，接下来我就仔细阐述一下，如何一次创建多个java文件，而且还可以选择是否包含xml文件。</p>
<h1 id="模板如何创建-包含模板存放位置"><a href="#模板如何创建-包含模板存放位置" class="headerlink" title="模板如何创建(包含模板存放位置)"></a>模板如何创建(包含模板存放位置)</h1><h2 id="警告-1"><a href="#警告-1" class="headerlink" title="警告"></a>警告</h2><p>如果直接复制相关代码的话，请注意其中的注释，可能会带来一些问题，如果出现问题，可以把#开头的注释去除，再尝试！！！</p>
<p>如果不懂上面这段话的意思的话，可以先行跳过。</p>
<h2 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h2><p>AndroidStudio的模板是使用<code>FreeMarker</code>模板引擎制作的，有兴趣的可以了解一下。</p>
<p>本文参考：<a href="http://www.i-programmer.info/professional-programmer/resources-and-tools/6845-android-adt-template-format-document.html" target="_blank" rel="external">http://www.i-programmer.info/professional-programmer/resources-and-tools/6845-android-adt-template-format-document.html</a></p>
<h2 id="案例-amp-解答"><a href="#案例-amp-解答" class="headerlink" title="案例&amp;解答"></a>案例&amp;解答</h2><font color="00AF60"><strong><em>案例：</em></strong></font>

<p>由于现在的项目使用的是<code>类MVP架构</code>，所以基本上每个模块都需要entity、request、activity、presenter、viewmodel这五个类，无论是登录注册模块，还是商品详情页、首页、收益页面等模块，都无法摆脱这几个类，因此准备为这个<code>类MVP架构</code>制作一个通用模板。</p>
<font color="00AF60"><strong><em>解答：</em></strong></font>

<p>制作好模板之后，我想说，其实很简单，只是把会变化的部分用<code>${...}</code>替换罢了，不过在这里我们还是老老实实的从头开始吧！</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="模板存放位置"><a href="#模板存放位置" class="headerlink" title="模板存放位置"></a>模板存放位置</h3><p>首页我们进入AndroidStudio安装目录下的<code>/plugins/android/lib/templates</code>文件夹，这就是AndroidStudio模板文件的目录了，到这里你可能还有所迷惑，因为你没有发现像我刚开始所说的Activity、AIDL等模板文件，没关系，你再进入<code>activities</code>文件夹下面就可以看到Activity的相关模板了，进入<code>other</code>文件夹就可以看到AIDL的相关模板了。</p>
<h3 id="模板副本"><a href="#模板副本" class="headerlink" title="模板副本"></a>模板副本</h3><p>这里我们选择<code>activities</code>文件夹，然后你是不是觉得手足无措，不知道如何下手？其实一开始我也不知道怎么做，但是没关系，AndroidStudio不是已经提供给我们这么多模板了么，为了简单起见，我们在这里拷贝一份<code>EmptyActivity</code>，并将其重命名为<code>MVPActivity</code>，<font color="red"><strong><em>放在当前目录下</em></strong></font>。</p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>打开文件夹后，我们看到以下目录结构：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">EmptyActivity</div><div class="line">  |----globals.xml.ftl <span class="comment"># 全局变量文件</span></div><div class="line">  |----recipe.xml.ftl  <span class="comment"># 配置要引用的模板路径以及生成文件的路径</span></div><div class="line">  |----root</div><div class="line">    |----src</div><div class="line">      |----app_package</div><div class="line">        |----SimpleActivity.java.ftl <span class="comment"># 模板文件</span></div><div class="line">  |----template_blank_activity.png   <span class="comment"># 创建模板时界面左边的预览图</span></div><div class="line">  |----template.xml <span class="comment"># 模板的配置信息以及要输入的参数</span></div></pre></td></tr></table></figure>
<p>接下我们可以根据目录结构顺序（建议按以下顺序看），打开看一下，这里大致介绍一下：</p>
<h4 id="globals-xml-ftl"><a href="#globals-xml-ftl" class="headerlink" title="globals.xml.ftl"></a>globals.xml.ftl</h4><p><code>globals.xml.ftl</code>中都是类似</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;global id=<span class="string">"hasNoActionBar"</span> <span class="built_in">type</span>=<span class="string">"boolean"</span> value=<span class="string">"false"</span> /&gt;</div></pre></td></tr></table></figure>
<p>这样的语句，显然它的意思就是我定义了一个全局变量hasNoActionBar，它的类型是boolean，默认值为false。</p>
<h4 id="recipe-xml-ftl"><a href="#recipe-xml-ftl" class="headerlink" title="recipe.xml.ftl"></a>recipe.xml.ftl</h4><p><code>recipe.xml.ftl</code>稍微有些复杂，这里讲解以下instantiate、open等几个重要参数：</p>
<p><font color="00AF60"><strong><em>copy</em></strong></font>：复制–将from中的文件复制到to路径下，但并不会将ftl中得变量进行转换，即如果源文件中的类名为${activityClass}，复制过后类名还是${activityClass}转换为我们需要的类名。</p>
<p><font color="00AF60"><strong><em>merge</em></strong></font>：合并–将from中的文件合并到to路径下的文件中。</p>
<p><font color="00AF60"><strong><em>instantiate</em></strong></font>：和copy类似，也是将from中的文件复制到to路径下，但是它会将${activityClass}转换为我们需要的类名。其实有这样一个过程：<font color="red">ftl-&gt;freemarker process -&gt; java</font>。</p>
<p><font color="00AF60"><strong><em>open</em></strong></font>：代码生成后，打开file中指定的文件。</p>
<h4 id="SimpleActivity-java-ftl"><a href="#SimpleActivity-java-ftl" class="headerlink" title="SimpleActivity.java.ftl"></a>SimpleActivity.java.ftl</h4><p>打开<code>SimpleActivity.java.ftl</code>文件，会发现和我们创建Activity类后及其类似，只是把包名、类名、布局名等用<code>${...}</code>替换了，其实<code>${...}</code>中得内容都是id名，这里不做过多阐述，我们继续往下看。</p>
<h4 id="template-xml"><a href="#template-xml" class="headerlink" title="template.xml"></a>template.xml</h4><p><code>template.xml</code>：打开以后你会发现这个文件好长，看来是重头戏了！！！是的，我们来详细解读一下：</p>
<p>一眼看去是不是和AndroidManifest.xml中得Application节点中的内容结构很相似（包括Application节点）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;template</div><div class="line">    format=<span class="string">"5"</span>   <span class="comment"># The template format version that this template adheres to. Should be 3</span></div><div class="line">    revision=<span class="string">"5"</span> <span class="comment"># 可选，当你想更新模板的时候可以以整数的形式增加此模板的版本号	</span></div><div class="line">    name=<span class="string">"Empty Activity"</span> <span class="comment"># 模板显示的名字</span></div><div class="line">    minApi=<span class="string">"7"</span>   <span class="comment"># 可选，模板所需的最小API值，IDE将确保在实例化模板之前，目标工程的minSdkVersion不低于这个值</span></div><div class="line">    minBuildApi=<span class="string">"14"</span>      <span class="comment"># 可选，模板所需的最小编译API，值为API级别，IDE将确保在实例化模板之前，项目工程的API等级大于或等于这个值</span></div><div class="line">    description=<span class="string">"Creates a new empty activity"</span>&gt; <span class="comment"># 模板的描述信息</span></div><div class="line"></div><div class="line">    &lt;category value=<span class="string">"Activity"</span> /&gt; <span class="comment"># 模板类型，用于在菜单栏File-New下显示，如Activity、AIDL等</span></div><div class="line">    &lt;formfactor value=<span class="string">"Mobile"</span> /&gt; <span class="comment"># 如同我们在创建module时所显示的类型，如：Wear、TV等。</span></div><div class="line"></div><div class="line">    &lt;parameter</div><div class="line">        id=<span class="string">"activityClass"</span>   <span class="comment"># 唯一标示，在ftl文件中可以用$&#123;activityClass&#125;获取参数值</span></div><div class="line">        name=<span class="string">"Activity Name"</span> <span class="comment"># 创建模板时在文本框左边显示的该文本框名称</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span>        <span class="comment"># 这个参数的类型，如：string, boolean, enum等</span></div><div class="line">        constraints=<span class="string">"class|unique|nonempty"</span>       <span class="comment"># 可选，这个参数的约束类型，可用|符号联合使用，constraints值类型大全请看4.5</span></div><div class="line">        suggest=<span class="string">"<span class="variable">$&#123;layoutToActivity(layoutName)&#125;</span>"</span> <span class="comment"># 可选，自动提示，比如输入layout的值可以自动生成activityClass</span></div><div class="line">        default=<span class="string">"MainActivity"</span> <span class="comment"># 可选，参数默认值，创建模板时在文本框中显示，相当于hint</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"The name of the activity class to create"</span> /&gt; <span class="comment"># 创建模板时，选中文本框后，在底部显示的关于该文本框的帮助信息</span></div><div class="line"></div><div class="line">    &lt;!-- 128x128 thumbnails relative to template.xml --&gt;</div><div class="line">    &lt;thumbs&gt;</div><div class="line">        &lt;!-- default thumbnail is required --&gt;</div><div class="line">        &lt;thumb&gt;template_blank_activity.png&lt;/thumb&gt; <span class="comment"># 可选，用于创建模板时，在左边显示名为template_blank_activity的预览图片</span></div><div class="line">    &lt;/thumbs&gt;</div><div class="line"></div><div class="line">    &lt;globals file=<span class="string">"globals.xml.ftl"</span> /&gt; <span class="comment"># 可选，将工程定义的全局变量包含进来</span></div><div class="line">    &lt;execute file=<span class="string">"recipe.xml.ftl"</span> /&gt;  <span class="comment"># 开始执行模板渲染</span></div><div class="line"></div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<h4 id="constraints值类型大全"><a href="#constraints值类型大全" class="headerlink" title="constraints值类型大全"></a>constraints值类型大全</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Valid constraint types are:</div><div class="line">	nonempty — the value must not be empty</div><div class="line">	apilevel — the value should represent a numeric API level</div><div class="line">	package — the value should represent a valid Java package name</div><div class="line">	class — the value should represent a valid Java class name</div><div class="line">	activity — the value should represent a fully-qualified activity class name</div><div class="line">	layout — the value should represent a valid layout resource name</div><div class="line">	drawable — the value should represent a valid drawable resource name</div><div class="line">	string — the value should represent a valid string resource name</div><div class="line">	id — the value should represent a valid id resource name</div><div class="line">	unique — the value must be unique; this constraint only makes sense when other constraints are specified, such as layout, <span class="built_in">which</span> would mean that the value should not represent an existing layout resource name</div><div class="line">	exists — the value must already exist; this constraint only makes sense when other constraints are specified, such as layout, <span class="built_in">which</span> would mean that the value should represent an existing layout resource name</div></pre></td></tr></table></figure>
<h3 id="template-xml制作"><a href="#template-xml制作" class="headerlink" title="template.xml制作"></a>template.xml制作</h3><p>到这里相信大家对template.xml文件有了一定的了解了，好了，让我们来大干一场吧！</p>
<h4 id="MVP版template-xml"><a href="#MVP版template-xml" class="headerlink" title="MVP版template.xml"></a>MVP版template.xml</h4><p>既然这里详细的讲解了template.xml文件，我们先从template.xml文件入手吧，这里我就不一个个细说了，直接上完整代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;template</div><div class="line">    format=<span class="string">"2"</span>          <span class="comment"># 可修改，此处已修改</span></div><div class="line">    revision=<span class="string">"2"</span>        <span class="comment"># 可修改，此处已修改</span></div><div class="line">    name=<span class="string">"MVP Activity"</span> <span class="comment"># 需要修改</span></div><div class="line">    minApi=<span class="string">"7"</span>          <span class="comment"># 可修改</span></div><div class="line">    minBuildApi=<span class="string">"14"</span>    <span class="comment"># 可修改</span></div><div class="line">    description=<span class="string">"Creates a new MVP activity"</span>&gt; <span class="comment"># 需要修改</span></div><div class="line"></div><div class="line">    &lt;category value=<span class="string">"AAShowJoyMVP"</span> /&gt; <span class="comment"># 可修改，此处已修改</span></div><div class="line">    &lt;formfactor value=<span class="string">"Mobile"</span> /&gt;     <span class="comment"># 一般不修改</span></div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># Activity类</span></div><div class="line">        id=<span class="string">"activityClass"</span>   <span class="comment"># 可修改</span></div><div class="line">        name=<span class="string">"Activity Name"</span> <span class="comment"># 可修改</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span>        <span class="comment"># 一般不修改</span></div><div class="line">        constraints=<span class="string">"class|unique|nonempty"</span> <span class="comment"># 一般不修改</span></div><div class="line">        default=<span class="string">"TestActivity"</span> <span class="comment"># 可修改，此处已修改</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"The name of the activity class to create"</span> /&gt; <span class="comment"># 可修改，此处未修改</span></div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># Activity类的布局文件</span></div><div class="line">        id=<span class="string">"layoutName"</span></div><div class="line">        name=<span class="string">"Layout Name"</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span></div><div class="line">        constraints=<span class="string">"layout|unique|nonempty"</span></div><div class="line">        suggest=<span class="string">"<span class="variable">$&#123;classToResource(activityClass)&#125;</span>_activity"</span> <span class="comment"># 可修改，此处已修改，若不明白可以跳过，之后会有详解！！！</span></div><div class="line">        default=<span class="string">"test_activity"</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"The name of the layout to create for the activity"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># 是否作为启动Activity</span></div><div class="line">        id=<span class="string">"isLauncher"</span></div><div class="line">        name=<span class="string">"Launcher Activity"</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"boolean"</span></div><div class="line">        default=<span class="string">"false"</span> <span class="comment"># 默认非启动Activity</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"If true, this activity will have a CATEGORY_LAUNCHER intent filter, making it visible in the launcher"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># 包名</span></div><div class="line">        id=<span class="string">"packageName"</span></div><div class="line">        name=<span class="string">"Package name"</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span></div><div class="line">        constraints=<span class="string">"package"</span></div><div class="line">        default=<span class="string">"com.showjoy.shop"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># viewModel类</span></div><div class="line">        id=<span class="string">"viewModelClass"</span></div><div class="line">        name=<span class="string">"View Model Name"</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span></div><div class="line">        constraints=<span class="string">"class|nonempty|unique"</span></div><div class="line">        default=<span class="string">"TestViewModel"</span></div><div class="line">        suggest=<span class="string">"<span class="variable">$&#123;underscoreToCamelCase(classToResource(activityClass))&#125;</span>ViewModel"</span> <span class="comment"># 此类同布局文件，之后会有详解！！！</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"The name of the ViewModel to create"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># presenter类</span></div><div class="line">        id=<span class="string">"presenterClass"</span></div><div class="line">        name=<span class="string">"Presenter Name"</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span></div><div class="line">        constraints=<span class="string">"class|nonempty|unique"</span></div><div class="line">        default=<span class="string">"TestPresenter"</span></div><div class="line">        suggest=<span class="string">"<span class="variable">$&#123;underscoreToCamelCase(classToResource(activityClass))&#125;</span>Presenter"</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"The name of the Presenter to create"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># request类</span></div><div class="line">        id=<span class="string">"requestClass"</span></div><div class="line">        name=<span class="string">"Request Name"</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span></div><div class="line">        constraints=<span class="string">"class|nonempty|unique"</span></div><div class="line">        default=<span class="string">"TestRequest"</span></div><div class="line">        suggest=<span class="string">"<span class="variable">$&#123;underscoreToCamelCase(classToResource(activityClass))&#125;</span>Request"</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"The name of the Request to create"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># entity类</span></div><div class="line">        id=<span class="string">"entityClass"</span></div><div class="line">        name=<span class="string">"Entity Name"</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span></div><div class="line">        constraints=<span class="string">"class|nonempty|unique"</span></div><div class="line">        default=<span class="string">"TestEntity"</span></div><div class="line">        suggest=<span class="string">"<span class="variable">$&#123;underscoreToCamelCase(classToResource(activityClass))&#125;</span>Entity"</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"The name of the Entity to create"</span> /&gt;</div><div class="line">       </div><div class="line"></div><div class="line">    &lt;globals file=<span class="string">"globals.xml.ftl"</span> /&gt; <span class="comment"># 一般不修改</span></div><div class="line">    &lt;execute file=<span class="string">"recipe.xml.ftl"</span> /&gt;  <span class="comment"># 一般不修改</span></div><div class="line"></div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p>template.xml文件的使用到这里就结束了，还是比较简单的，以下阐述之前所留下的两个问题：</p>
<p>（1）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">suggest=<span class="string">"<span class="variable">$&#123;classToResource(activityClass)&#125;</span>_activity"</span></div></pre></td></tr></table></figure>
<p>classToResource(activityClass)：这句话的意思是，当我们在创建该模板后，在activityClass对应的文本框中输入某个值，比如：test，它会直接在layoutName对应的文本框中显示，即：test，所以以完整的语句（1）而言，此时layoutName对应的文本框中显示的应该是test_activity。</p>
<p>（2）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">suggest=<span class="string">"<span class="variable">$&#123;underscoreToCamelCase(classToResource(activityClass))&#125;</span>ViewModel"</span></div></pre></td></tr></table></figure>
<p>classToResource(activityClass)在（1）中描述的已经很清楚了，即为test，那么underscoreToCamelCase又是什么意思呢？其实就是将test转换为驼峰命名的方法，即Test。所以以完整的语句（2）而言，此时viewModelClass对应的文本框中显示的应该是TestViewModel。</p>
<p>如果你觉得文字描述过于繁琐，仍然看不懂的话，可以查看以下gif：</p>
<p><img src="../../../../../../images/Android/模板/AndroidStudio自带模板列表-suggest.gif" alt="AndroidStudio自带模板列表-suggest"></p>
<h4 id="MVP版目录结构"><a href="#MVP版目录结构" class="headerlink" title="MVP版目录结构"></a>MVP版目录结构</h4><p>接下来我们就可以把要制作成模板的类，拷贝到相应的文件夹中，此时的目录结构为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">MVPActivity</div><div class="line">  |----globals.xml.filter</div><div class="line">  |----recipe.xml.ftl</div><div class="line">  |----activity_layout_recipe.xml.filter <span class="comment"># 此文件与recipe类似，只是因为解耦思想，所以将class和layout分别引入</span></div><div class="line">  |----root</div><div class="line">    |----src</div><div class="line">      |----app_package</div><div class="line">        |----classes</div><div class="line">          |----Activity.java.ftl</div><div class="line">          |----Entity.java.ftl</div><div class="line">          |----Presenter.java.ftl</div><div class="line">          |----Request.java.ftl</div><div class="line">          |----ViewModel.java.ftl</div><div class="line">        |----layout</div><div class="line">          |----activity_layout.xml.ftl</div><div class="line">  |----template.xml</div></pre></td></tr></table></figure>
<h4 id="Request-java-ftl"><a href="#Request-java-ftl" class="headerlink" title="Request.java.ftl"></a>Request.java.ftl</h4><p>为了方便而又全面的进行讲解，此处我们以Request.java.ftl文件为例，这里我就直接上全部代码了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package <span class="variable">$&#123;packageName&#125;</span>.request;                <span class="comment"># $&#123;packageName&#125;对应的是template.xml文件中id为packageName的参数设置的字符串，如果该类不在包名根目录下，可以在后面添加相应的module名。</span></div><div class="line"></div><div class="line">import android.support.annotation.NonNull;     <span class="comment"># 如果包名中未涉及到在创建模板时设置的包名和类名，则无需修改</span></div><div class="line">import <span class="variable">$&#123;packageName&#125;</span>.entities.<span class="variable">$&#123;entityClass&#125;</span>; <span class="comment"># 如果包名中涉及到在创建模板时设置的包名和类名，则只需相对应的进行修改即可</span></div><div class="line"></div><div class="line">/**</div><div class="line"> * 将以下涉及到在创建模板时设置的包名和类名，进行如下相对应的替换即可，布局文件也是这样替换的！！！</div><div class="line"> */</div><div class="line">public class <span class="variable">$&#123;requestClass&#125;</span> extends SHGetRequest&lt;<span class="variable">$&#123;entityClass&#125;</span>&gt; &#123;</div><div class="line">    @Override</div><div class="line">    protected Class&lt;<span class="variable">$&#123;entityClass&#125;</span>&gt; <span class="function"><span class="title">getDataClass</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> <span class="variable">$&#123;entityClass&#125;</span>.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected TypeReference&lt;<span class="variable">$&#123;entityClass&#125;</span>&gt; <span class="function"><span class="title">getDataTypeReference</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @NonNull</div><div class="line">    @Override</div><div class="line">    protected String <span class="function"><span class="title">getRequestUrl</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h4><p>接下来我们来看一下布局文件的替换：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;RelativeLayout</div><div class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    tools:context=<span class="string">"<span class="variable">$&#123;relativePackage&#125;</span>.<span class="variable">$&#123;activityClass&#125;</span>"</span>&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<p>虽然说tools命名空间一般都是可有可无的，这里为了全面，也讲述以下，你应该发现了一个从未见过的id：relativePackage，不用迷惑，估计你也想到了，其实我就是在globals.xml.ftl文件中定义了一个全局变量而已，它的值默认为包名，具体代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;global id=<span class="string">"relativePackage"</span> <span class="built_in">type</span>=<span class="string">"string"</span> value=<span class="string">"<span class="variable">$&#123;packageName&#125;</span>"</span>/&gt;</div></pre></td></tr></table></figure>
<h4 id="globals-xml-ftl-1"><a href="#globals-xml-ftl-1" class="headerlink" title="globals.xml.ftl"></a>globals.xml.ftl</h4><p>既然说到了globals.xml.ftl文件，我们就去看看好了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;globals&gt;</div><div class="line">    &lt;global id=<span class="string">"hasNoActionBar"</span> <span class="built_in">type</span>=<span class="string">"boolean"</span> value=<span class="string">"false"</span> /&gt;</div><div class="line">    &lt;global id=<span class="string">"parentActivityClass"</span> value=<span class="string">""</span> /&gt;</div><div class="line">    &lt;global id=<span class="string">"simpleLayoutName"</span> value=<span class="string">"<span class="variable">$&#123;layoutName&#125;</span>"</span> /&gt;</div><div class="line">    &lt;global id=<span class="string">"excludeMenu"</span> <span class="built_in">type</span>=<span class="string">"boolean"</span> value=<span class="string">"true"</span> /&gt;</div><div class="line">    &lt;global id=<span class="string">"generateActivityTitle"</span> <span class="built_in">type</span>=<span class="string">"boolean"</span> value=<span class="string">"false"</span> /&gt;</div><div class="line">    &lt;global id=<span class="string">"relativePackage"</span> <span class="built_in">type</span>=<span class="string">"string"</span> value=<span class="string">"<span class="variable">$&#123;packageName&#125;</span>"</span>/&gt;</div><div class="line">    &lt;<span class="comment">#include "../common/common_globals.xml.ftl" /&gt;</span></div><div class="line">&lt;/globals&gt;</div></pre></td></tr></table></figure>
<p>其实并没有什么，global代表的都是全局变量，#include代表的是引用的文件，相当于继承。</p>
<h4 id="recipe-xml-ftl-1"><a href="#recipe-xml-ftl-1" class="headerlink" title="recipe.xml.ftl"></a>recipe.xml.ftl</h4><p>然后就只有recipe.xml.ftl文件了，也快结束了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;recipe&gt;</div><div class="line">    &lt;<span class="comment">#include "../common/recipe_manifest.xml.ftl" /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment"># 引入同级目录中的activity_layout_recipe.xml.ftl文件，其内容会在下一节中讲述</span></div><div class="line">    &lt;<span class="comment">#include "activity_layout_recipe.xml.ftl" /&gt;	</span></div><div class="line"></div><div class="line">    &lt;instantiate from=<span class="string">"src/app_package/classes/Activity.java.ftl"</span></div><div class="line">      to=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(srcOut)&#125;</span>/<span class="variable">$&#123;activityClass&#125;</span>.java"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;instantiate from=<span class="string">"src/app_package/classes/ViewModel.java.ftl"</span></div><div class="line">      to=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(srcOut)&#125;</span>/<span class="variable">$&#123;viewModelClass&#125;</span>.java"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;instantiate from=<span class="string">"src/app_package/classes/Entity.java.ftl"</span></div><div class="line">      to=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(srcOut)&#125;</span>/entities/<span class="variable">$&#123;entityClass&#125;</span>.java"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;instantiate from=<span class="string">"src/app_package/classes/Presenter.java.ftl"</span></div><div class="line">      to=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(srcOut)&#125;</span>/<span class="variable">$&#123;presenterClass&#125;</span>.java"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;instantiate from=<span class="string">"src/app_package/classes/Request.java.ftl"</span></div><div class="line">      to=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(srcOut)&#125;</span>/request/<span class="variable">$&#123;requestClass&#125;</span>.java"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;open file=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(srcOut)&#125;</span>/<span class="variable">$&#123;viewModelClass&#125;</span>.java"</span> /&gt;</div><div class="line">    </div><div class="line">    &lt;open file=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(resOut)&#125;</span>/layout/<span class="variable">$&#123;layoutName&#125;</span>.xml"</span> /&gt;</div><div class="line">    </div><div class="line">&lt;/recipe&gt;</div></pre></td></tr></table></figure>
<p><code>instantiate</code>的作用在上面已经讲的很清楚了，简单来说就是将ftl文件转换为java文件，而<code>open</code>指的是在创建模板成功后，打开指定的文件，很简单吧，这里只有一个注意点：<font color="red"><strong><em>路径</em></strong></font> 不要写错了！！！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$&#123;escapeXmlAttribute(srcOut)&#125;</span>代表的即为包名所代表的路径</div><div class="line"><span class="variable">$&#123;escapeXmlAttribute(resOut)&#125;</span>代表的是res根目录</div></pre></td></tr></table></figure>
<h4 id="activity-layout-recipe-xml-ftl"><a href="#activity-layout-recipe-xml-ftl" class="headerlink" title="activity_layout_recipe.xml.ftl"></a>activity_layout_recipe.xml.ftl</h4><p>之前因为解耦思想，所以把布局文件的recipe文件单独处理了，即为activity_layout_recipe.xml.ftl，打开文件，其实很简单：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;recipe&gt;</div><div class="line"></div><div class="line">    &lt;instantiate from=<span class="string">"src/app_package/layout/activity_layout.xml.ftl"</span></div><div class="line">                 to=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(resOut)&#125;</span>/layout/<span class="variable">$&#123;layoutName&#125;</span>.xml"</span> /&gt;</div><div class="line"></div><div class="line">&lt;/recipe&gt;</div></pre></td></tr></table></figure>
<p>这里就不做阐述了，大家看上一节就明白了。</p>
<h1 id="模板如何使用"><a href="#模板如何使用" class="headerlink" title="模板如何使用"></a>模板如何使用</h1><p>模板创建好之后，我们首先需要的是验证是否能够正确创建出我们需要的部分，且没有错误发生，这个过程其实就是模板使用的过程，具体可以参考<code>第2章模板使用位置</code>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，Android模板制作已经全部完成了，本文篇幅还是比较长的，如果有什么疑问可以评论，我会尽力解决每一个问题的，谢谢，码字好累额！！！</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/13/Android/模板/Android模板制作/">https://fengqingxiuyi.github.io/2016/08/13/Android/模板/Android模板制作/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文专门介绍和&lt;code&gt;模板&lt;/code&gt;相关的知识，那么问题来了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模板是什么&lt;/li&gt;
&lt;li&gt;模板使用位置&lt;/li&gt;
&lt;li&gt;模板如何创建(包含模板存放位置)&lt;/li&gt;
&lt;li&gt;模板如何使用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来，我就按照以上
    
    </summary>
    
      <category term="Android_模板" scheme="https://fengqingxiuyi.github.io/categories/Android-%E6%A8%A1%E6%9D%BF/"/>
    
    
  </entry>
  
</feed>
