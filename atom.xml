<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风清袖一的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fengqingxiuyi.github.io/"/>
  <updated>2016-08-22T03:30:02.000Z</updated>
  <id>https://fengqingxiuyi.github.io/</id>
  
  <author>
    <name>青峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Lint工作原理剖析</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/Android%20Lint%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/Android Lint工作原理剖析/</id>
    <published>2016-08-22T03:10:23.000Z</published>
    <updated>2016-08-22T03:30:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文转载自：<a href="http://www.carrotsight.com/2016/06/21/Android%20Lint工作原理剖析.html" target="_blank" rel="external">Android Lint工作原理剖析</a></p>
<p></p><h2 id="官方对自定义Lint的支持">官方对自定义Lint的支持</h2><p>Android Lint是Android SDK提供的一项静态代码分析工具，对于提高代码质量具有重要作用。到目前为止，Android SDK自带的Lint检查项目达到了253项，我们在开发过程中经常见到的提示信息比如“Id被重复定义”“HandlerLeak风险”其实都是由Lint检查实现的。</p> <p>Android Studio 2.0 Stable版本已经于2016年4月7日正式发布。除了Instant Run让人眼前一亮，更让人惊喜的是，官方已经悄然把自定义Lint的检查与IDE整合起来了。在此之前，自定义Lint规则只能通过在终端中执行gradle任务来运行，然后生成报告文件。<br>Android Studio 2.0中整合自定义Lint检查的效果如图：<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-4-13/85143697.jpg" alt=""></p> <p>图中红线提示的错误是我自定义的Lint规则检查的结果，大意是Activity使用的布局文件应该以“activity_”为前缀进行命名。 </p> <p>关于Lint的一些基本知识，以及自定义Lint如何实现，可以参考我之前的文章：<br><a href="https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/%E6%B5%85%E8%B0%88Android%E8%87%AA%E5%AE%9A%E4%B9%89Lint%E8%A7%84%E5%88%99%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89/">浅谈Android自定义Lint规则的实现 （一）</a><br><a href="https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/%E6%B5%85%E8%B0%88Android%E8%87%AA%E5%AE%9A%E4%B9%89Lint%E8%A7%84%E5%88%99%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89/">浅谈Android自定义Lint规则的实现 （二）</a></p> <p>从Android Studio的“偏好”设置窗口中，用户可以设置IDE整合的Lint检查功能的细节，如图：<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-4-13/26772828.jpg" alt=""></p> <p>虽然这个设置选项在旧版的Android Studio中也能看到，但实际上在旧版中是不起作用的。 </p> <p>除了在Editor中能够以红色下划线标注自定义检查项目外，使用Android Studio的 “Analyze” –&gt; “Inspect Code”现在也会检查自定义Lint规则中定义的项目了。Android Studio 2.0的这一功能整合真是太棒了，大大提高了自定义Lint的实用性。</p> <h2 id="Lint工作流程探究">Lint工作流程探究</h2><p>介绍完Android Studio 2.0的新特性，现在进入正题，我们来探究一下Lint检查的工作原理，包括系统默认的Lint检查项目以及用户自定义的Lint检查项目。<br>本文以终端运行gradle的lint任务为例进行分析。其中自定义lint的使用方式是把自定义lint以aar的形式提供给app进行引用，具体实现方式可以参考<a href="https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/%E6%B5%85%E8%B0%88Android%E8%87%AA%E5%AE%9A%E4%B9%89Lint%E8%A7%84%E5%88%99%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89/">浅谈Android自定义Lint规则的实现 （一）</a> 。</p> <p>当我们在终端执行“gradle lint”任务后，会加载com.android.build.gradle.tasks.Lint类，它的源码位于Lint.groovy文件中。<br>Lint类的lint（）方法会首先被执行，这也是整个lint检查流程开始运转的起点。这部分代码如下：</p> <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">“GroovyUnusedDeclaration”</span>)</span><br><span class="line"><span class="meta">@TaskAction</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> lint() &#123;</span><br><span class="line"> <span class="keyword">def</span> modelProject = createAndroidProject(project)</span><br><span class="line"> <span class="keyword">if</span> (getVariantName() != <span class="literal">null</span> &amp;&amp; !getVariantName().isEmpty()) &#123;</span><br><span class="line"> <span class="keyword">for</span> (Variant <span class="string">variant :</span> modelProject.getVariants()) &#123;</span><br><span class="line"> <span class="keyword">if</span> (variant.getName().equals(getVariantName())) &#123;</span><br><span class="line"> lintSingleVariant(modelProject, variant);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> lintAllVariants(modelProject);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>这里会根据getVariantName()的执行结果，选择去调用lintSingleVariant（）还是lintAllVariants（）。而观察lintSingleVariant（）和lintAllVariants（）的源码，发现这两个方法最终都要调用runLint（）方法，这个runLint（）方法很重要，代码片段如下：</p> <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/<em>* Runs lint on the given variant and returns the set of warnings </em>/</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Warning&gt; runLint(</span><br><span class="line"> <span class="meta">@NonNull</span> AndroidProject modelProject,</span><br><span class="line"> <span class="meta">@NonNull</span> Variant variant,</span><br><span class="line"> <span class="keyword">boolean</span> report) &#123;</span><br><span class="line"> IssueRegistry registry = createIssueRegistry()</span><br><span class="line"> LintCliFlags flags = <span class="keyword">new</span> LintCliFlags()</span><br><span class="line"> LintGradleClient client = <span class="keyword">new</span> LintGradleClient(registry, flags, project, modelProject,</span><br><span class="line"> mSdkHome, variant, getBuildTools())</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//……….这里省略部分代码…….</span></span><br><span class="line"> </span><br><span class="line"> warnings = client.run(registry)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//………</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>这个方法的第一句话是创建了一个IssueRegistry，而了解自定义Lint的用户一定对这个类不会陌生，在之前的文章中我们提到过，Android内建的Lint检查项目都是定义在BuiltinIssueRegistry类中，而BuiltinIssueRegistry就是派生自IssueRegistry，我们要实现的自定义Lint检查规则实际上也就是实现自定义的IssueRegistry子类。<br>IssueRegistry类的完整名称是com.android.tools.lint.client.api.IssueRegistry，它是一个Java类。自此，lint从一个gradle task开始与lint api包中的java类产生交互了。 </p> <p>createIssueRegistry()方法很简单，只有一句话：</p> <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BuiltinIssueRegistry createIssueRegistry() &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> LintGradleIssueRegistry()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure> <p>继续跟踪LintGradleIssueRegistry类：</p> <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LintGradleIssueRegistry</span> <span class="keyword">extends</span> <span class="title">BuiltinIssueRegistry</span> &#123;</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">boolean</span> mInitialized;</span><br><span class="line"> <span class="keyword">public</span> LintGradleIssueRegistry() &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@NonNull</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> List&lt;Issue&gt; getIssues() &#123;</span><br><span class="line"> List&lt;Issue&gt; issues = <span class="keyword">super</span>.getIssues();</span><br><span class="line"> <span class="keyword">if</span> (!mInitialized) &#123;</span><br><span class="line"> mInitialized = <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">for</span> (Issue <span class="string">issue :</span> issues) &#123;</span><br><span class="line"> <span class="keyword">if</span> (issue.getImplementation().getDetectorClass() == GradleDetector.<span class="keyword">class</span>) &#123;</span><br><span class="line"> issue.setImplementation(GroovyGradleDetector.IMPLEMENTATION);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> issues;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>这里的BuiltinIssueRegistry我们刚才也提到了，用户平时在执行gradle lint时默认会执行200多项检查，这些默认检查项目都是Android SDK通过BuiltinIssueRegistry定义的。 </p> <p>继续执行上面的run（）方法，new出来的LintGradleClient实际上是com.android.tools.lint.LintCliClient的子类，这个类的作用是提供执行lint任务的环境信息（比如控制台、IDE的信息），执行IssueRegistry中定义的各种ISSUE检查，以及以多种形式输出lint报告等。 </p> <p>继续执行run（）方法，也就是<code>warnings = client.run(registry)</code>。看到这里终于知道BuiltinIssueRegistry中定义的200多项ISSUE是如何被gradle的lint任务引入检查了。</p> <p>到这里为止，对groovy文件的分析就结束了，由于LintGradleClient是继承自java类LintCliClient，后续真正的lint检查工作都通过<code>client.run(registry)</code>这句话转交给java实现的LintCliClient类来完成。 </p> <p>读到这里有人会问，client.run(registry)中的参数registry是派生自BuiltinIssueRegistry，那么lint检查的项目也就是BuiltinIssueRegistry中定义的那200多项默认检查项目。那么我们自定义的lint规则中的ISSUE又是如何被引入lint检查的呢？不要急，下面会有分析。</p> <p>LintCliClient类的run（）方法的主要代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LintCliClient.run（)部分代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(@NonNull IssueRegistry registry, @NonNull List&lt;File&gt; files)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> <span class="comment">//………… </span></span><br><span class="line"> mDriver = <span class="keyword">new</span> LintDriver(registry, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//………… </span></span><br><span class="line"> mDriver.analyze(createLintRequest(files));</span><br><span class="line"></span><br><span class="line"> Collections.sort(mWarnings);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">boolean</span> hasConsoleOutput = <span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">for</span> (Reporter reporter : mFlags.getReporters()) &#123;</span><br><span class="line"> reporter.write(mErrorCount, mWarningCount, mWarnings);</span><br><span class="line"> <span class="keyword">if</span> (reporter <span class="keyword">instanceof</span> TextReporter &amp;&amp; ((TextReporter)reporter).isWriteToConsole()) &#123;</span><br><span class="line"> hasConsoleOutput = <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!mFlags.isQuiet() &amp;&amp; !hasConsoleOutput) &#123;</span><br><span class="line"> System.out.println(String.format(</span><br><span class="line"> <span class="string">“Lint found %1$d errors and %2$d warnings”</span>, mErrorCount, mWarningCount));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> mFlags.isSetExitCode() ? (mHasErrors ? ERRNO_ERRORS : ERRNO_SUCCESS) : ERRNO_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>不要被run（）这个方法名迷惑了，以为LintCliClient是一个线程类。其实LintCliClient只是一个普通类，不是Runnable类，这里的方法也叫run（）仅仅是一个巧合。<br>这里的run（）方法中首先new了一个LintDriver对象，其实它才是真正用来对project和file进行lint分析的类，也就是通过mDriver.analyze（）来进行lint分析。</p> <p>LintDriver的analyze()方法精简后的代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LintDriver.analyze()部分源码</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">analyze</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="comment">//…………</span></span><br><span class="line"> Collection&lt;Project&gt; projects;</span><br><span class="line"></span><br><span class="line"> projects = mRequest.getProjects();</span><br><span class="line"> <span class="keyword">if</span> (projects == <span class="keyword">null</span>) &#123;</span><br><span class="line"> projects = computeProjects(mRequest.getFiles());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//…………</span></span><br><span class="line"> </span><br><span class="line"> registerCustomDetectors(projects);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (mScope == <span class="keyword">null</span>) &#123;</span><br><span class="line"> mScope = Scope.infer(projects);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> fireEvent(EventType.STARTING, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (Project project : projects) &#123;</span><br><span class="line"> mPhase = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"> Project main = mRequest.getMainProject(project);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// The set of available detectors varies between projects</span></span><br><span class="line"> computeDetectors(project);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (mApplicableDetectors.isEmpty()) &#123;</span><br><span class="line"> <span class="comment">// No detectors enabled in this project: skip it</span></span><br><span class="line"> <span class="keyword">continue</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> checkProject(project, main);</span><br><span class="line"> <span class="keyword">if</span> (mCanceled) &#123;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> runExtraPhases(project, main);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> fireEvent(mCanceled ? EventType.CANCELED : EventType.COMPLETED, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>这里的projects变量中保存的就是等待进行Lint检查的工程项目，它是我们最开始在终端中执行<code>gradle lint</code>任务时指定的。比如在本例中，projects中保存的就是“Project [dir=/Users/netease/AndroidStudioProjects/HTLint/app]”这个项目。</p> <p>继续往下执行，走到<code>registerCustomDetectors(projects)</code>这句话，看到这个方法名你是不是发现了什么？别急，我们先看看registerCustomDetectors（）方法的源码：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerCustomDetectors</span><span class="params">(Collection&lt;Project&gt; projects)</span> </span>&#123;</span><br><span class="line"> <span class="comment">// Look at the various projects, and if any of them provide a custom</span></span><br><span class="line"> <span class="comment">// lint jar, “add” them (this will replace the issue registry with</span></span><br><span class="line"> <span class="comment">// a CompositeIssueRegistry containing the original issue registry</span></span><br><span class="line"> <span class="comment">// plus JarFileIssueRegistry instances for each lint jar</span></span><br><span class="line"> Set&lt;File&gt; jarFiles = Sets.newHashSet();</span><br><span class="line"> <span class="keyword">for</span> (Project project : projects) &#123;</span><br><span class="line"> jarFiles.addAll(mClient.findRuleJars(project));</span><br><span class="line"> <span class="keyword">for</span> (Project library : project.getAllLibraries()) &#123;</span><br><span class="line"> jarFiles.addAll(mClient.findRuleJars(library));</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> jarFiles.addAll(mClient.findGlobalRuleJars());</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!jarFiles.isEmpty()) &#123;</span><br><span class="line"> List&lt;IssueRegistry&gt; registries = Lists.newArrayListWithExpectedSize(jarFiles.size());</span><br><span class="line"> registries.add(mRegistry);</span><br><span class="line"> <span class="keyword">for</span> (File jarFile : jarFiles) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> IssueRegistry registry = JarFileIssueRegistry.get(mClient, jarFile);</span><br><span class="line"> <span class="keyword">if</span> (myCustomIssues == <span class="keyword">null</span>) &#123;</span><br><span class="line"> myCustomIssues = Sets.newHashSet();</span><br><span class="line"> &#125;</span><br><span class="line"> myCustomIssues.addAll(registry.getIssues());</span><br><span class="line"> registries.add(registry);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line"> mClient.log(e, <span class="string">“Could not load custom rule jar file %1$s”</span>, jarFile);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (registries.size() &gt; <span class="number">1</span>) &#123; <span class="comment">// the first item is mRegistry itself</span></span><br><span class="line"> mRegistry = <span class="keyword">new</span> CompositeIssueRegistry(registries);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>对于projects中的每一项project，都通过<code>mClient.findRuleJars(project)</code>方法来寻找该project中的RuleJars，那么findRuleJars（）是如何实现的呢？它返回的RuleJars又是什么呢？</p> <p>由于在LintDriver的构造函数中，mClient被初始化为一个LintClientWrapper对象，而LintClientWrapper类的findRuleJars（）方法内部只有一句话:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> mDelegate.findRuleJars(project)</span><br></pre></td></tr></table></figure> <p>所以上面的<code>mClient.findRuleJars(project)</code>实际上是被委托给了LintGradleClient.java来实现。LintGradleClient类又在它的createLintRequest（）方法中调用了LintGradleProject的静态方法create()，其中有这样一个片段：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Pair&lt;LintGradleProject, List&lt;File&gt;&gt; create(</span><br><span class="line"> <span class="meta">@NonNull</span> LintGradleClient client,</span><br><span class="line"> <span class="meta">@NonNull</span> AndroidProject project,</span><br><span class="line"> <span class="meta">@NonNull</span> Variant variant,</span><br><span class="line"> <span class="meta">@NonNull</span> org.gradle.api.Project gradleProject) &#123;</span><br><span class="line"> <span class="comment">//…………</span></span><br><span class="line"></span><br><span class="line"> List&lt;File&gt; customRules = Lists.newArrayList();</span><br><span class="line"> File appLintJar = <span class="keyword">new</span> File(gradleProject.getBuildDir(),</span><br><span class="line"> <span class="string">“lint”</span> + separatorChar + <span class="string">“lint.jar”</span>);</span><br><span class="line"> <span class="keyword">if</span> (appLintJar.exists()) &#123;</span><br><span class="line"> customRules.add(appLintJar);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//…………</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>这段代码会寻找当前项目的构建目录下是否引用了一个名为lint.jar文件，如果有就把它加入customRules列表中。<br>我们在《浅谈Android自定义Lint规则的实现》中提到过通过aar包装lint.jar文件，然后让需要自定义lint检查的android项目添加对aar的依赖，这也是本文的例子使用的引入自定义lint规则的方法。原来我们添加的依赖中的lint.jar文件是在这里被找出来的。</p> <p>继续回去看registerCustomDetectors（）方法后续的代码执行，也就是这一段：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Project library : project.getAllLibraries()) &#123;</span><br><span class="line"> jarFiles.addAll(mClient.findRuleJars(library));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>这段代码会对当前工程依赖的所有库文件进行检查，如果这些库文件有对名为lint.jar文件的引用，则把它们引用的lint.jar文件也加入到jarFiles集合中。<br>如此一来，不管是项目直接依赖的lint.jar文件，还是间接通过其他库引入的lint.jar文件，就都被放入jarFiles集合中了。</p> <p>继续往下执行registerCustomDetectors（）中的代码，走到了：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarFiles.addAll(mClient.findGlobalRuleJars());</span><br></pre></td></tr></table></figure> <p>这里的findGlobalRuleJars()方法实际是由LintClient实现的：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//com.android.tools.lint.client.api.LintClient类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;File&gt; <span class="title">findGlobalRuleJars</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="comment">// Look for additional detectors registered by the user, via</span></span><br><span class="line"> <span class="comment">// (1) an environment variable (useful for build servers etc), and</span></span><br><span class="line"> <span class="comment">// (2) via jar files in the .android/lint directory</span></span><br><span class="line"> List&lt;File&gt; files = <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> String androidHome = AndroidLocation.getFolder();</span><br><span class="line"> File lint = <span class="keyword">new</span> File(androidHome + File.separator + <span class="string">“lint”</span>); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line"> <span class="keyword">if</span> (lint.exists()) &#123;</span><br><span class="line"> File[] list = lint.listFiles();</span><br><span class="line"> <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line"> <span class="keyword">for</span> (File jarFile : list) &#123;</span><br><span class="line"> <span class="keyword">if</span> (endsWith(jarFile.getName(), DOT_JAR)) &#123;</span><br><span class="line"> <span class="keyword">if</span> (files == <span class="keyword">null</span>) &#123;</span><br><span class="line"> files = <span class="keyword">new</span> ArrayList&lt;File&gt;();</span><br><span class="line"> &#125;</span><br><span class="line"> files.add(jarFile);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; <span class="keyword">catch</span> (AndroidLocation.AndroidLocationException e) &#123;</span><br><span class="line"> <span class="comment">// Ignore – no android dir, so no rules to load.</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> String lintClassPath = System.getenv(<span class="string">“ANDROID_LINT_JARS”</span>); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line"> <span class="keyword">if</span> (lintClassPath != <span class="keyword">null</span> &amp;&amp; !lintClassPath.isEmpty()) &#123;</span><br><span class="line"> String[] paths = lintClassPath.split(File.pathSeparator);</span><br><span class="line"> <span class="keyword">for</span> (String path : paths) &#123;</span><br><span class="line"> File jarFile = <span class="keyword">new</span> File(path);</span><br><span class="line"> <span class="keyword">if</span> (jarFile.exists()) &#123;</span><br><span class="line"> <span class="keyword">if</span> (files == <span class="keyword">null</span>) &#123;</span><br><span class="line"> files = <span class="keyword">new</span> ArrayList&lt;File&gt;();</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (files.contains(jarFile)) &#123;</span><br><span class="line"> <span class="keyword">continue</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> files.add(jarFile);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> files != <span class="keyword">null</span> ? files : Collections.&lt;File&gt;emptyList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>这段代码逻辑也很简单，就是在环境变量指定的路径和“.android/lint”路径下分别寻找是否存在自定义lint规则的jar文件。如果有，就把它们返回并加入jarFiles集合中。<br>现在，不管是通过引入依赖库的方式，还是在系统指定路径或环境变量指定路径下放置lint.jar的方式（这2种方式在《浅谈Android自定义Lint规则的实现》中都有介绍）引入的lint.jar文件都已经被找出来放到jarFiles集合中了。</p> <p>继续往下执行registerCustomDetectors（）中的代码，这一行：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registries.add(mRegistry);</span><br></pre></td></tr></table></figure> <p>会把最开始生成的LintGradleIssueRegistry（实际就是系统默认的Lint检查项目BuiltinIssueRegistry的子类）缓存到列表registries中。</p> <p>然后紧接着的for循环会针对jarFiles中的每一项指定lint规则的jarFile，获取jarFile中包含的IssueRegistry，把这些IssueRegistry也都缓存到列表registries中，并把IssueRegistry中包含的所有ISSUE都缓存到集合myCustomIssues中。也就是这段代码（再贴一遍😓）：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!jarFiles.isEmpty()) &#123;</span><br><span class="line"> <span class="comment">//…………</span></span><br><span class="line"> <span class="keyword">for</span> (File jarFile : jarFiles) &#123;</span><br><span class="line"> <span class="comment">//…………</span></span><br><span class="line"> myCustomIssues.addAll(registry.getIssues());</span><br><span class="line"> registries.add(registry);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (registries.size() &gt; <span class="number">1</span>) &#123; <span class="comment">// the first item is mRegistry itself</span></span><br><span class="line"> mRegistry = <span class="keyword">new</span> CompositeIssueRegistry(registries);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>然后通过创建一个CompositeIssueRegistry对象，把所有lint检查的IssueRegistry对象（不论是系统默认的检查项目还是用户实现的自定义检查项目）都包装到CompositeIssueRegistry中。这样，在后面真正进行ISSUE检查工作时，就可以直接使用CompositeIssueRegistry对象中返回的ISSUE列表了，因为它包含了系统自带的和用户自定义的所有ISSUE。</p> <p>到了这里，registerCustomDetectors(projects)方法就执行完了（你不会忘了我们其实是因为跟踪LintDriver的analyze()方法所以才会有上面这么多balabala吧o(╯□╰)o ），让我们继续回到LintDriver的analyze()方法中往下看，也就是这一段：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LintDriver.analyze()部分源码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mScope == <span class="keyword">null</span>) &#123;</span><br><span class="line"> mScope = Scope.infer(projects);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fireEvent(EventType.STARTING, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Project project : projects) &#123;</span><br><span class="line"> mPhase = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"> Project main = mRequest.getMainProject(project);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// The set of available detectors varies between projects</span></span><br><span class="line"> computeDetectors(project);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (mApplicableDetectors.isEmpty()) &#123;</span><br><span class="line"> <span class="comment">// No detectors enabled in this project: skip it</span></span><br><span class="line"> <span class="keyword">continue</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> checkProject(project, main);</span><br><span class="line"> <span class="keyword">if</span> (mCanceled) &#123;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> runExtraPhases(project, main);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fireEvent(mCanceled ? EventType.CANCELED : EventType.COMPLETED, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure> <p>首先会在mScope字段中缓存当前要做Lint检查的工程都需要对哪些Scope进行检查，比如需不需要检查Java源代码（Scope.JAVA_FILE）、Java字节码（Scope.CLASS_FILE）、资源文件（Scope.RESOURCE_FILE）等等。</p> <p><code>fireEvent(EventType.STARTING, null)</code>会回调所有已经注册过的LintListener，通知它们Lint检查开始了。LintListener是一个interface，可以对Lint检查的各个阶段进行响应。 </p> <p>接着一个for循环分别对projects中的每个project进行检查，由于每个project对lint的配置都不同，比如用户通过配置当前project目录下的lint.xml文件关闭了某些检查项目，或者更改了某些ISSUE的严重等级等。所以这里使用了<code>computeDetectors(project)</code>来获取当前检查的project的lint配置信息：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">computeDetectors</span><span class="params">(@NonNull Project project)</span> </span>&#123; </span><br><span class="line"> <span class="comment">//……………….</span></span><br><span class="line"> Configuration configuration = project.getConfiguration(<span class="keyword">this</span>);</span><br><span class="line"> mScopeDetectors = <span class="keyword">new</span> EnumMap&lt;Scope, List&lt;Detector&gt;&gt;(Scope.class);</span><br><span class="line"> mApplicableDetectors = mRegistry.createDetectors(mClient, configuration,</span><br><span class="line"> mScope, mScopeDetectors);</span><br><span class="line"></span><br><span class="line"> validateScopeList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>这里获取到的configuration中包含了当前正接受lint检查的project的基本信息，以及lint属性配置文件的信息，debug截图如下：<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-4-14/7318144.jpg" alt=""></p> <p>然后这个configuration中的信息就被作为参数传给了mRegistry.createDetectors（）方法，来获知需要使用哪些Detector来检查当前project，而这里的mRegistry对象其实是一个CompositeIssueRegistry对象，也就是把android sdk自带的lint检查项目和用户自定义实现的lint检查项目都包含在内了。这里的createDetectors（）是没有被CompositeIssueRegistry重写，直接继承父类IssueRegistry的方法，主要代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;? extends Detector&gt; createDetectors(</span><br><span class="line"> <span class="meta">@NonNull</span> LintClient client,</span><br><span class="line"> <span class="meta">@NonNull</span> Configuration configuration,</span><br><span class="line"> <span class="meta">@NonNull</span> EnumSet&lt;Scope&gt; scope,</span><br><span class="line"> <span class="meta">@Nullable</span> Map&lt;Scope, List&lt;Detector&gt;&gt; scopeToDetectors) &#123;</span><br><span class="line"> List&lt;Issue&gt; issues = getIssuesForScope(scope);</span><br><span class="line"> <span class="comment">//……………..</span></span><br><span class="line"> Set&lt;Class&lt;? extends Detector&gt;&gt; detectorClasses = <span class="keyword">new</span> HashSet&lt;Class&lt;? extends Detector&gt;&gt;();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (Issue issue : issues) &#123;</span><br><span class="line"> Implementation implementation = issue.getImplementation();</span><br><span class="line"> Class&lt;? extends Detector&gt; detectorClass = implementation.getDetectorClass();</span><br><span class="line"> EnumSet&lt;Scope&gt; issueScope = implementation.getScope();</span><br><span class="line"> <span class="keyword">if</span> (!detectorClasses.contains(detectorClass)) &#123;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> (!configuration.isEnabled(issue)) &#123;</span><br><span class="line"> <span class="keyword">continue</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//……………..</span></span><br><span class="line"> </span><br><span class="line"> detectorClasses.add(detectorClass);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">    List&lt;Detector&gt; detectors = <span class="keyword">new</span> ArrayList&lt;Detector&gt;(detectorClasses.size());</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;? extends Detector&gt; clz : detectorClasses) &#123; </span><br><span class="line"> Detector detector = clz.newInstance();</span><br><span class="line"> detectors.add(detector);</span><br><span class="line">    <span class="comment">//……………. </span></span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">return</span> detectors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>逻辑很简单，先获取CompositeIssueRegistry对象中所有的ISSUE，也就是默认的200多项检查加上用户自己实现的检查项目，然后分别对这些ISSUE进行判断：如果集合detectorClasses中还没有包含当前ISSUE对应的lint探测器实现类detectorClass，并且当前project的配置文件没有禁用这个issue，那么就把探测器实现类detectorClass加入集合detectorClasses中。当所有issue都通过这个循环检查完毕后，把这些测器实现类都实例化成对象detector，加入列表detectors，最后把detectors返回给调用者，这样上一级调用者就获得了当前project可以用的所有Detector的实例了。</p> <p>回到上一级调用者，继续往下执行LintDriver.analyze()剩下的代码，终于完成了所有的前期准备工作，来到了<code>checkProject(project, main)</code>这一句，这个方法才是真正使用前面所有工作提供的信息，开始正式对project的文件、字节码等进行lint检查了。而checkProject（）方法中又调用了一个最核心的方法runFileDetectors()来进行lint检查工作，大致结构如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LintDriver.runFileDetectors()部分源码</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runFileDetectors</span><span class="params">(@NonNull Project project, @Nullable Project main)</span> </span>&#123;</span><br><span class="line"> <span class="comment">// Look up manifest information (but not for library projects)</span></span><br><span class="line"> <span class="keyword">if</span> (project.isAndroidProject()) &#123;</span><br><span class="line"> <span class="keyword">for</span> (File manifestFile : project.getManifestFiles()) &#123; </span><br><span class="line"> <span class="comment">//…………….. </span></span><br><span class="line"> fireEvent(EventType.SCANNING_FILE, context);</span><br><span class="line"> v.visitFile(context, manifestFile); </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> (mScope.contains(Scope.ALL_RESOURCE_FILES)</span><br><span class="line"> || mScope.contains(Scope.RESOURCE_FILE)</span><br><span class="line"> || mScope.contains(Scope.RESOURCE_FOLDER)</span><br><span class="line"> || mScope.contains(Scope.BINARY_RESOURCE_FILE)) &#123;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> (……) &#123; </span><br><span class="line"> checkIndividualResources(project, main, xmlDetectors, dirChecks,</span><br><span class="line"> binaryChecks, files);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> checkResFolder(project, main, res, xmlDetectors, dirChecks,</span><br><span class="line"> binaryChecks);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//……………..</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (mScope.contains(Scope.JAVA_FILE) || mScope.contains(Scope.ALL_JAVA_FILES)) &#123; </span><br><span class="line">    <span class="keyword">if</span> (……) &#123;</span><br><span class="line"> checkIndividualJavaFiles(project, main, checks, files);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="comment">//……………..</span></span><br><span class="line"> checkJava(project, main, sourceFolders, checks);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//……………..</span></span><br><span class="line"> <span class="keyword">if</span> (mScope.contains(Scope.CLASS_FILE)</span><br><span class="line"> || mScope.contains(Scope.ALL_CLASS_FILES)</span><br><span class="line"> || mScope.contains(Scope.JAVA_LIBRARIES)) &#123;</span><br><span class="line"> checkClasses(project, main);</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (mScope.contains(Scope.GRADLE_FILE)) &#123;</span><br><span class="line"> checkBuildScripts(project, main);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (mScope.contains(Scope.OTHER)) &#123;</span><br><span class="line"> List&lt;Detector&gt; checks = mScopeDetectors.get(Scope.OTHER);</span><br><span class="line"> <span class="keyword">if</span> (checks != <span class="keyword">null</span>) &#123;</span><br><span class="line"> OtherFileVisitor visitor = <span class="keyword">new</span> OtherFileVisitor(checks);</span><br><span class="line"> visitor.scan(<span class="keyword">this</span>, project, main);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (project == main &amp;&amp; mScope.contains(Scope.PROGUARD_FILE) &amp;&amp;</span><br><span class="line"> project.isAndroidProject()) &#123;</span><br><span class="line"> checkProGuard(project, main);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (project == main &amp;&amp; mScope.contains(Scope.PROPERTY_FILE)) &#123;</span><br><span class="line"> checkProperties(project, main);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>这段原始代码比较长，这里只截取了一个大致的框架。可以看到首先判断如果当前检查的是一个android项目，那么就检查它所有的Manifest文件，检查顺序为：</p> <blockquote> <p>The manifests should be provided such that the main manifest comes first, then any flavor versions, then any build types.</p> </blockquote> <p>然后再检查所有的资源文件和文件夹。 </p> <p>到了这里，专门针对android项目的检查就完成了，接下来就是对所有类型项目都要进行的检查了，这段代码框架的结构很清晰的列出了检查顺序为：<code>java源文件 –&gt; java字节码 –&gt; GRADLE文件 –&gt; 其他文件 –&gt; ProGuard文件 –&gt; PROPERTY文件</code>。这与<a href="http://tools.android.com/tips/lint/writing-a-lint-check" target="_blank" rel="external">http://tools.android.com/tips/lint/writing-a-lint-check</a>上关于lint检查顺序的描述是一致的：<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-4-14/97736321.jpg" alt=""> </p> <p>OK，对所有project的所有issue都已经检查完成了，现在让我们回到LintCliClient.run()的执行（别怪我一下跳的太远，实在是计算机就是这样执行的啊o(╯□╰)o，代码再贴一遍…）：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LintCliClient.run（)部分代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(@NonNull IssueRegistry registry, @NonNull List&lt;File&gt; files)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> <span class="comment">//………… </span></span><br><span class="line"> mDriver = <span class="keyword">new</span> LintDriver(registry, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//………… </span></span><br><span class="line"> mDriver.analyze(createLintRequest(files));</span><br><span class="line"></span><br><span class="line"> Collections.sort(mWarnings);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">boolean</span> hasConsoleOutput = <span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">for</span> (Reporter reporter : mFlags.getReporters()) &#123;</span><br><span class="line"> reporter.write(mErrorCount, mWarningCount, mWarnings);</span><br><span class="line"> <span class="keyword">if</span> (reporter <span class="keyword">instanceof</span> TextReporter &amp;&amp; ((TextReporter)reporter).isWriteToConsole()) &#123;</span><br><span class="line"> hasConsoleOutput = <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!mFlags.isQuiet() &amp;&amp; !hasConsoleOutput) &#123;</span><br><span class="line"> System.out.println(String.format(</span><br><span class="line"> <span class="string">“Lint found %1$d errors and %2$d warnings”</span>, mErrorCount, mWarningCount));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> mFlags.isSetExitCode() ? (mHasErrors ? ERRNO_ERRORS : ERRNO_SUCCESS) : ERRNO_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>我们前面这么长的篇幅其实都是在分析这里的mDriver.analyze(createLintRequest(files))方法，它会把lint检查出来的警告和错误信息保存在列表mWarnings中，然后用这句<code>Collections.sort(mWarnings)</code>对所有警告进行排序。剩下的工作当然就是把这些警告信息输出啦，输出成为我们平常见到的html报告、或者控制台报告、或者其他形式。输出报告的工作是由这段代码完成的：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Reporter reporter : mFlags.getReporters()) &#123;</span><br><span class="line"> reporter.write(mErrorCount, mWarningCount, mWarnings);</span><br><span class="line"> <span class="keyword">if</span> (reporter <span class="keyword">instanceof</span> TextReporter &amp;&amp; ((TextReporter)reporter).isWriteToConsole()) &#123;</span><br><span class="line"> hasConsoleOutput = <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>到此为止，Lint的工作流程就分析完了。</p> <h2 id="如何debug_Lint源码">如何debug Lint源码</h2><p>在终端执行gradle的lint任务默认是无法debug的，也就是说你在系统定义的200多项Issue或者你自定义的Issue中打的断点都不起作用。如果需要调试，可以用下面的方法：</p> <p>1、在gradle.properties文件中加上下面这句话： </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.jvmargs=&apos;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005&apos;</span><br></pre></td></tr></table></figure> <p>2、创建一个Remote类型的debug配置文件：<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-4-14/34604208.jpg" alt=""> </p> <p><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-4-14/97287156.jpg" alt=""></p> <p>3、在终端中以daemon模式启动gradle lint任务<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-4-14/6501806.jpg" alt=""></p> <p>然后快速点击debug按钮（注意此时要切换到刚才创建的Debug Lint的配置文件上），如图：<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-4-14/70344961.jpg" alt=""></p> <p>现在Lint源码（包括Android SDK中的和用户自定义的Lint规则）中的断点就可以调试了。</p><p></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/Android">https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/Android</a> Lint工作原理剖析/</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文转载自：&lt;a href=&quot;http://www.carrotsight.com/2016/06/21/Android%20Lint工作原理剖析.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Lint工作原理剖析&lt;/a&gt;&lt;/
    
    </summary>
    
      <category term="Android_Lint" scheme="https://fengqingxiuyi.github.io/categories/Android-Lint/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈Android自定义Lint规则的实现（二）</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/%E6%B5%85%E8%B0%88Android%E8%87%AA%E5%AE%9A%E4%B9%89Lint%E8%A7%84%E5%88%99%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/浅谈Android自定义Lint规则的实现（二）/</id>
    <published>2016-08-22T02:58:23.000Z</published>
    <updated>2016-08-22T03:00:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文转载自：<a href="http://www.carrotsight.com/2016/02/01/浅谈Android自定义Lint规则的实现%20（二）.html" target="_blank" rel="external">浅谈Android自定义Lint规则的实现 （二）</a></p>
<p>上一篇文章针对Android自定义Lint规则的总体开发流程做了介绍，本文针对java源代码Lint检测方法做细节介绍。由于网上关于自定义Lint规则的文章比较有限，且对于lombok.ast库的相关细节几乎没有文档可用，所以本文内容主要是根据自身开发经验做的总结，难免会有疏漏或错误，还请各位大神批评指正。</p> <a id="more"></a> <h2 id="检测Java源代码">检测Java源代码</h2><p>针对Java源代码做Lint检测，我们需要让自定义的XXXDetector类继承com.android.tools.lint.detector.api.Detector类，并实现com.android.tools.lint.detector.api.Detector.JavaScanner接口，同时在该XXXDetector对应的Issue中定义检测的范围为com.android.tools.lint.detector.api.Scope.JAVA_FILE_SCOPE，如图： </p> <p><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-29/14308921.jpg" alt=""> </p> <p>其实我们查看Detector类的源码会发现，JavaScanner是在Detector中定义的内部接口，JavaScanner接口中定义的10个方法，都以完全相同的签名在Detector中重新定义了一遍。所以，Detector相当于是JavaScanner接口的适配器，上图中我们自定义的ActivityFragmentLayoutNameDetector类可以根据需要只实现JavaScanner接口的部分方法，而不需要实现全部10个方法。<br>作为7个Scanner（这7个Scanner在上一篇中有介绍，这里的JavaScanner就是其中一个）的外部类，Detector实际上是它们共同的适配器。 </p> <p>JavaScanner接口定义的10个方法如下图所示：</p> <p><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-7/55021440.jpg" alt=""> </p> <p>从上图可以看到，JavaScanner定义的很多方法都用到了Node类，还出现了ConstructorInvocation、MethodInvocation等类。那么这些类到底代表什么，我们如何在java源代码的分析中使用这些类呢？要搞清楚这个问题，我们首先要介绍一下Abstract Syntax Tree。</p> <h3 id="Abstract_Syntax_Tree是什么">Abstract Syntax Tree是什么</h3><p>在计算机科学中，Abstract Syntax Tree（简称AST）是对程序设计语言写成的源代码的一种树型表示。树中的每一个节点（node）代表在源代码中存在的一个构建体。之说以说语法树是“抽象的”（Abstract）是因为它并没有把真实语法的所有细节都表达出来，比如成对匹配的括号就隐式的用树结构来表达，一条if-condition-then语句可能就用一个具有3个分支的节点来表达。 </p> <p>在Java和Android开发工作中，IDE工具带给我们的很多便利功能都是通过AST来实现的，比如Quick Fix、Quick Assist、修改一个变量名时自动把所有对该变量的引用都同步修改、以及在Android Studio中摁住<code>⌘</code>键的同时点击一个类名会跳转到那个类的定义文件等。 </p> <p>AST与XML文件的DOM模型类似，允许你通过修改树模型来把这些修改反映到Java源代码中。不过我们在自定义Lint使用AST的过程中一般不涉及修改节点。一个AST的例子如下图: </p> <p><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-29/67433168.jpg" alt=""></p> <p>在查看Android Lint源码的过程中可以发现，它涉及到两套AST的实现API，一套是<code>Ecj（Eclipse Java development tools）</code>的，在包<code>org.eclipse.jdt.internal.compiler.ast</code>中；另一套是<code>lombok.ast</code>的。系统暴露给我们允许我们直接用来扩展Lint规则的是lombok.ast的AST API。JavaScanner定义的10个方法中的Node指的就是lombok.ast.Node，而ConstructorInvocation、MethodInvocation都是lombok.ast.Node的子类。</p> <p>如果你对AST感兴趣，可以查看<a href="http://www.eclipse.org/articles/Article-JavaCodeManipulation_AST/" target="_blank" rel="external">Eclipse网站的AST介绍文档</a>。</p> <h3 id="JavaScanner接口方法的使用">JavaScanner接口方法的使用</h3><p>前面的图片显示了JavaScanner接口定义的10个方法，这些方法有些可以单独使用，有些需要配合使用，这里介绍常见的用法。 </p> <p>【1】getApplicableNodeTypes（）需要与createJavaVisitor（）配合使用。 </p> <p>getApplicableNodeTypes（）返回我们感兴趣的Node列表，然后在createJavaVisitor（）返回的AstVisitor中去处理这些Node。<br>比如，我们想对java源代码中的if、try、for语句进行检测，就可以这样实现getApplicableNodeTypes（）：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Class&lt;? extends Node&gt;&gt; getApplicableNodeTypes() &#123;</span><br><span class="line"> <span class="keyword">return</span> Arrays.asList(Try.class, If.class, For.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>其中的Try、If、For都是lombok.ast.Node的子类。</p> <p>然后定义一个AstVisitor的子类，并在createJavaVisitor（）中返回它的一个实例，那么在java源码中出现的try、if、for语句对应的node就会触发ForIfTryBlockVisitor中对应的回调函数：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AstVisitor <span class="title">createJavaVisitor</span><span class="params">(@NonNull JavaContext context)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> ForIfTryBlockVisitor(context);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ForIfTryBlockVisitor</span> <span class="keyword">extends</span> <span class="title">ForwardingAstVisitor</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> JavaContext mContext;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ForIfTryBlockVisitor</span><span class="params">(JavaContext context)</span> </span>&#123;</span><br><span class="line"> mContext = context;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">visitTry</span><span class="params">(Try node)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//… 在这里对try语句做你需要的检查</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">super</span>.visitTry(node);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">visitFor</span><span class="params">(For node)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//… 在这里对for语句做你需要的检查</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">super</span>.visitFor(node);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">visitIf</span><span class="params">(If node)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//… 在这里对if语句做你需要的检查 </span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">super</span>.visitIf(node);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>【2】getApplicableMethodNames()需要与void visitMethod(JavaContext context, AstVisitor visitor, MethodInvocation node)配合使用，此时createJavaVisitor（）根据实际需求可有可无。 </p> <p>这里getApplicableMethodNames()用来返回你感兴趣的那些方法调用列表，这些方法调用对应的node每一次出现都会触发visitMethod(JavaContext context, AstVisitor visitor, MethodInvocation node)方法被回调。 </p> <p>例如，我想针对java源代码中所有调用setContentView（）和inflate（）的代码进行检查，可以这样定义getApplicableMethodNames（）：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getApplicableMethodNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> Arrays.asList(<span class="string">“setContentView”</span>, <span class="string">“inflate”</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>然后在visitMethod方法中做具体处理：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitMethod</span><span class="params">(@NonNull JavaContext context, AstVisitor visitor, @NonNull MethodInvocation node)</span> </span>&#123;</span><br><span class="line"> String methodName = node.astName().astValue();</span><br><span class="line"> <span class="keyword">if</span> (methodName.equals(<span class="string">“setContentView”</span>)) &#123; </span><br><span class="line"> <span class="comment">//在这里做针对setContentView（）调用的具体检查</span></span><br><span class="line"> </span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (methodName.equals(<span class="string">“inflate”</span>)) &#123;</span><br><span class="line"> <span class="comment">//在这里做针对inflate（）调用的具体检查</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>【3】getApplicableConstructorTypes（）需要与visitConstructor(JavaContext context, AstVisitor visitor,ConstructorInvocation node,ResolvedMethod constructor)配合使用，此时createJavaVisitor（）根据实际需求可有可无。 </p> <p>这里getApplicableConstructorTypes（）用来返回你感兴趣的构造方法的列表，系统会在符合条件的构造方法的每一次出现都回调一次visitConstructor方法，而传入的node参数就是对应的调用构造函数在AST中的节点。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getApplicableConstructorTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> Arrays.asList(<span class="string">“com.ljfxyj2008.BlankFragment”</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitConstructor</span><span class="params">(@NonNull JavaContext context, AstVisitor visitor, @NonNull ConstructorInvocation node, @NonNull JavaParser.ResolvedMethod constructor)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//在这里做针对构造函数调用语句的具体检查</span></span><br><span class="line"></span><br><span class="line"> System.out.println(<span class="string">“===visitConstructor node = “</span> + node</span><br><span class="line"> + <span class="string">“\nlocation = “</span> + context.getLocation(node).getStart().getLine());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>【4】appliesToResourceRefs（）需要与visitResourceReference(JavaContext context,AstVisitor visitor,Node node,String type,String name,boolean isFramework)配合使用，用来对感兴趣的资源文件引用的代码进行检查，比如引用了<code>R.layout.main</code>或者<code>R.string.app_name</code>的代码。</p> <p>这两个方法的实现步骤与前面的几对类似，就不再贴代码了。</p> <p>在上面介绍的JavaScanner的所有相关API中，最重要的就是createJavaVisitor（）以及该方法返回的AstVisitor。事实上，我们完全可以只利用createJavaVisitor（）方法以及对应的AstVisitor，就完成对java源代码的所有检查工作。之所以Lint系统为JavaScanner接口定义了10个方法，仅仅是为了使得对常见的一些处理需求实现起来更加简洁和高效。</p> <h3 id="lombok-ast_API中重要的类">lombok.ast API中重要的类</h3><p>既然Lint分析是处理AST中的节点，那么最重要最常用的类当然就是lombok.ast.Node了。<br>lombok.ast.Node实际上是一个接口，定义了对于AST节点的一系列通用操作，有多个抽象子类/接口都实现/继承了它。而在这些抽象子类/接口中我们最常用到的是AbstractNode。AbstractNode是实现了lombok.ast.Node接口的抽象类，它有为数众多的子类，这些子类直接与各种语句直接对应，如图： </p> <p><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-29/92067715.jpg" alt=""></p> <p>可以看到常用的case、break、continue、for、if等语句都直接被映射为这里具体的Node子类，而类构造器的声明与调用（即用new关键字来生成一个新对象）也能在这里找到对应的类（即ConstructorDeclaration和ConstructorInvocation）。有了AbstractNode如此丰富的子类，我么对java源码的分析就方便了很多，对于自己想要分析的元素，先找到与它对应的AbstractNode子类，然后在定义自己的AstVisitor时去分析这个对应类即可。 </p> <p>下面给出一个简单的例子，目的是检查用户有没有使用<code>new Message（）</code>来获取新的android.os.Message对象，如果有这种调用，我们就抛出一个issue，提示用户应该使用效率更高的<code>handler.obtainMessage</code>或者<code>Message.Obtain()</code>来获取，代码如下： </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageObtainDetector</span> <span class="keyword">extends</span> <span class="title">Detector</span></span><br><span class="line"> <span class="keyword">implements</span> <span class="title">Detector</span>.<span class="title">JavaScanner</span> </span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Issue ISSUE = Issue.create(<span class="string">“MessageObtainNotUsed”</span>,</span><br><span class="line"> <span class="string">“You should not call <code>new Message()</code> directly.”</span>,</span><br><span class="line"> <span class="string">“You should not call <code>new Message()</code> directly. Instead, you should use <code>handler.obtainMessage</code> or <code>Message.Obtain()</code>.”</span>,</span><br><span class="line"> Category.CORRECTNESS,</span><br><span class="line"> <span class="number">9</span>,</span><br><span class="line"> Severity.ERROR,</span><br><span class="line"> <span class="keyword">new</span> Implementation(MessageObtainDetector.class,</span><br><span class="line"> Scope.JAVA_FILE_SCOPE));</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> List&lt;Class&lt;? extends Node&gt;&gt; getApplicableNodeTypes() &#123;</span><br><span class="line"> <span class="keyword">return</span> Collections.&lt;Class&lt;? extends Node&gt;&gt;singletonList(ConstructorInvocation.class);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> AstVisitor <span class="title">createJavaVisitor</span><span class="params">(@NonNull JavaContext context)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> MessageObtainVisitor(context);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageObtainVisitor</span> <span class="keyword">extends</span> <span class="title">ForwardingAstVisitor</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> JavaContext mContext;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">MessageObtainVisitor</span><span class="params">(JavaContext context)</span> </span>&#123;</span><br><span class="line"> mContext = context;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">visitConstructorInvocation</span><span class="params">(ConstructorInvocation node)</span> </span>&#123;</span><br><span class="line"> JavaParser.ResolvedNode resolvedType = mContext.resolve(node.astTypeReference());</span><br><span class="line"> JavaParser.ResolvedClass resolvedClass = (JavaParser.ResolvedClass) resolvedType;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (resolvedClass != <span class="keyword">null</span></span><br><span class="line"> &amp;&amp; resolvedClass.isSubclassOf(<span class="string">“android.os.Message”</span>, <span class="keyword">false</span>))&#123;</span><br><span class="line"> mContext.report(ISSUE,</span><br><span class="line"> node,</span><br><span class="line"> mContext.getLocation(node),</span><br><span class="line"> <span class="string">“You should not call <code>new Message()</code> directly.”</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">super</span>.visitConstructorInvocation(node);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>这段代码结构非常简单，在getApplicableNodeTypes()方法中返回一个List表明我们只对ConstructorInvocation.class感兴趣，然后在createJavaVisitor（）中返回一个自定义的AstVisitor对象，也就是这里的MessageObtainVisitor。因为是检测对构造方法的调用，所以我们在MessageObtainVisitor的定义中只需要重写visitConstructorInvocation（）方法。事实上，即使我们把这里对getApplicableNodeTypes()重写的代码段删除，仍然可以达到检测<code>new Message()</code>的目的，因为只要在MessageObtainVisitor（）中重写了visitXXX（）就可以保证它被调用，但是我们重写getApplicableNodeTypes()可以确保效率更高。 </p> <p>认真看自定义类MessageObtainVisitor的visitConstructorInvocation（）方法体，可以看到这两行代码:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JavaParser.ResolvedNode resolvedType = mContext.resolve(node.astTypeReference());</span><br><span class="line">JavaParser.ResolvedClass resolvedClass = (JavaParser.ResolvedClass) resolvedType;</span><br></pre></td></tr></table></figure> <p>这两行代码非常关键，它把lombok.ast中的类转换成了JavaParser中的类，如此一来我们就可以获取与此node对应的类、变量、方法或注解的详细信息。比如这里的node被转换为resolvedClass后，就可以获取与此类有关的类继承关系。 </p> <p>由于lombok.ast中各种回调函数（如getApplicableNodeTypes、visitConstructorInvocation等）的参数都是lombok.ast.Node类型，它们包含的都是与AST（抽象语法树）相关的结构性信息，而这些信息对于我们分析java源码的具体业务来说肯定是远远不够的，所以在合适的时机把node转换成JavaParser中各种合适的类型就非常重要。那么在lombok.ast的各种回调函数中传入的node能够被转换成哪些类型呢？看下图：</p> <p><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-2-1/36527297.jpg" alt=""></p> <p>可以看到类型还是相当丰富的，足够我们对AST各种节点进行详细分析了。</p> <p>相信细心的朋友应该发现了，上面MessageObtainDetector这个类的代码中是对ConstructorInvocation.class类型的节点进行了分析，而我们在<code>JavaScanner接口方法的使用</code>这一节的第3条介绍了getApplicableConstructorTypes（）和visitConstructor（）方法，它们看起来很类似啊？没错，对于MessageObtainDetector类中进行的构造方法调用检查，我们同样可以用getApplicableConstructorTypes（）和visitConstructor（）来实现，这样就不需要自己去定义一个MessageObtainVisitor了。我们在前面也提到过，JavaScanner中的定义的10个回调方法，其实大部分都是为了简化代码结构与提高执行效率，其实完全可以只用自定义的ForwardingAstVisitor来完成所有检测功能。 </p> <p>还有一组比较有用的类型转换方法上面没有提到：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassDeclaration surroundingClass = JavaContext.findSurroundingClass(node);</span><br><span class="line">Node surroundingMethod = JavaContext.findSurroundingMethod(node);</span><br></pre></td></tr></table></figure> <p>用这组方法可以获取到此node外围包裹它的类或方法，这是JavaContext类提供的两个静态方法，可以将这两个方法与上面介绍的JavaParser中的ResolvedXXX类型配合使用。</p> <h2 id="小结">小结</h2><p>使用Lint来分析java源代码，需要实现JavaScanner中合适的回调函数。这些回调函数大部分是为了使得对常见的一些处理需求实现起来更加简洁和高效，事实上我们完全可以只用自定义的<code>AstVisitor</code>来完成所有Lint检查工作，并在createJavaVisitor（）中返回这个自定义AstVisitor的实例。<br>JavaScanner回调函数的node包含的都是与AST结构相关的信息，如果要对node对应的java类、方法等进行详细的业务分析，就需要把node转换成JavaParser中定义的合适类型。</p>

<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/浅谈Android自定义Lint规则的实现（二）/">https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/浅谈Android自定义Lint规则的实现（二）/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文转载自：&lt;a href=&quot;http://www.carrotsight.com/2016/02/01/浅谈Android自定义Lint规则的实现%20（二）.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅谈Android自定义Lint规
    
    </summary>
    
      <category term="Android_Lint" scheme="https://fengqingxiuyi.github.io/categories/Android-Lint/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈Android自定义Lint规则的实现（一）</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/%E6%B5%85%E8%B0%88Android%E8%87%AA%E5%AE%9A%E4%B9%89Lint%E8%A7%84%E5%88%99%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/浅谈Android自定义Lint规则的实现（一）/</id>
    <published>2016-08-22T02:55:23.000Z</published>
    <updated>2016-08-22T03:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文转载自：<a href="http://www.carrotsight.com/2016/01/29/浅谈Android自定义Lint规则的实现%20（一）.html" target="_blank" rel="external">浅谈Android自定义Lint规则的实现 （一）</a></p>
<p>最近在做一个基于Android Lint的自定义静态代码检查功能库，这里做一个简单的总结。前半部分介绍SDK自带Android Lint的功能与配置使用方法，后半部分介绍扩展自定义Lint规则库的开发流程。</p> <h2 id="什么是Android_Lint">什么是Android Lint</h2><p>Android Lint是一个静态代码分析工具，它能够对你的Android项目中潜在的bug、可优化的代码、安全性、性能、可用性、可访问性、国际化等进行检查。 </p> <p>在Android SDK Tools 16及更高的版本中，Lint工具会自动安装。通过它对Android工程源代码进行扫描和检查，可发现潜在的问题，以便程序员及早修正这个问题。Android Lint提供了命令行方式执行，还与IDE（如Android Studio）进行了集成，并提供了xml和html形式的输出报告。 </p> <p>看了上面的介绍可能大家依然很迷惑“这货到底有啥用”，其实我们平时在Android开发过程中一直在享受Lint带来的便利。比如，下面图中的警告和错误提示，相信大家应该很熟悉吧：<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-29/23031672.jpg" alt=""></p> <a id="more"></a> <p><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-29/32957935.jpg" alt=""></p> <p>上面的例子分别是java文件与Manifest文件在接受Lint检查后给出的简要lint报告，是Lint与IDE集成后的一种表现形式。事实上，Android Lint目前能检查的项目已经多达220项，检查的范围涵盖了二进制资源文件、java源代码、class文件、gradle配置文件、xml文件、resource文件夹、其他文件等。除了图中这种与IDE结合的简洁报告形式以外，也提供更详细的html和xml形式的报告，让你对自己代码质量的提升空间有更全面的认识。 </p> <p>在Android Studio中，每一次编译程序时都会自动运行lint分析工具，也可以在需要lint分析的文件夹、包或文件上点击右键选择【Analyze】-&gt;【Inspect Code】。 生成的报告包含了检查过程中发现的问题，并把这些内容按照类别、优先级、严重程度进行了区分。 </p> <p>Lint工具的处理流程如下图所示：<br><img src="http://developer.android.com/images/tools/lint.png" alt="Lint工作流"> </p> <p>图中各部分含义如下： </p> <ul> <li>Application source files： 构成你Android project的源文件，包含Java和XML文件，图标，以及ProGuard配置文件。</li> <li>lint.xml： 配置文件，用来指定你想禁用哪些lint检查功能，以及自定义问题严重度(problem severity levels）。</li> <li>lint Tool： 一个可以从命令行或Android Studio中运行的静态打码扫描工具。</li> <li>lint Output： lint检查的结果，可以在命令行中通过lint查看，也可以在Android Studio的Event Log中查看。</li> </ul> <h2 id="Android_Lint检查哪些内容">Android Lint检查哪些内容</h2><p>Android Lint内置了很多lint规则，到现在为止是220项检查，总共可以分为以下几类： </p> <ul> <li>Correctness 正确性</li> <li>Security 安全性</li> <li>Performance 性能</li> <li>Usability 可用性</li> <li>Accessibility 可访问性</li> <li>Internationalization 国际化</li> </ul> <p>下面列举一些常见的lint会检测的代码问题：</p> <ul> <li>缺少翻译（和未使用的翻译）</li> <li>布局性能问题（老的layoutopt工具会用于查找所有这样的问题，和除此之外更多的问题）</li> <li>未使用的资源</li> <li>不一致的数组大小（当在多个配置中定义数组）</li> <li>可访问性和国际化问题（硬编码字符串，缺少contentDescription等）</li> <li>图标问题 （如丢失密度、 重复图标、 错误尺寸等）</li> <li>可用性问题 （如不在文本字段上指定输入的类型）</li> <li>清单错误</li> </ul> <blockquote> <p>如果要查看lint工具支持的issue的完整列表和它们所对应的issue ID，可以使用<code>lint –list</code>命令。</p> </blockquote> <h2 id="配置Android_Lint">配置Android Lint</h2><p>默认情况下，当你运行Lint扫描时，它会对Lint支持的所有issue进行检查。你也可以限制只让lint检查特定的issue，并为某些issue分配严重度（severity level）。<br>比如，你可以禁止lint检查那些与你的项目无关的issue，并为lint配置一个更低的severity level来让它报告那些不是非常严重的issue。 </p> <p>你可以为lint检查配置不同的level：</p> <ul> <li>全局（对整个project）</li> <li>每个project module</li> <li>每个production module</li> <li>每个test module</li> <li>每个open files</li> <li>每个class hierarchy</li> <li>每个Version Control System (VCS) scopes</li> </ul> <h3 id="在Android_Studio中配置Lint">在Android Studio中配置Lint</h3><p>Android Studio允许你对lint每项检查单独启用或禁用，还可以对项目全局、特定文件夹、特定文件进行专门的lint配置。方法是在Android Studio中点击<code>File &gt; Settings &gt; Project Settings</code>菜单打开<code>Editor-&gt;Inspections</code>页面，里面有它支持的Profiles和Inspections列表，如图：<br><img src="http://developer.android.com/images/tools/studio-inspections-config.png" alt="Inspection Configuration"></p> <h3 id="配置Lint文件">配置Lint文件</h3><p>你可以在lint.xml文件中指定你对lint检查的偏好设置。如果你要手动创建这个文件，就把它放在你的Android工程的根目录中。如果你是在Android Studio中配置lint偏好，那么lint.xml文件会自动创建并添加到你的Android工程中。 </p> <p>lint.xml文件的组成结构是，最外面是一对闭合的<lint>标签，里面包含一个或多个<issue>子元素。每一个<issue>被唯一的id属性来标识，整体结构如下：</issue></issue></lint></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">lint</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!– list of issues to configure –&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">lint</span>&gt;</span></span><br></pre></td></tr></table></figure> <p>通过设置<issue>标签中的severity属性值，你可以对某个issue禁用lint检查，或者修改某个issue的严重程度（severity level）。</issue></p> <p>一个实例lint.xml文件如下所示：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">lint</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!– Disable the given check in this project –&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">“IconMissingDensityFolder”</span> <span class="attr">severity</span>=<span class="string">“ignore”</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!– Ignore the ObsoleteLayoutParam issue in the specified files –&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">“ObsoleteLayoutParam”</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ignore</span> <span class="attr">path</span>=<span class="string">“res/layout/activation.xml”</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ignore</span> <span class="attr">path</span>=<span class="string">“res/layout-xlarge/activation.xml”</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">issue</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!– Ignore the UselessLeaf issue in the specified file –&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">“UselessLeaf”</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ignore</span> <span class="attr">path</span>=<span class="string">“res/layout/main.xml”</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">issue</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!– Change the severity of hardcoded strings to “error” –&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">issue</span> <span class="attr">id</span>=<span class="string">“HardcodedText”</span> <span class="attr">severity</span>=<span class="string">“error”</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">lint</span>&gt;</span></span><br></pre></td></tr></table></figure> <h3 id="在Java源文件或XML源文件中配置lint检查">在Java源文件或XML源文件中配置lint检查</h3><h4 id="在Java中配置lint检查">在Java中配置lint检查</h4><p>要对Android项目中某个Java类或方法禁用lint检查，只需要对那段代码添加<code>@SuppressLint</code>注解即可。<br>下面的例子显示了如何对onCreate方法关闭NewApi这个issue的lint检查。lint工具仍然会对这个类的其他方法进行NewApi issue的检查。例子如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">“NewApi”</span>)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"> setContentView(R.layout.main);</span><br></pre></td></tr></table></figure> <p>下面的例子显示如何对FeedProvider类关闭ParserError issue的lint检查：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">“ParserError”</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeedProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>如果要在Java文件中禁用所有issue的lint检查，使用<code>all</code>关键字，比如：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">“all”</span>)</span><br></pre></td></tr></table></figure> <h4 id="在XML中配置lint检查">在XML中配置lint检查</h4><p>如果要对XML文件中某一部分禁用lint检查，可以使用<code>tools:ignore</code>属性来标识。为了让这个属性能够被lint工具识别，必须把下面的命名空间加入你的XML中：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namespace xmlns:tools=”<a href="http://schemas.android.com/tools" target="_blank" rel="external">http://schemas.android.com/tools</a>“</span><br></pre></td></tr></table></figure> <p>下面的例子显示了如何对XML布局文件中的<linearlayout>元素禁用<code>UnusedResources</code> issue的lint检查。<code>ignore</code>属性会被该元素下的子元素继承，在这个例子中，子元素<textview>同样被禁用了lint检查。</textview></linearlayout></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> </span><br><span class="line"> <span class="attr">xmlns:android</span>=<span class="string">“<a href="http://schemas.android.com/apk/res/android" target="_blank" rel="external">http://schemas.android.com/apk/res/android</a>“</span></span><br><span class="line"> <span class="attr">xmlns:tools</span>=<span class="string">“<a href="http://schemas.android.com/tools" target="_blank" rel="external">http://schemas.android.com/tools</a>“</span></span><br><span class="line"> <span class="attr">tools:ignore</span>=<span class="string">“UnusedResources”</span> &gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">TextView</span></span><br><span class="line"> <span class="attr">android:text</span>=<span class="string">“@string/auto_update_prompt”</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure> <p>要禁用多个issue时，用逗号把它们分隔开，比如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tools:ignore=&quot;NewApi,StringFormatInvalid&quot;</span><br></pre></td></tr></table></figure> <p>要在某个XML元素中对所有issue都禁用lint检查，可以使用<code>all</code>关键字，比如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tools:ignore=&quot;all&quot;</span><br></pre></td></tr></table></figure> <h2 id="自定义lint">自定义lint</h2><h3 id="为什么需要自定义lint">为什么需要自定义lint</h3><p>由于每个项目自身的需求，Android Lint默认的检查项目可能不能满足我们的需求。<br>比如我们自己写了一个下拉刷新的库项目，可以让用户直接在xml布局文件中去使用它，但是我们希望用户必须在这个xml元素中定义一个<code>pullmode</code>属性，否则组件无法正常运行，我们希望lint能够对此进行检查，并在用户忘记添加此属性时给出明确的错误提示。再比如，我们的项目中使用了自己封装的日志库，能够方便的在release版本中关闭日志输出来防止app的效率下降，该日志库还能够把日志输出到指定的文件中方便事后分析，这时有一位新成员加入了我们的开发，他可能还是习惯性的用android.util.Log来打印日志，我们希望能够检测到本项目中所有使用了android.util.Log的代码，并发出警告。<br>要满足这些自定义需求，我们就需要通过Android Lint的扩展机制自己定制lint规则。 </p> <h3 id="自定义lint如何使用">自定义lint如何使用</h3><p>自定义lint是一个纯java项目，以jar的形式输出。有了包含lint规则的jar后，有两种使用方案：</p> <ul> <li>方案一：把此jar拷贝到 ~/.android/lint/ 目录中（文件名任意）。此时，这些lint规则针对所有项目生效。</li> <li>方案二：继续创建一个Android library项目，用来输出包含lint.jar的aar；然后，让目标项目依赖此aar即可使自定义lint规则生效。</li> </ul> <p>由于方案一是全局生效的策略，无法单独针对目标项目，用处不大。在工程实践中，我们主要使用方案二。</p> <p>AAR是Android Library的一种新的二进制分发格式，它把资源也一起打包，这样一来图片和布局资源文件也能够被同时分发。AAR格式文件能够包含一个可选的lint.jar文件，如果一个app依赖了一个包含lint.jar的aar文件，那么这个lint.jar中的规则就会在app的lint任务中被用来做lint检查。</p> <h3 id="自定义lint实现原理">自定义lint实现原理</h3><p>自定义lint规则是以jar形式存在的，主要通过继承两种类来实现扩展lint功能：<br>①继承<code>IssueRegistry</code>：这是自定义Lint规则的主类或者叫注册类，有且仅有一个，用来注册这个自定义Lint项目中有哪些自定义的issue（issue就是需要lint检查出来并报告给用户的各种问题）需要被检测。<br>②继承<code>Detector</code>并选择Detector中合适的<code>XXXScanner</code>接口来实现：在这里根据自身业务需求，实现各种自定义探测器（Detector),并定义各种issue，根据自身需求的不同这样的类可以有一个或多个。</p> <p>事实上，Android系统默认的lint检查功能是通过BuiltinIssueRegistry类来定义的，在这个类的源码中可以看到定义的各种issue、detector，如图：<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-29/69265121.jpg" alt=""></p> <p><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-29/59960096.jpg" alt=""> </p> <p>com.android.tools.lint.detector.api.Detector提供了7种XXXScanner接口，根据自身需要选择合适的接口去实现，下面把这7个接口的信息列出：</p> <p>1、JavaScanner<br>功能：Specialized interface for detectors that scan Java source file parse trees<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-7/55021440.jpg" alt=""></p> <p>2、ClassScanner<br>功能：Specialized interface for detectors that scan Java class files<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-7/63801235.jpg" alt=""></p> <p>3、BinaryResourceScanner<br>功能：Specialized interface for detectors that scan binary resource files<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-7/31784308.jpg" alt=""></p> <p>4、ResourceFolderScanner<br>功能：Specialized interface for detectors that scan resource folders (the folder directory itself, not the individual files within it）<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-7/81593485.jpg" alt=""></p> <p>5、XmlScanner<br>功能：Specialized interface for detectors that scan XML files<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-7/1707982.jpg" alt=""></p> <p>6、GradleScanner<br>功能：Specialized interface for detectors that scan Gradle files<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-7/5157796.jpg" alt=""></p> <p>7、OtherFileScanner<br>功能：Specialized interface for detectors that scan other files<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-7/94526179.jpg" alt=""></p> <p><strong>实现自定义Lint规则的过程，实际上就是实现detector的过程，每个detector能够定义1个或多个不同类型的issue。</strong>也就是说，一个detector能够检测多种issue，这些issue在逻辑上是有关联的，但这些issue可以拥有不同的严重程度、描述等，并能够独立地被抑制(suppress，即禁用对该issue的检查）。</p> <h2 id="自定义lint实战">自定义lint实战</h2><p>下面简单演示一下开发一个自定义Lint规则的完整流程。 </p> <p>【1】在Android Studio中，打开或新建一个工程，然后点击【File -&gt; New -&gt; New Module】，在弹出窗口中选择新建一个Java Library，如图：<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-7/98524820.jpg" alt=""></p> <p><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-7/27544737.jpg" alt=""></p> <p>我们这里把Java Library命名为ljflintrules。</p> <p>【2】自定义lint规则需要继承一些特定的类，所以需要在ljflintrules的build.gradle中添加依赖:</p> <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">‘com.android.tools.lint:lint-api:24.3.1’</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">‘com.android.tools.lint:lint-checks:24.3.1’</span></span><br></pre></td></tr></table></figure> <p>【3】在ljflintrules中新建一个LoggerUsageDetector类，用来检测用户代码中是否使用了<code>android.util.Log</code>类，如果有，就报告一个issue，代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerUsageDetector</span> <span class="keyword">extends</span> <span class="title">Detector</span></span><br><span class="line"> <span class="keyword">implements</span> <span class="title">Detector</span>.<span class="title">ClassScanner</span> </span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Issue ISSUE = Issue.create(<span class="string">“LogUtilsNotUsed”</span>,</span><br><span class="line"> <span class="string">“You must use our <code>LogUtils</code>“</span>,</span><br><span class="line"> <span class="string">“Logging should be avoided in production for security and performance reasons. Therefore, we created a LogUtils that wraps all our calls to Logger and disable them for release flavor.”</span>,</span><br><span class="line"> Category.MESSAGES,</span><br><span class="line"> <span class="number">9</span>,</span><br><span class="line"> Severity.ERROR,</span><br><span class="line"> <span class="keyword">new</span> Implementation(LoggerUsageDetector.class,</span><br><span class="line"> Scope.CLASS_FILE_SCOPE));</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getApplicableCallNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> Arrays.asList(<span class="string">“v”</span>, <span class="string">“d”</span>, <span class="string">“i”</span>, <span class="string">“w”</span>, <span class="string">“e”</span>, <span class="string">“wtf”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getApplicableMethodNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> Arrays.asList(<span class="string">“v”</span>, <span class="string">“d”</span>, <span class="string">“i”</span>, <span class="string">“w”</span>, <span class="string">“e”</span>, <span class="string">“wtf”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkCall</span><span class="params">(@NonNull ClassContext context,</span><br><span class="line"> @NonNull ClassNode classNode,</span><br><span class="line"> @NonNull MethodNode method,</span><br><span class="line"> @NonNull MethodInsnNode call)</span> </span>&#123;</span><br><span class="line"> String owner = call.owner;</span><br><span class="line"> <span class="keyword">if</span> (owner.startsWith(<span class="string">“android/util/Log”</span>)) &#123;</span><br><span class="line"> context.report(ISSUE,</span><br><span class="line"> method,</span><br><span class="line"> call,</span><br><span class="line"> context.getLocation(call),</span><br><span class="line"> <span class="string">“You must use our <code>LogUtils</code>“</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>这段代码中，我们定义了一个ISSUE，定义时传入的6个参数意义如下：</p> <ul> <li><code>LogUtilsNotUseds</code>: 我们这条lint规则的id，这个id必须是独一无二的。 </li> <li><code>You must use our &#39;LogUtils&#39;</code>：对这条lint规则的简短描述。</li> <li><code>Logging should be avoided in production for security and performance reasons. Therefore, we created a LogUtils that wraps all our calls to Logger and disable them for release flavor.</code>：对这条lint规则更详细的解释。</li> <li><code>Category.MESSAGES</code>：类别。</li> <li><code>9</code>：优先级，必须在1到10之间。</li> <li><code>Severity.ERROR</code>：严重程度。其他可用的严重程度还有FATAL、WARNING、INFORMATIONAL、IGNORE。</li> <li><code>Implementation</code>：这是连接Detector与Scope的桥梁，其中Detector的功能是寻找issue，而scope定义了在什么范围内查找issue。在我们的例子中，我们需要在字节码级别分析用户有没有使用<code>android.util.Log</code>。</li> </ul> <p>这个类中针对字节码中的android/util/Log进行了检查，并在发现时报告LogUtilsNotUsed这个issue。你也可以在这个类中定义多个issue，然后在代码逻辑中（比如checkCall方法中）针对不同的情况，抛出不同的issue。也就是说，一个XXXDetector是可以报告多种issue的。<br>如果需要检测更多问题，你也可以定义更多的XXXDetector类。XXXDetector类可以有多个。</p> <p>【4】在ljflintrules中新建一个MyIssueRegistry类，它继承自<code>IssueRegistry</code>。这个类用来注册我们自己定义了哪些issue，这样lint在检查代码时才知道要针对哪些issue进行检查。代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIssueRegistry</span> <span class="keyword">extends</span> <span class="title">IssueRegistry</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;Issue&gt; <span class="title">getIssues</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> System.out.println(<span class="string">“!!!!!!!!!!!!! ljf MyIssueRegistry lint rules works”</span>);</span><br><span class="line"> <span class="keyword">return</span> Arrays.asList(LoggerUsageDetector.ISSUE);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>这个类中只有一个方法，就是返回一个List，其中包含了我们自定义的所有issue。<br>这里我们为了能够在控制台中清楚的看到我们自定义的lint规则是否被调用了，所以打印了一行提示信息。 </p> <p>【5】对于自定义lint生成的jar，我们必须在它的清单文件中指明它的主类。这里我们通过配置ljflintrules的build.gradle文件来完成这项工作：</p> <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jar &#123;</span><br><span class="line"> manifest &#123;</span><br><span class="line"> attributes(<span class="string">‘Lint-Registry’</span>: <span class="string">‘com.ljf.lintrules.MyIssueRegistry’</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>现在，你可以在控制台中通过命令<code>./gradlew ljflintrules:assemble</code>来执行编译任务，就可以输出我们需要的jar文件了。你可以在ljflintrules工程目录的<code>build/libs/</code>下找到ljflintrules.jar。 </p> <p>如果你想验证这个jar文件是不是真的有效，可以把它拷贝到<code>~/.android/lint/</code>目录下，然后在终端中输入<code>lint –show LogUtilsNotUsed</code>看看有没有输出我们定义的issue信息，有则表明自定义lint成功，如图：<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-8/27617933.jpg" alt=""></p> <p>测试完后记得把它从<code>~/.android/lint/</code>中删除。</p> <p>【6】由于我们要把上一步生成的jar文件包含到一个aar中便于用户使用，所以我们还要在ljflintrules的build.gradle文件中添加以下信息：</p> <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">configurations</span> &#123;</span><br><span class="line"> lintJarOutput</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line"> lintJarOutput files(jar)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">defaultTasks <span class="string">‘assemble’</span></span><br></pre></td></tr></table></figure> <p>经过以上所有步骤，现在ljflintrules的build.gradle文件看起来是这样的：</p> <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">‘java’</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line"> <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">‘libs’</span>, <span class="keyword">include</span>: [<span class="string">‘<em>.jar’</em></span>])</span><br><span class="line"> <span class="keyword">compile</span> <span class="string">‘com.android.tools.lint:lint-api:24.3.1’</span></span><br><span class="line"> <span class="keyword">compile</span> <span class="string">‘com.android.tools.lint:lint-checks:24.3.1’</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jar &#123;</span><br><span class="line"> manifest &#123;</span><br><span class="line"> attributes(<span class="string">‘Lint-Registry’</span>: <span class="string">‘com.ljf.lintrules.MyIssueRegistry’</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">configurations</span> &#123;</span><br><span class="line"> lintJarOutput</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line"> lintJarOutput files(jar)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">defaultTasks <span class="string">‘assemble’</span></span><br></pre></td></tr></table></figure> <p>【7】新建一个Android Library项目，命名为ljflintrule_aar，用来输出aar，步骤如下：<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-7/98524820.jpg" alt=""></p> <p><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-8/8544219.jpg" alt=""></p> <p>在ljflintrule_aar的build.gradle的根节点加入以下内容：</p> <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/</span><br><span class="line"> <em> rules for including “lint.jar” in aar</em></span><br><span class="line"> /</span></span><br><span class="line"><span class="keyword">configurations</span> &#123;</span><br><span class="line"> lintJarImport</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line"> lintJarImport <span class="keyword">project</span>(path: <span class="string">“:ljflintrules”</span>, configuration: <span class="string">“lintJarOutput”</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> copyLintJar(type: <span class="keyword">Copy</span>) &#123;</span><br><span class="line"> <span class="keyword">from</span> (<span class="keyword">configurations</span>.lintJarImport) &#123;</span><br><span class="line"> rename &#123;</span><br><span class="line"> String fileName -&gt;</span><br><span class="line"> <span class="string">‘lint.jar’</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">into</span> <span class="string">‘build/intermediates/lint/‘</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>.afterEvaluate &#123;</span><br><span class="line"> <span class="keyword">def</span> compileLintTask = <span class="keyword">project</span>.tasks.<span class="keyword">find</span> &#123; it.name == <span class="string">‘compileLint’</span> &#125;</span><br><span class="line"> compileLintTask.dependsOn(copyLintJar)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>如果这时再编译项目，就会在ljflintrule_aar的输出目录中得到一个包含lint.jar的aar文件，这里的lint.jar就是我们在第5步中生成的ljflintrules.jar，只是换了个名字。</p> <p>【8】在用户app中使用我们的自定义lint。<br>在用户自己的应用程序module中（我们这里就使用app module），打开app的build.gradle文件，在dependencies中加入以下依赖： </p> <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">‘:ljflintrule_aar’</span>)</span><br></pre></td></tr></table></figure> <p>这里我们在app的MainActivity中使用了android自带的Log功能：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"> setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line"> Log.d(<span class="string">“tag”</span>, <span class="string">“dasfadsf”</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>在终端中，我们执行<code>./gradlew lint</code>来执行lint任务，可以在终端中看到以下输出：<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-8/11713429.jpg" alt=""></p> <p>输出中指出发现了1个error和2个warning，并给出了详细报告的地址。</p> <p>我们在浏览器中打开html格式的详细报告，如下图所示：<br><img src="http://7xle8x.com1.z0.glb.clouddn.com/16-1-8/9825338.jpg" alt=""></p> <p>以上8个步骤完整演示了如何自定义lint并使用它。</p> <h2 id="小结">小结</h2><p>本文对于自定义Lint规则的介绍主要是集中在总体开发流程，给出了一个简单的实例。在实际开发过程中，我们比较常见的需求是针对xml布局文件、java源代码等内容进行某些检查，受Lint开发API的限制需要用到AST的相关知识，以及lombok.ast开源库。由于lombok.ast开源库几乎无文档可用，所以还是需要花一定时间来阅读这个库的源码，并熟悉SDK自带的Lint源码如何使用这个库。如果你对自定义Lint感兴趣，可以关注下一篇文章的相关介绍。</p>

<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/浅谈Android自定义Lint规则的实现（一）/">https://fengqingxiuyi.github.io/2016/08/22/Android/Lint/浅谈Android自定义Lint规则的实现（一）/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文转载自：&lt;a href=&quot;http://www.carrotsight.com/2016/01/29/浅谈Android自定义Lint规则的实现%20（一）.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅谈Android自定义Lint规
    
    </summary>
    
      <category term="Android_Lint" scheme="https://fengqingxiuyi.github.io/categories/Android-Lint/"/>
    
    
  </entry>
  
  <entry>
    <title>尚妆统一图片压缩库算法说明</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/20/Android/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/%E5%B0%9A%E5%A6%86%E7%BB%9F%E4%B8%80%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%BA%93%E7%AE%97%E6%B3%95%E8%AF%B4%E6%98%8E/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/20/Android/图片压缩/尚妆统一图片压缩库算法说明/</id>
    <published>2016-08-20T03:19:35.000Z</published>
    <updated>2016-08-20T03:30:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="http://git.showjoy.net/android/showjoyandroid_compress" target="_blank" rel="external">尚妆统一图片压缩库</a></p>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>本图片压缩库的算法基于<a href="https://github.com/Curzibn/Luban/blob/master/DESCRIPTION.md" target="_blank" rel="external">Luban算法步骤</a>稍作改进。</p>
<h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><p>从网上下载的81张不同尺寸的图片，依次分享到微信朋友圈，再保存到手机上，然后进行数据统计。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><h3 id="朋友圈图片压缩后比例变化"><a href="#朋友圈图片压缩后比例变化" class="headerlink" title="朋友圈图片压缩后比例变化"></a>朋友圈图片压缩后比例变化</h3><p><img src="../../../../../../images/Android/图片压缩/图片压缩比例变化.png" alt="图片压缩比例变化"></p>
<h3 id="朋友圈图片压缩后尺寸变化"><a href="#朋友圈图片压缩后尺寸变化" class="headerlink" title="朋友圈图片压缩后尺寸变化"></a>朋友圈图片压缩后尺寸变化</h3><p><img src="../../../../../../images/Android/图片压缩/图片压缩尺寸变化.png" alt="图片压缩尺寸变化"></p>
<h3 id="朋友圈图片压缩数据统计表"><a href="#朋友圈图片压缩数据统计表" class="headerlink" title="朋友圈图片压缩数据统计表"></a>朋友圈图片压缩数据统计表</h3><p><a href="../../../../../../file/Android/图片压缩/朋友圈图片压缩数据统计表.xlsx">朋友圈图片压缩数据统计表</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/20/Android/图片压缩/尚妆统一图片压缩库算法说明/">https://fengqingxiuyi.github.io/2016/08/20/Android/图片压缩/尚妆统一图片压缩库算法说明/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;项目地址&quot;&gt;&lt;a href=&quot;#项目地址&quot; class=&quot;headerlink&quot; title=&quot;项目地址&quot;&gt;&lt;/a&gt;项目地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://git.showjoy.net/android/showjoyandroid_compres
    
    </summary>
    
      <category term="Android_图片压缩" scheme="https://fengqingxiuyi.github.io/categories/Android-%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/"/>
    
    
  </entry>
  
  <entry>
    <title>vi_vim命令</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/%E5%91%BD%E4%BB%A4/vi_vim/vi_vim%E5%91%BD%E4%BB%A4/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/命令/vi_vim/vi_vim命令/</id>
    <published>2016-08-15T14:21:19.000Z</published>
    <updated>2016-08-15T14:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：已经忘记转载自哪里了，表示抱歉，查了很多文章，都不是完全一样。本文仅用作记录。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>vi（vim）是上Linux非常常用的编辑器，很多Linux发行版都默认安装了vi(vim)。vi(vim)命令繁多但是如果使用灵活之后将会大大提高效率。vi是“visual interface”的缩写，vim是vi IMproved(增强版的vi)。在一般的系统管理维护中vi就够用，如果想使用代码加亮的话可以使用vim。</p>
<h1 id="vi的3个模式"><a href="#vi的3个模式" class="headerlink" title="vi的3个模式"></a>vi的3个模式</h1><p>1）插入模式：在此模式下可以输入字符，按ESC将回到命令模式。<br>2）命令模式：可以移动光标、删除字符等。<br>3）低行模式：可以保存文件、退出vi、设置vi、查找等功能(低行模式也可以看作是命令模式里的)。</p>
<h1 id="vi命令大全"><a href="#vi命令大全" class="headerlink" title="vi命令大全"></a>vi命令大全</h1><p><img src="../../../../../../images/命令/vi_vim/vi_vim命令.jpg" alt="vi_vim命令.jpg"></p>
<h1 id="进入vi的命令"><a href="#进入vi的命令" class="headerlink" title="进入vi的命令"></a>进入vi的命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vi filename :打开或新建文件，并将光标置于第一行首</div><div class="line">vi +n filename ：打开文件，并将光标置于第n行首</div><div class="line">vi + filename ：打开文件，并将光标置于最后一行首</div><div class="line">vi +/pattern filename：打开文件，并将光标置于第一个与pattern匹配的串处</div><div class="line">vi -r filename ：在上次正用vi编辑时发生系统崩溃，恢复filename</div><div class="line">vi -o/O filename1 filename2 ... ：打开多个文件，依次进行编辑</div></pre></td></tr></table></figure>
<h1 id="vi-关闭文件"><a href="#vi-关闭文件" class="headerlink" title="vi 关闭文件"></a>vi 关闭文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">:w       //保存文件</div><div class="line">:w vpser.net //保存至vpser.net文件</div><div class="line">:q          //退出编辑器，如果文件已修改请使用下面的命令</div><div class="line">:q!        //退出编辑器，且不保存</div><div class="line">:wq         //退出编辑器，且保存文件</div></pre></td></tr></table></figure>
<h1 id="移动光标类命令"><a href="#移动光标类命令" class="headerlink" title="移动光标类命令"></a>移动光标类命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">h ：光标左移一个字符</div><div class="line">l ：光标右移一个字符</div><div class="line">space：光标右移一个字符</div><div class="line">Backspace：光标左移一个字符</div><div class="line">k或Ctrl+p：光标上移一行</div><div class="line">j或Ctrl+n ：光标下移一行</div><div class="line">Enter ：光标下移一行</div><div class="line">w或W ：光标右移一个字至字首</div><div class="line">b或B ：光标左移一个字至字首</div><div class="line">e或E ：光标右移一个字至字尾</div><div class="line">) ：光标移至句尾</div><div class="line">( ：光标移至句首</div><div class="line">&#125;：光标移至段落开头</div><div class="line">&#123;：光标移至段落结尾</div><div class="line">nG：光标移至第n行首</div><div class="line">n+：光标下移n行</div><div class="line">n-：光标上移n行</div><div class="line">n$：光标移至第n行尾</div><div class="line">H ：光标移至屏幕顶行</div><div class="line">M ：光标移至屏幕中间行</div><div class="line">L ：光标移至屏幕最后行</div><div class="line">0：（注意是数字零）光标移至当前行首</div><div class="line">$：光标移至当前行尾</div><div class="line">n+        //向下跳n行</div><div class="line">n-         //向上跳n行</div><div class="line">nG        //跳到行号为n的行</div><div class="line">G           //跳至文件的底部</div></pre></td></tr></table></figure>
<h1 id="屏幕翻滚类命令"><a href="#屏幕翻滚类命令" class="headerlink" title="屏幕翻滚类命令"></a>屏幕翻滚类命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Ctrl+u：向文件首翻半屏</div><div class="line">Ctrl+d：向文件尾翻半屏</div><div class="line">Ctrl+f：向文件尾翻一屏</div><div class="line">Ctrl＋b；向文件首翻一屏</div><div class="line">nz：将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部。</div></pre></td></tr></table></figure>
<h1 id="插入文本类命令"><a href="#插入文本类命令" class="headerlink" title="插入文本类命令"></a>插入文本类命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">i ：在光标前</div><div class="line">I ：在当前行首</div><div class="line">a：光标后</div><div class="line">A：在当前行尾</div><div class="line">o：在当前行之下新开一行</div><div class="line">O：在当前行之上新开一行</div><div class="line">r：替换当前字符</div><div class="line">R：替换当前字符及其后的字符，直至按ESC键</div><div class="line">s：从当前光标位置处开始，以输入的文本替代指定数目的字符</div><div class="line">S：删除指定数目的行，并以所输入文本代替之</div><div class="line">ncw或nCW：修改指定数目的字</div><div class="line">nCC：修改指定数目的行</div></pre></td></tr></table></figure>
<h1 id="复制、粘贴"><a href="#复制、粘贴" class="headerlink" title="复制、粘贴"></a>复制、粘贴</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">yy    //将当前行复制到缓存区，也可以用 <span class="string">"ayy 复制，"</span>a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。</div><div class="line">nyy   //将当前行向下n行复制到缓冲区，也可以用 <span class="string">"anyy 复制，"</span>a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。</div><div class="line">yw    //复制从光标开始到词尾的字符。</div><div class="line">nyw   //复制从光标开始的n个单词。</div><div class="line">y^      //复制从光标到行首的内容。  </div><div class="line">y$      //复制从光标到行尾的内容。</div><div class="line">p        //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用<span class="string">"ap 进行粘贴。</span></div><div class="line">P        //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用"aP 进行粘贴。</div></pre></td></tr></table></figure>
<h1 id="文本替换"><a href="#文本替换" class="headerlink" title="文本替换"></a>文本替换</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">:s/old/new      //用new替换行中首次出现的old</div><div class="line">:s/old/new/g         //用new替换行中所有的old</div><div class="line">:n,m s/old/new/g     //用new替换从n到m行里所有的old</div><div class="line">:%s/old/new/g      //用new替换当前文件里所有的old</div></pre></td></tr></table></figure>
<h1 id="简单替换表达式"><a href="#简单替换表达式" class="headerlink" title="简单替换表达式"></a>简单替换表达式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">        :%s/four/4/g</div><div class="line">“%” 范围前缀表示在所有行中执行替换，最后的 “g” 标记表示替换行中的所有匹配点，如果仅仅对当前行进行操作，那么只要去掉%即可</div><div class="line"></div><div class="line">如果你有一个像 “thirtyfour” 这样的单词，上面的命令会出错。这种情况下，这个单词会被替换成”thirty4″。要解决这个问题，用 “&lt;”来指定匹配单词开头：</div><div class="line">         :%s/&lt;four/4/g</div><div class="line">显然，这样在处理 “fourty” 的时候还是会出错。用 “&gt;” 来解决这个问题：</div><div class="line">        :%s/&lt;four&gt;/4/g</div><div class="line">如果你在编码，你可能只想替换注释中的 “four”，而保留代码中的。由于这很难指定，可以在替换命令中加一个 “c” 标记，这样，Vim 会在每次替换前提示你：</div><div class="line">        :%s/&lt;four&gt;/4/gc</div><div class="line">单词精确匹配替换</div><div class="line">sed <span class="_">-e</span> <span class="string">"s/\&lt;old\&gt;/new/g"</span>  file</div></pre></td></tr></table></figure>
<h1 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ndw或ndW：删除光标处开始及其后的n-1个字</div><div class="line"><span class="keyword">do</span>：删至行首</div><div class="line">d$：删至行尾</div><div class="line">ndd：删除当前行及其后n-1行</div><div class="line">x或X：删除一个字符，x删除光标后的，而X删除光标前的</div><div class="line">Ctrl+u：删除输入方式下所输入的文本</div><div class="line">x         //删除当前字符</div><div class="line">nx         //删除从光标开始的n个字符</div><div class="line">dd       //删除当前行</div><div class="line">ndd     //向下删除当前行在内的n行</div><div class="line">u        //撤销上一步操作</div><div class="line">U       //撤销对当前行的所有操作</div></pre></td></tr></table></figure>
<h1 id="搜索及替换命令"><a href="#搜索及替换命令" class="headerlink" title="搜索及替换命令"></a>搜索及替换命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/pattern：从光标开始处向文件尾搜索pattern</div><div class="line">?pattern：从光标开始处向文件首搜索pattern</div><div class="line">n：在同一方向重复上一次搜索命令</div><div class="line">N：在反方向上重复上一次搜索命令</div><div class="line">：s/p1/p2/g：将当前行中所有p1均用p2替代</div><div class="line">：n1,n2s/p1/p2/g：将第n1至n2行中所有p1均用p2替代</div><div class="line">：g/p1/s//p2/g：将文件中所有p1均用p2替换</div></pre></td></tr></table></figure>
<h1 id="选项设置"><a href="#选项设置" class="headerlink" title="选项设置"></a>选项设置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">all：列出所有选项设置情况</div><div class="line">term：设置终端类型</div><div class="line">ignorance：在搜索中忽略大小写</div><div class="line">list：显示制表位(Ctrl+I)和行尾标志（$)</div><div class="line">number：显示行号</div><div class="line">report：显示由面向行的命令修改过的数目</div><div class="line">terse：显示简短的警告信息</div><div class="line">warn：在转到别的文件时若没保存当前文件则显示NO write信息</div><div class="line">nomagic：允许在搜索模式中，使用前面不带“/”的特殊字符</div><div class="line">nowrapscan：禁止vi在搜索到达文件两端时，又从另一端开始</div><div class="line">mesg：允许vi显示其他用户用write写到自己终端上的信息</div></pre></td></tr></table></figure>
<h1 id="最后行方式命令"><a href="#最后行方式命令" class="headerlink" title="最后行方式命令"></a>最后行方式命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">：n1,n2 co n3：将n1行到n2行之间的内容拷贝到第n3行下</div><div class="line">：n1,n2 m n3：将n1行到n2行之间的内容移至到第n3行下</div><div class="line">：n1,n2 d ：将n1行到n2行之间的内容删除</div><div class="line">：w ：保存当前文件</div><div class="line">：e filename：打开文件filename进行编辑</div><div class="line">：x：保存当前文件并退出</div><div class="line">：q：退出vi</div><div class="line">：q!：不保存文件并退出vi</div><div class="line">：!<span class="built_in">command</span>：执行shell命令<span class="built_in">command</span></div><div class="line">：n1,n2 w!<span class="built_in">command</span>：将文件中n1行至n2行的内容作为<span class="built_in">command</span>的输入并执行之，若不指定n1，n2，则表示将整个文件内容作为<span class="built_in">command</span>的输入</div><div class="line">：r!<span class="built_in">command</span>：将命令<span class="built_in">command</span>的输出结果放到当前行</div></pre></td></tr></table></figure>
<h1 id="寄存器操作"><a href="#寄存器操作" class="headerlink" title="寄存器操作"></a>寄存器操作</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">“?nyy：将当前行及其下n行的内容保存到寄存器？中，其中?为一个字母，n为一个数字</div><div class="line">“?nyw：将当前行及其下n个字保存到寄存器？中，其中?为一个字母，n为一个数字</div><div class="line">“?nyl：将当前行及其下n个字符保存到寄存器？中，其中?为一个字母，n为一个数字</div><div class="line">“?p：取出寄存器？中的内容并将其放到光标位置处。这里？可以是一个字母，也可以是一个数字</div><div class="line">ndd：将当前行及其下共n行文本删除，并将所删内容放到1号删除寄存器中。</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/命令/vi_vim/vi_vim命令/">https://fengqingxiuyi.github.io/2016/08/15/命令/vi_vim/vi_vim命令/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：已经忘记转载自哪里了，表示抱歉，查了很多文章，都不是完全一样。本文仅用作记录。&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;vi（vim）是上Linux非常常用的编辑
    
    </summary>
    
      <category term="命令_vi_vim" scheme="https://fengqingxiuyi.github.io/categories/%E5%91%BD%E4%BB%A4-vi-vim/"/>
    
    
  </entry>
  
  <entry>
    <title>常用Git命令清单</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/%E5%91%BD%E4%BB%A4/Git/%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/命令/Git/常用Git命令清单/</id>
    <published>2016-08-15T14:21:19.000Z</published>
    <updated>2016-08-15T16:01:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文转载自<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">常用 Git 命令清单</a>，本文仅用作记录。</p>
<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。详见下图：</p>
<p><img src="../../../../../../images/命令/Git/Git操作流程图.png" alt="Git操作流程图"></p>
<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。<br>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p>
<h1 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></div><div class="line">$ git init</div><div class="line"></div><div class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></div><div class="line">$ git init [project-name]</div><div class="line"></div><div class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></div><div class="line">$ git <span class="built_in">clone</span> [url]</div></pre></td></tr></table></figure>
<h1 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h1><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示当前的Git配置</span></div><div class="line">$ git config --list</div><div class="line"></div><div class="line"><span class="comment"># 编辑Git配置文件</span></div><div class="line">$ git config <span class="_">-e</span> [--global]</div><div class="line"></div><div class="line"><span class="comment"># 设置提交代码时的用户信息</span></div><div class="line">$ git config [--global] user.name <span class="string">"[name]"</span></div><div class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></div></pre></td></tr></table></figure>
<h1 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加指定文件到暂存区</span></div><div class="line">$ git add [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></div><div class="line">$ git add [dir]</div><div class="line"></div><div class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></div><div class="line">$ git add .</div><div class="line"></div><div class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></div><div class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></div><div class="line">$ git add -p</div><div class="line"></div><div class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></div><div class="line">$ git rm [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></div><div class="line">$ git rm --cached [file]</div><div class="line"></div><div class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></div><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
<h1 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 提交暂存区到仓库区</span></div><div class="line">$ git commit -m [message]</div><div class="line"></div><div class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></div><div class="line">$ git commit [file1] [file2] ... -m [message]</div><div class="line"></div><div class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></div><div class="line">$ git commit <span class="_">-a</span></div><div class="line"></div><div class="line"><span class="comment"># 提交时显示所有diff信息</span></div><div class="line">$ git commit -v</div><div class="line"></div><div class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></div><div class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></div><div class="line">$ git commit --amend -m [message]</div><div class="line"></div><div class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></div><div class="line">$ git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure>
<h1 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有本地分支</span></div><div class="line">$ git branch</div><div class="line"></div><div class="line"><span class="comment"># 列出所有远程分支</span></div><div class="line">$ git branch -r</div><div class="line"></div><div class="line"><span class="comment"># 列出所有本地分支和远程分支</span></div><div class="line">$ git branch <span class="_">-a</span></div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></div><div class="line">$ git branch [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></div><div class="line">$ git checkout -b [branch]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，指向指定commit</span></div><div class="line">$ git branch [branch] [commit]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></div><div class="line">$ git branch --track [branch] [remote-branch]</div><div class="line"></div><div class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></div><div class="line">$ git checkout [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 切换到上一个分支</span></div><div class="line">$ git checkout -</div><div class="line"></div><div class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></div><div class="line">$ git branch --set-upstream [branch] [remote-branch]</div><div class="line"></div><div class="line"><span class="comment"># 合并指定分支到当前分支</span></div><div class="line">$ git merge [branch]</div><div class="line"></div><div class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></div><div class="line">$ git cherry-pick [commit]</div><div class="line"></div><div class="line"><span class="comment"># 删除分支</span></div><div class="line">$ git branch <span class="_">-d</span> [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 删除远程分支</span></div><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote/branch]</div></pre></td></tr></table></figure>
<h1 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有tag</span></div><div class="line">$ git tag</div><div class="line"></div><div class="line"><span class="comment"># 新建一个tag在当前commit</span></div><div class="line">$ git tag [tag]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个tag在指定commit</span></div><div class="line">$ git tag [tag] [commit]</div><div class="line"></div><div class="line"><span class="comment"># 删除本地tag</span></div><div class="line">$ git tag <span class="_">-d</span> [tag]</div><div class="line"></div><div class="line"><span class="comment"># 删除远程tag</span></div><div class="line">$ git push origin :refs/tags/[tagName]</div><div class="line"></div><div class="line"><span class="comment"># 查看tag信息</span></div><div class="line">$ git show [tag]</div><div class="line"></div><div class="line"><span class="comment"># 提交指定tag</span></div><div class="line">$ git push [remote] [tag]</div><div class="line"></div><div class="line"><span class="comment"># 提交所有tag</span></div><div class="line">$ git push [remote] --tags</div><div class="line"></div><div class="line"><span class="comment"># 新建一个分支，指向某个tag</span></div><div class="line">$ git checkout -b [branch] [tag]</div></pre></td></tr></table></figure>
<h1 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示有变更的文件</span></div><div class="line">$ git status</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的版本历史</span></div><div class="line">$ git <span class="built_in">log</span></div><div class="line"></div><div class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></div><div class="line">$ git <span class="built_in">log</span> --stat</div><div class="line"></div><div class="line"><span class="comment"># 搜索提交历史，根据关键词</span></div><div class="line">$ git <span class="built_in">log</span> -S [keyword]</div><div class="line"></div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</div><div class="line"></div><div class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></div><div class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</div><div class="line"></div><div class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></div><div class="line">$ git <span class="built_in">log</span> --follow [file]</div><div class="line">$ git whatchanged [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></div><div class="line">$ git <span class="built_in">log</span> -p [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示过去5次提交</span></div><div class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</div><div class="line"></div><div class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></div><div class="line">$ git shortlog -sn</div><div class="line"></div><div class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></div><div class="line">$ git blame [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和工作区的差异</span></div><div class="line">$ git diff</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></div><div class="line">$ git diff --cached [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></div><div class="line">$ git diff HEAD</div><div class="line"></div><div class="line"><span class="comment"># 显示两次提交之间的差异</span></div><div class="line">$ git diff [first-branch]...[second-branch]</div><div class="line"></div><div class="line"><span class="comment"># 显示今天你写了多少行代码</span></div><div class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></div><div class="line">$ git show [commit]</div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交发生变化的文件</span></div><div class="line">$ git show --name-only [commit]</div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></div><div class="line">$ git show [commit]:[filename]</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的最近几次提交</span></div><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<h1 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 下载远程仓库的所有变动</span></div><div class="line">$ git fetch [remote]</div><div class="line"></div><div class="line"><span class="comment"># 显示所有远程仓库</span></div><div class="line">$ git remote -v</div><div class="line"></div><div class="line"><span class="comment"># 显示某个远程仓库的信息</span></div><div class="line">$ git remote show [remote]</div><div class="line"></div><div class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></div><div class="line">$ git remote add [shortname] [url]</div><div class="line"></div><div class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></div><div class="line">$ git pull [remote] [branch]</div><div class="line"></div><div class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></div><div class="line">$ git push [remote] [branch]</div><div class="line"></div><div class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></div><div class="line">$ git push [remote] --force</div><div class="line"></div><div class="line"><span class="comment"># 推送所有分支到远程仓库</span></div><div class="line">$ git push [remote] --all</div></pre></td></tr></table></figure>
<h1 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></div><div class="line">$ git checkout [file]</div><div class="line"></div><div class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></div><div class="line">$ git checkout [commit] [file]</div><div class="line"></div><div class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></div><div class="line">$ git checkout .</div><div class="line"></div><div class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></div><div class="line">$ git reset [file]</div><div class="line"></div><div class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></div><div class="line">$ git reset --hard</div><div class="line"></div><div class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></div><div class="line">$ git reset [commit]</div><div class="line"></div><div class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></div><div class="line">$ git reset --hard [commit]</div><div class="line"></div><div class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></div><div class="line">$ git reset --keep [commit]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></div><div class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></div><div class="line">$ git revert [commit]</div><div class="line"></div><div class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></div><div class="line">$ git stash</div><div class="line">$ git stash pop</div></pre></td></tr></table></figure>
<h1 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成一个可供发布的压缩包</span></div><div class="line">$ git archive</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/命令/Git/常用Git命令清单/">https://fengqingxiuyi.github.io/2016/08/15/命令/Git/常用Git命令清单/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文转载自&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用 Git 命令清单&lt;/a&gt;，本文仅用作记录。&lt;/p&gt;

    
    </summary>
    
      <category term="命令_Git" scheme="https://fengqingxiuyi.github.io/categories/%E5%91%BD%E4%BB%A4-Git/"/>
    
    
  </entry>
  
  <entry>
    <title>ADB命令</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/%E5%91%BD%E4%BB%A4/ADB/ADB%E5%91%BD%E4%BB%A4/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/命令/ADB/ADB命令/</id>
    <published>2016-08-15T14:17:19.000Z</published>
    <updated>2016-08-15T14:34:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文<code>常用命令</code>部分转载自<a href="http://zmywly8866.github.io/2015/01/24/all-adb-command.html" target="_blank" rel="external">Android ADB命令大全(通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等)</a>，本文仅用作记录。</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">获取序列号：adb get-serialno</div><div class="line">查看连接计算机的设备：adb devices</div><div class="line">重启机器：adb reboot</div><div class="line">重启到bootloader，即刷机模式：adb reboot bootloader</div><div class="line">重启到recovery，即恢复模式：adb reboot recovery</div><div class="line">查看<span class="built_in">log</span>：adb logcat</div><div class="line">终止adb服务进程：adb <span class="built_in">kill</span>-server</div><div class="line">重启adb服务进程：adb start-server</div><div class="line">获取机器MAC地址：adb shell  cat /sys/class/net/wlan0/address</div><div class="line">获取CPU序列号：adb shell cat /proc/cpuinfo</div><div class="line">安装APK：adb install &lt;apkfile&gt; //比如：adb install baidu.apk</div><div class="line">保留数据和缓存文件，重新安装apk：adb install -r &lt;apkfile&gt; //比如：adb install -r baidu.apk</div><div class="line">安装apk到sd卡：adb install <span class="_">-s</span> &lt;apkfile&gt; // 比如：adb install <span class="_">-s</span> baidu.apk</div><div class="line">卸载APK：adb uninstall &lt;package&gt; //比如：adb uninstall com.baidu.search</div><div class="line">卸载app但保留数据和缓存文件：adb uninstall -k &lt;package&gt; //比如：adb uninstall -k com.baidu.search</div><div class="line">启动应用：adb shell am start -n &lt;package_name&gt;/.&lt;activity_class_name&gt;</div><div class="line">查看设备cpu和内存占用情况：adb shell top</div><div class="line">查看占用内存前6的app：adb shell top -m 6</div><div class="line">刷新一次内存信息，然后返回：adb shell top -n 1</div><div class="line">查询各进程内存使用情况：adb shell procrank</div><div class="line">杀死一个进程：adb shell <span class="built_in">kill</span> [pid]</div><div class="line">查看进程列表：adb shell ps</div><div class="line">查看指定进程状态：adb shell ps -x [PID]</div><div class="line">查看后台services信息：adb shell service list</div><div class="line">查看当前内存占用：adb shell cat /proc/meminfo</div><div class="line">查看IO内存分区：adb shell cat /proc/iomem</div><div class="line">将system分区重新挂载为可读写分区：adb remount</div><div class="line">从本地复制文件到设备：adb push &lt;<span class="built_in">local</span>&gt; &lt;remote&gt;</div><div class="line">从设备复制文件到本地：adb pull &lt;remote&gt;  &lt;<span class="built_in">local</span>&gt;</div><div class="line">列出目录下的文件和文件夹，等同于dos中的dir命令：adb shell ls</div><div class="line">进入文件夹，等同于dos中的<span class="built_in">cd</span> 命令：adb shell <span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">重命名文件：adb shell rename path/oldfilename path/newfilename</div><div class="line">删除system/avi.apk：adb shell rm /system/avi.apk</div><div class="line">删除文件夹及其下面所有文件：adb shell rm -r &lt;folder&gt;</div><div class="line">移动文件：adb shell mv path/file newpath/file</div><div class="line">设置文件权限：adb shell chmod 777 /system/fonts/DroidSansFallback.ttf</div><div class="line">新建文件夹：adb shell mkdir path/foldelname</div><div class="line">查看文件内容：adb shell cat &lt;file&gt;</div><div class="line">查看wifi密码：adb shell cat /data/misc/wifi/*.conf</div><div class="line">清除<span class="built_in">log</span>缓存：adb logcat -c</div><div class="line">查看bug报告：adb bugreport</div><div class="line">获取设备名称：adb shell cat /system/build.prop</div><div class="line">查看ADB帮助：adb <span class="built_in">help</span></div><div class="line">跑monkey：adb shell monkey -v -p your.package.name 500</div></pre></td></tr></table></figure>
<h1 id="开发所需命令"><a href="#开发所需命令" class="headerlink" title="开发所需命令"></a>开发所需命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1、adb shell dumpsys activity | grep mFocusedActivity：获取真机显示页面的Activity名称，例如：mFocusedActivity: ActivityRecord&#123;4801e67 u0 com.showjoy.ggl/.module.home.MainActivity t867&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/命令/ADB/ADB命令/">https://fengqingxiuyi.github.io/2016/08/15/命令/ADB/ADB命令/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文&lt;code&gt;常用命令&lt;/code&gt;部分转载自&lt;a href=&quot;http://zmywly8866.github.io/2015/01/24/all-adb-command.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android AD
    
    </summary>
    
      <category term="命令_ADB" scheme="https://fengqingxiuyi.github.io/categories/%E5%91%BD%E4%BB%A4-ADB/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac技巧</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/%E5%BF%AB%E6%8D%B7%E9%94%AE/Mac/Mac%E6%8A%80%E5%B7%A7/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/快捷键/Mac/Mac技巧/</id>
    <published>2016-08-15T14:11:19.000Z</published>
    <updated>2016-08-15T14:33:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文仅用作记录。</p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1、⇧：代表的是<span class="built_in">shift</span>键</div><div class="line">2、⌥：代表的是option键</div><div class="line">3、⌘：代表的是<span class="built_in">command</span>键</div></pre></td></tr></table></figure>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1、⇧⌘c：打开Mac的“我的电脑”</div><div class="line">2、⇧⌘g：前往自定义路径的文件夹</div><div class="line">3、先⌘c再⌥⌘v：剪切</div><div class="line">4、⌘x：剪切文字文本一类的</div><div class="line">5、⌘[：倒退到上一步，如网页之间的前进与后退</div><div class="line">6、⌘]：前进到下一步，如网页之间的前进与后退</div><div class="line">7、OS X常用快捷键：/Volumes/MAIN/qingfeng/Data/技术文章/OS X常用快捷键.jpg</div><div class="line">￼</div><div class="line">8、Mac 键盘快捷键：https://support.apple.com/zh-cn/HT201236</div></pre></td></tr></table></figure>
<h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1、开启窗口三指拖拽功能：系统偏好设置-&gt;辅助功能-&gt;左边窗口中的“鼠标与触控板”-&gt;右下角的“触控板选项…”-&gt;勾选“启用拖移”并设置为“三指拖移”然后点击“好”即可</div></pre></td></tr></table></figure>
<h1 id="OS-X常用快捷键"><a href="#OS-X常用快捷键" class="headerlink" title="OS X常用快捷键"></a>OS X常用快捷键</h1><p><img src="../../../../../../images/快捷键/Mac/OSX常用快捷键.jpg" alt="OS X常用快捷键"></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/快捷键/Mac/Mac技巧/">https://fengqingxiuyi.github.io/2016/08/15/快捷键/Mac/Mac技巧/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文仅用作记录。&lt;/p&gt;
&lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
    
    </summary>
    
      <category term="快捷键_Mac" scheme="https://fengqingxiuyi.github.io/categories/%E5%BF%AB%E6%8D%B7%E9%94%AE-Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>AndroidStudio快捷键</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/%E5%BF%AB%E6%8D%B7%E9%94%AE/AndroidStudio/AndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/快捷键/AndroidStudio/AndroidStudio快捷键/</id>
    <published>2016-08-15T14:08:19.000Z</published>
    <updated>2016-08-15T14:34:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：已经不知道是转载的谁的了，表示抱歉，其中有一大部分和网上的应该是一样的，但是结尾部分有所不同，有兴趣的可以看一下，本文仅用作记录。</p>
<h1 id="查找／查看相关"><a href="#查找／查看相关" class="headerlink" title="查找／查看相关"></a>查找／查看相关</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">⌘O: 全局查找class类名</div><div class="line">⌘F: 在当前编辑文件中查找</div><div class="line">⌘F12: 当前编辑的文件中结构快速导航</div><div class="line">⌘E: 打开最近访问的文件列表</div><div class="line">⌥⌘O: 输入类名／方法名／字段名来查找任何匹配的类／方法／字段</div><div class="line">⇧⌘O: 全局项目查找文件（类／资源文件／布局文件都通过该快捷键查找）</div><div class="line">⌃H: 查看当前编辑class类的hierarchy结构</div><div class="line">⌥F7: 列出全局项目中该类／方法 被引用／调用的情况</div><div class="line">⌥⌘F7: 列出全局项目中该类／方法 被引用／调用的情况</div><div class="line">⌃⌥H: 方法被调用结构［method’s Call Hierarchy］</div><div class="line">⌘P: 列出函数方法一系列的有效参数，如果光标是一个方法调用的括号之间</div><div class="line">⇧⌘F7: 快速，高亮显示变量在当前文件中的引用情况,使用⌘G和⇧⌘G快捷键 可以前往跳到下一个/上一个高亮的变量，按⎋移除高亮显示</div><div class="line">F1: 查看类／方法的注释文档</div></pre></td></tr></table></figure>
<h1 id="控制操作相关"><a href="#控制操作相关" class="headerlink" title="控制操作相关"></a>控制操作相关</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">⌘/: 注释与取消注释，注释效果 //…</div><div class="line">⌥⌘/: 注释与取消注释，注释效果 /*…*/</div><div class="line">⇧⌥up/down: 移动行上下移动</div><div class="line">⌘delete: 删除行</div><div class="line">⌘d: 复制行</div><div class="line">⌘J: 快速生成模版代码块，如<span class="keyword">if</span>,<span class="keyword">while</span>,<span class="built_in">return</span>等</div><div class="line">⌘N: 快速生成getter／setter方法，构造方法，toString()方法等</div><div class="line">⌥⌘T: Surround with快速调出<span class="keyword">if</span>,<span class="keyword">for</span>,try...catch,<span class="keyword">while</span>等环绕代码</div><div class="line">⌃O: 引入重写父类的方法［Override Methods］</div><div class="line">⌃I: 引入实现接口或抽象类方法［Implement Methods］</div><div class="line">⌃Space: 当申明一个变量时，根据变量类型提示给出建议的变量名称，等还有其他很多智能提示作用</div><div class="line">⌥⌘L: 代码格式化</div><div class="line">⌘⇧U: 切换选中内容的大小写</div></pre></td></tr></table></figure>
<h1 id="代码重构相关"><a href="#代码重构相关" class="headerlink" title="代码重构相关"></a>代码重构相关</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">⇧F6: 代码重构时，类名／方法名／变量名 重命名操作</div><div class="line">⌘R: 代码重构时，可以用来批量重命名变量</div><div class="line">⌥⌘M: 方法重构，方法抽离</div><div class="line">⌥⌘P: 参数重构，将方法内变量抽离成方法参数</div><div class="line">⌥⌘V: 变量抽离，</div><div class="line">⌥⌘F: 字段抽离，将方法内的变量抽离成类字段申明,简单说就是把变量的申明从方法内重构抽离到方法外</div></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">F1　　显示注释文档</div><div class="line">F2　　高亮错误或警告快速定位</div><div class="line">Command + F12　　显示当前文件的结构(查看所有方法)</div><div class="line">Command + F　　查找文本</div><div class="line">Command + R　　替换文本</div><div class="line">Command + O　　查找类</div><div class="line">Command + E　　最近打开的文件</div><div class="line">Command + 1　　打开或隐藏工程面板</div><div class="line">Command + B　　打开光标处的类或方法</div><div class="line">Command + X　　删除行</div><div class="line">Command + D　　复制行</div><div class="line">Command + P　　方法参数提示</div><div class="line">Command + /　　单行注释</div><div class="line">Option + Command + /　　多行注释</div><div class="line">Option + Command + O　　查找类中的方法或变量</div><div class="line">Option + Command + left/right　　返回至上次浏览的位置</div><div class="line">Option + Command + [或]　　可以跳到大括号的开头结尾</div><div class="line">Option + Command + T　　可以把代码包在一块内 例如try/catch</div><div class="line">Option + Command + V　　new对象时快速返回变量类型及变量名</div><div class="line">Option + Command + F　　选中变量名 将局部变量变成成员变量</div><div class="line">Option + Command + M　　把选中内容抽取成方法</div><div class="line">Option + Command + L　　格式化代码</div><div class="line"></div><div class="line">Shift + F6　　重命名</div><div class="line">Shift + Option + C　　对比最近修改的代码</div><div class="line">Shift + Command + U　　大小写装换</div><div class="line">Shift + Command + Up/Down　　代码向上/下移动</div><div class="line">Shift + Command + O　　查找文件</div><div class="line"></div><div class="line">Option + F1　　定位代码所在位置</div><div class="line">Option + 回车　　导入包 自动修正</div><div class="line">Control + H　　显示当前类的继承结构</div><div class="line">Control + Option + O　　优化导入的类和包</div><div class="line">Control + Option + 空格　　智能提示</div><div class="line">Control + Shift + 空格　　提示类名和接口名</div><div class="line"></div><div class="line">⇧⌘A: 你可以调用任何菜单或动作的名称在Android studio中</div><div class="line">⇧⌘sapce：代码提示（Class Name Completion）</div><div class="line"><span class="built_in">shift</span>+A: annotate</div><div class="line">在AS属性窗口中搜索postfix，可以查看类似快速编写<span class="keyword">for</span>循环语句的步骤</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/快捷键/AndroidStudio/AndroidStudio快捷键/">https://fengqingxiuyi.github.io/2016/08/15/快捷键/AndroidStudio/AndroidStudio快捷键/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：已经不知道是转载的谁的了，表示抱歉，其中有一大部分和网上的应该是一样的，但是结尾部分有所不同，有兴趣的可以看一下，本文仅用作记录。&lt;/p&gt;
&lt;h1 id=&quot;查找／查看相关&quot;&gt;&lt;a href=&quot;#查找／查看相关&quot; class=&quot;headerlink&quot; title=&quot;查找／
    
    </summary>
    
      <category term="快捷键_AndroidStudio" scheme="https://fengqingxiuyi.github.io/categories/%E5%BF%AB%E6%8D%B7%E9%94%AE-AndroidStudio/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac上Android相关环境变量的配置</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/Mac%E4%B8%8AAndroid%E7%9B%B8%E5%85%B3%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/环境变量/Mac上Android相关环境变量的配置/</id>
    <published>2016-08-15T13:51:19.000Z</published>
    <updated>2016-08-15T14:33:24.000Z</updated>
    
    <content type="html"><![CDATA[<font color="red">注：本文所述环境变量，只在Mac下有效</font>

<p>如果是针对当前用户进行环境变量的设置，只需要打开终端后，输入命令vi ~/.bash_profile即可自行配置环境变量（此处需要懂得vi的基本知识），如果没有.bash_profile文件则可以使用touch命令创建该文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch ~/.bash_profile</div></pre></td></tr></table></figure>
<p>自行配置环境变量不做过多阐述，根据例子即可明白：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#配置JAVA_HOME，此处路径根据自己的版本填写</span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92:.jdk/Contents/Home</div><div class="line"><span class="comment">#把JAVA添加到到环境变量PATH中</span></div><div class="line"><span class="built_in">export</span> PATH=.:<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</div><div class="line"><span class="comment">#配置CLASSPATH</span></div><div class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</div><div class="line"></div><div class="line"><span class="comment">#设置gradle的主目录</span></div><div class="line"><span class="built_in">export</span> GRADLE_HOME=<span class="string">"/Applications/Android Studio.app/Contents/gradle/gradle-2.10/"</span></div><div class="line"><span class="comment">#把JAVA添加到到环境变量PATH中</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GRADLE_HOME</span>/bin</div><div class="line"><span class="comment">#配置NDK环境变量</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/Volumes/MAIN/qingfeng/Software/sdk/platform-tools</div><div class="line"><span class="built_in">export</span> NDK_ROOT=/Volumes/MAIN/qingfeng/Software/android-ndk-r10e</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$NDK_ROOT</span></div></pre></td></tr></table></figure>
<p>配置完成后，使用以下命令即可使环境变量生效：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.bash_profile</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/环境变量/Mac上Android相关环境变量的配置/">https://fengqingxiuyi.github.io/2016/08/15/环境变量/Mac上Android相关环境变量的配置/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;red&quot;&gt;注：本文所述环境变量，只在Mac下有效&lt;/font&gt;

&lt;p&gt;如果是针对当前用户进行环境变量的设置，只需要打开终端后，输入命令vi ~/.bash_profile即可自行配置环境变量（此处需要懂得vi的基本知识），如果没有.bash_profi
    
    </summary>
    
      <category term="环境变量" scheme="https://fengqingxiuyi.github.io/categories/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>通用BaseAtapter</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/Android/View/Atapter/%E9%80%9A%E7%94%A8BaseAtapter/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/Android/View/Atapter/通用BaseAtapter/</id>
    <published>2016-08-15T05:39:21.000Z</published>
    <updated>2016-08-15T06:49:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>我们在开发项目的过程中，经常会用到ListView、GridView这一类的控件，从而不可避免的会用到<code>BaseAtapter</code>。然后我们必须实现那四个方法(getCount、getItem、getItemId、getView)，编写类似的代码，实在是太繁琐了。因此，我们需要创建一个通用的BaseAdapter来解决我们的难题。</p>
<h1 id="继承BaseAdapter"><a href="#继承BaseAdapter" class="headerlink" title="继承BaseAdapter"></a>继承BaseAdapter</h1><p>既然我们想要创建一个通用的BaseAdapter，那肯定需要继承于BaseAdapter，然后由于需要从外部传递data到adapter中进行处理，data的格式又是多样化的，所以我们需要使用<code>泛型</code>来解决这个问题，于是有了这样的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建构造方法"><a href="#创建构造方法" class="headerlink" title="创建构造方法"></a>创建构造方法</h2><p>接着就是同样的套路了，即创建构造方法，接收最为基本的<code>上下文</code>和<code>data</code>。于是有了，这样的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> Context context;</div><div class="line"><span class="keyword">protected</span> List&lt;T&gt; data;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CommonAdapter</span><span class="params">(Context context, List&lt;T&gt; data)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.context = context;</div><div class="line">	<span class="keyword">this</span>.data = data;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>差点忘了还有布局文件了，如果你的SDK支持LayoutRes注解的话，那就再好不过了，只需要一行代码就可以搞定了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="meta">@LayoutRes</span> <span class="function"><span class="keyword">int</span> <span class="title">getLayoutId</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>如果不支持的话，也没有关系，从构造方法传入即可，但是这样其实不太好。</p>
<h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>得到外部传入的数据之后，我们需要在那四个方法中进行一些基本的操作了，如判空操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@see</span> android.widget.Adapter#getCount()</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span> == data ? <span class="number">0</span> : data.size();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@see</span> android.widget.Adapter#getItem(int)</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == data || data.size() &lt;= position) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> data.get(position);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@see</span> android.widget.Adapter#getItemId(int)</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> position;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getView方法比较复杂，相对于其他三个方法而言，所以在这里就单独讲解，由于getView方法是需要ViewHolder类来进行协助管理的，所以在执行getView方法中的具体操作之前，需要先创建一个ViewHolder类</p>
<h1 id="创建ViewHolder"><a href="#创建ViewHolder" class="headerlink" title="创建ViewHolder"></a>创建ViewHolder</h1><h2 id="获得ViewHolder实例"><a href="#获得ViewHolder实例" class="headerlink" title="获得ViewHolder实例"></a>获得ViewHolder实例</h2><p>首先因为holder的相关操作都是在getView方法中执行的，所以，我们需要的参数有这么几个：position、convertView、parent，又因为我们之后需要在ViewHolder类中进行数据展示，所以必不可少的参数还有这两个：context、layoutId。有了这5个参数之后，我们就可以大干一场了：</p>
<p>我们可以创建一个静态方法，用于获取ViewHolder的实例，如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewHolder <span class="title">get</span><span class="params">(Context context, View convertView, </span></span></div><div class="line">        ViewGroup parent, <span class="keyword">int</span> layoutId, <span class="keyword">int</span> position) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == convertView) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(context, parent, layoutId, position);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        ViewHolder holder = (ViewHolder) convertView.getTag();</div><div class="line">        holder.mPosition = position;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建构造方法-1"><a href="#创建构造方法-1" class="headerlink" title="创建构造方法"></a>创建构造方法</h2><p>根据上述代码，我们显然已经知道了构造方法的内容了，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(Context context, ViewGroup parent, <span class="keyword">int</span> layoutId, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mPosition = position;</div><div class="line">    <span class="keyword">this</span>.mConvertView = LayoutInflater.from(context).inflate(layoutId, parent, <span class="keyword">false</span>);</div><div class="line">    <span class="keyword">this</span>.mConvertView.setTag(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="getView"><a href="#getView" class="headerlink" title="getView"></a>getView</h1><p>既然我们已经处理好了ViewHolder类，那么现在就让我们来解决getView这个问题吧！其实我们只需要执行以下三步就可以了：</p>
<ol>
<li>获得ViewHolder实例；</li>
<li>将需要传递出去的ViewHolder实例、指定位置的数据传递出去；</li>
<li>返回ViewHolder中获得的mConvertView</li>
</ol>
<p>即如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@see</span> android.widget.Adapter#getView(int, View, ViewGroup)</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">    ViewHolder holder = ViewHolder.get(context, convertView, parent, getLayoutId(), position);</div><div class="line">    </div><div class="line">    convert(holder, getItem(position), position);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> holder.getConvertView();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(ViewHolder holder, T t, <span class="keyword">int</span> position)</span></span>;</div></pre></td></tr></table></figure>
<h1 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h1><p>最后让我们重新回到ViewHolder类中，之前我已经说过了，我们需要在ViewHolder类中展示数据，所以我们需要创建一个方法，用于支持<code>通过viewId获取控件</code>。</p>
<p>这意味着我们需要将通过<code>mConvertView.findViewById(viewId)</code>获得的数据存储起来，然后在需要用到的地方取出来，这个时候你也许想起了，这不就是map么，是的，不过我不建议用map进行操作，这里我使用的SparseArray。</p>
<h2 id="存储View"><a href="#存储View" class="headerlink" title="存储View"></a>存储View</h2><p>这里我们首先需要在构造方法中创建SparseArray的实例，并将其定义为全局变量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T extends View&gt;<span class="function">T <span class="title">getView</span><span class="params">(<span class="keyword">int</span> viewId)</span> </span>&#123;</div><div class="line">    View view = mViews.get(viewId);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == view) &#123;</div><div class="line">        view = mConvertView.findViewById(viewId);</div><div class="line">        mViews.put(viewId, view);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (T) view;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="获取View"><a href="#获取View" class="headerlink" title="获取View"></a>获取View</h2><p>进行数据展示的操作有很多种，这里我就以最简单的显示文字内容为例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ViewHolder <span class="title">setText</span><span class="params">(<span class="keyword">int</span> viewId, String text)</span> </span>&#123;</div><div class="line">    TextView tv = getView(viewId);</div><div class="line">    tv.setText(text);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这句话表明当我们在自己的adapter类中重写了convert方法后，只需要使用holder实例，调用setText方法，并传递viewId和text内容就可以正常显示文本了！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，我们的通用BaseAdapter就已经全部完工了，这里我就不公布源代码了，大家自行研究就会懂了。</p>
<p>对于<code>获取View</code>那一节，你可能会觉得比较麻烦，因为之后想要显示图片，我要在ViewHolder类中添加一个显示图片方法；想要设置背景，还需要在ViewHolder类中添加一个设置背景的方法……我想说这其实并没有什么，因为这对于整个项目都是通用的，只要设置一遍就可以了，如果你不想让ViewHoder类发生变化，也可以试试提取出来，记得告诉我哦，蟹蟹~😄</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/Android/View/Atapter/通用BaseAtapter/">https://fengqingxiuyi.github.io/2016/08/15/Android/View/Atapter/通用BaseAtapter/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;我们在开发项目的过程中，经常会用到ListView、GridView这一类的控件，从而不可避免的会用到&lt;code&gt;BaseAtapter&lt;/code
    
    </summary>
    
      <category term="Android_View_Atapter" scheme="https://fengqingxiuyi.github.io/categories/Android-View-Atapter/"/>
    
    
  </entry>
  
  <entry>
    <title>declare-styleable中format详解</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/Android/View/%E8%87%AA%E5%AE%9A%E4%B9%89View/%E5%B1%9E%E6%80%A7/declare-styleable%E4%B8%ADformat%E8%AF%A6%E8%A7%A3/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/declare-styleable中format详解/</id>
    <published>2016-08-14T16:19:11.000Z</published>
    <updated>2016-08-14T16:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自：<a href="http://blog.csdn.net/lihengfang/article/details/8290754" target="_blank" rel="external">declare-styleable中format详解</a></p>
<p>我们在做项目的时候，由于android自带的属性不能满足需求，android提供了自定义属性的方法，其中的format是做什么用的？以及如何使用它？下面列出一些常用的。</p>
<h1 id="reference：参考某一资源ID。"><a href="#reference：参考某一资源ID。" class="headerlink" title="reference：参考某一资源ID。"></a>reference：参考某一资源ID。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"background"</span> format = <span class="string">"reference"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ImageView</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span></div><div class="line">	android:background = <span class="string">"@drawable/图片ID"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="color：颜色值。"><a href="#color：颜色值。" class="headerlink" title="color：颜色值。"></a>color：颜色值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"textColor"</span> format = <span class="string">"color"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span></div><div class="line">	android:textColor = <span class="string">"#00FF00"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="boolean：布尔值。"><a href="#boolean：布尔值。" class="headerlink" title="boolean：布尔值。"></a>boolean：布尔值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"focusable"</span> format = <span class="string">"boolean"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span></div><div class="line">	android:focusable = <span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="dimension：尺寸值。"><a href="#dimension：尺寸值。" class="headerlink" title="dimension：尺寸值。"></a>dimension：尺寸值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"layout_width"</span> format = <span class="string">"dimension"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="float：浮点值。"><a href="#float：浮点值。" class="headerlink" title="float：浮点值。"></a>float：浮点值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"AlphaAnimation"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"fromAlpha"</span> format = <span class="string">"float"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"toAlpha"</span> format = <span class="string">"float"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;alpha</div><div class="line">	android:fromAlpha = <span class="string">"1.0"</span></div><div class="line">	android:toAlpha = <span class="string">"0.7"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="integer：整型值。"><a href="#integer：整型值。" class="headerlink" title="integer：整型值。"></a>integer：整型值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"AnimatedRotateDrawable"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"visible"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"frameDuration"</span> format=<span class="string">"integer"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"framesCount"</span> format=<span class="string">"integer"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"pivotX"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"pivotY"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"drawable"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;animated-rotate</div><div class="line">	xmlns:android = <span class="string">"http://schemas.android.com/apk/res/android"</span> </div><div class="line">	android:drawable = <span class="string">"@drawable/图片ID"</span> </div><div class="line">	android:pivotX = <span class="string">"50%"</span> </div><div class="line">	android:pivotY = <span class="string">"50%"</span> </div><div class="line">	android:framesCount = <span class="string">"12"</span> </div><div class="line">	android:frameDuration = <span class="string">"100"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="string：字符串。"><a href="#string：字符串。" class="headerlink" title="string：字符串。"></a>string：字符串。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"MapView"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"apiKey"</span> format = <span class="string">"string"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;com.google.android.maps.MapView</div><div class="line">	android:layout_width = <span class="string">"fill_parent"</span></div><div class="line">	android:layout_height = <span class="string">"fill_parent"</span></div><div class="line">	android:apiKey = <span class="string">"0jOkQ80oD1JL9C6HAja99uGXCRiS2CGjKO_bc_g"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="fraction：百分数。"><a href="#fraction：百分数。" class="headerlink" title="fraction：百分数。"></a>fraction：百分数。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"RotateDrawable"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"visible"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"fromDegrees"</span> format = <span class="string">"float"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"toDegrees"</span> format = <span class="string">"float"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"pivotX"</span> format = <span class="string">"fraction"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"pivotY"</span> format = <span class="string">"fraction"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"drawable"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;rotate</div><div class="line">	xmlns:android = <span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">	android:interpolator = <span class="string">"@anim/动画ID"</span></div><div class="line">	android:fromDegrees = <span class="string">"0"</span></div><div class="line">	android:toDegrees = <span class="string">"360"</span></div><div class="line">	android:pivotX = <span class="string">"200%"</span></div><div class="line">	android:pivotY = <span class="string">"300%"</span></div><div class="line">	android:duration = <span class="string">"5000"</span></div><div class="line">	android:repeatMode = <span class="string">"restart"</span></div><div class="line">	android:repeatCount = <span class="string">"infinite"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="enum：枚举值。"><a href="#enum：枚举值。" class="headerlink" title="enum：枚举值。"></a>enum：枚举值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name=<span class="string">"orientation"</span>&gt;</div><div class="line">		&lt;enum name=<span class="string">"horizontal"</span> value=<span class="string">"0"</span> /&gt;</div><div class="line">		&lt;enum name=<span class="string">"vertical"</span> value=<span class="string">"1"</span> /&gt;</div><div class="line">	&lt;/attr&gt;           </div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line">	xmlns:android = <span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">	android:orientation = <span class="string">"vertical"</span></div><div class="line">	android:layout_width = <span class="string">"fill_parent"</span></div><div class="line">	android:layout_height = <span class="string">"fill_parent"</span>&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<h1 id="flag：位或运算。"><a href="#flag：位或运算。" class="headerlink" title="flag：位或运算。"></a>flag：位或运算。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name=<span class="string">"windowSoftInputMode"</span>&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateUnspecified"</span> value = <span class="string">"0"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateUnchanged"</span> value = <span class="string">"1"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateHidden"</span> value = <span class="string">"2"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateAlwaysHidden"</span> value = <span class="string">"3"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateVisible"</span> value = <span class="string">"4"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateAlwaysVisible"</span> value = <span class="string">"5"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"adjustUnspecified"</span> value = <span class="string">"0x00"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"adjustResize"</span> value = <span class="string">"0x10"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"adjustPan"</span> value = <span class="string">"0x20"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"adjustNothing"</span> value = <span class="string">"0x30"</span> /&gt;</div><div class="line">	&lt;/attr&gt;        </div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">	android:name = <span class="string">".StyleAndThemeActivity"</span></div><div class="line">	android:label = <span class="string">"@string/app_name"</span></div><div class="line">	android:windowSoftInputMode = <span class="string">"stateUnspecified | stateUnchanged　|　stateHidden"</span>&gt;</div><div class="line">	&lt;intent-filter&gt;</div><div class="line">		&lt;action android:name = <span class="string">"android.intent.action.MAIN"</span> /&gt;</div><div class="line">		&lt;category android:name = <span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</div><div class="line">	&lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure>
<p>特别要注意：</p>
<p>属性定义时可以指定多种类型值。</p>
<p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"background"</span> format = <span class="string">"reference|color"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ImageView</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span></div><div class="line">	android:background = <span class="string">"@drawable/图片ID|#00FF00"</span>/&gt;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/declare-styleable中format详解/">https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/declare-styleable中format详解/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载自：&lt;a href=&quot;http://blog.csdn.net/lihengfang/article/details/8290754&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;declare-styleable中format详解&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android_View_自定义View_属性" scheme="https://fengqingxiuyi.github.io/categories/Android-View-%E8%87%AA%E5%AE%9A%E4%B9%89View-%E5%B1%9E%E6%80%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>attr和styleable的关系</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/15/Android/View/%E8%87%AA%E5%AE%9A%E4%B9%89View/%E5%B1%9E%E6%80%A7/attr%E5%92%8Cstyleable%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/attr和styleable的关系/</id>
    <published>2016-08-14T16:12:21.000Z</published>
    <updated>2016-08-14T16:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自：<a href="http://www.jianshu.com/p/61b79e7f88fc" target="_blank" rel="external">深入理解Android 自定义attr Style styleable以及其应用</a></p>
<p>注：本文只截取了其中的<code>attr和styleable的关系</code>部分，其他部分可以查看原文，进行研究。</p>
<h1 id="attr和styleable的关系"><a href="#attr和styleable的关系" class="headerlink" title="attr和styleable的关系"></a>attr和styleable的关系</h1><p>首先要明确一点，<font color="red">attr不依赖于styleable，styleable只是为了方便attr的使用。</font></p>
<p>我们自己定义属性完全可以不放到styleable里面，比如直接在resources文件中定义一些属性：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;attr name=<span class="string">"custom_attr1"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">&lt;attr name=<span class="string">"custom_attr2"</span> format=<span class="string">"string"</span> /&gt;</div></pre></td></tr></table></figure>
<p>定义一个attr就会在R文件里面生成一个Id，那么我们去获取这个属性时，必须调用如下代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int[] custom_attrs = &#123;R.attr.custom_attr1,R.custom_attr2&#125;;</div><div class="line">TypedArray typedArray = context.obtainStyledAttributes(<span class="built_in">set</span>,custom_attrs);</div></pre></td></tr></table></figure>
<p>而通过定义一个styleable，我们可以在R文件里自动生成一个int[]，数组里面的int就是定义在styleable里面的attr的id。所以我们在获取属性的时候就可以直接使用styleable数组来获取一系列的属性。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"custom_attrs"</span>&gt;   </div><div class="line">        &lt;attr name=<span class="string">"custom_attr1"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">        &lt;attr name=<span class="string">"custom_attr2"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>获取：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TypedArray typedArray = context.obtainStyledAttributes(<span class="built_in">set</span>,R.styleable.custom_attrs);</div></pre></td></tr></table></figure>
<p>由上面的例子可以知道，定义一个declare-styleable，在获取属性的时候为我们自动提供了一个属性数组。此外，我觉得使用declare-styleable的方式有利于我们我们把相关的属性组织起来，有一个分组的概念，属性的使用范围更加明确。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/attr和styleable的关系/">https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/attr和styleable的关系/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载自：&lt;a href=&quot;http://www.jianshu.com/p/61b79e7f88fc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解Android 自定义attr Style styleable以及其应用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Android_View_自定义View_属性" scheme="https://fengqingxiuyi.github.io/categories/Android-View-%E8%87%AA%E5%AE%9A%E4%B9%89View-%E5%B1%9E%E6%80%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>属性的设置与使用</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/Android/View/%E8%87%AA%E5%AE%9A%E4%B9%89View/%E5%B1%9E%E6%80%A7/%E5%B1%9E%E6%80%A7%E7%9A%84%E8%AE%BE%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/Android/View/自定义View/属性/属性的设置与使用/</id>
    <published>2016-08-14T15:53:21.000Z</published>
    <updated>2016-08-14T16:30:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了将某些公用的View抽取成通用的View，我们需要用到自定义View，而且一般情况下，为了方便快捷，我们需要在布局文件中就设置好值，所以我们需要学会运用<code>属性</code>。接下来就让我们一起进入实战演练一番吧！</p>
<p><font color="00AF60"><strong><em>案例：</em></strong></font>比如说我们编写一个ShopCheckItem类，继承于RelativeLayout，用来作为自定义的View，那么我们需要执行以下几个步骤：</p>
<h1 id="编写布局文件"><a href="#编写布局文件" class="headerlink" title="编写布局文件"></a>编写布局文件</h1><p>首先我们需要编写布局文件，不要问为什么，自定义View的办法有很多种，本文只讲这种办法，慢慢看你就懂了！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;RelativeLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:paddingLeft=<span class="string">"20dp"</span></div><div class="line">    android:paddingRight=<span class="string">"20dp"</span>&gt;</div><div class="line"></div><div class="line">    &lt;com.showjoy.view.SHIconFontTextView</div><div class="line">        android:id=<span class="string">"@+id/view_shop_check_item_icon"</span></div><div class="line">        android:layout_width=<span class="string">"32dp"</span></div><div class="line">        android:layout_height=<span class="string">"32dp"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id=<span class="string">"@+id/view_shop_check_item_name"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_centerVertical=<span class="string">"true"</span></div><div class="line">        android:layout_marginLeft=<span class="string">"5dp"</span></div><div class="line">        android:layout_toRightOf=<span class="string">"@id/view_shop_check_item_icon"</span></div><div class="line">        android:textColor=<span class="string">"@color/black"</span></div><div class="line">        android:textSize=<span class="string">"16sp"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;ImageView</div><div class="line">        android:id=<span class="string">"@+id/view_shop_check_item_selected"</span></div><div class="line">        android:layout_width=<span class="string">"25dp"</span></div><div class="line">        android:layout_height=<span class="string">"25dp"</span></div><div class="line">        android:layout_alignParentRight=<span class="string">"true"</span>/&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<h1 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h1><p>接着根据布局，发现我们需要这样一些属性，如：icon、name、selected。于是我们就可以在styles.xml文件中编写自定义的属性了，具体代码如下所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"ShopCheckItem"</span>&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_check_item_icon"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_check_item_name"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_check_item_name_color"</span> format=<span class="string">"color"</span> /&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_check_item_selected"</span> format=<span class="string">"boolean"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<h1 id="自定义View"><a href="#自定义View" class="headerlink" title="自定义View"></a>自定义View</h1><p>编写好属性后，我们就可以开始自定义view的编写了，一般包括以下几个步骤：</p>
<h2 id="使用inflate方式将布局转换为View"><a href="#使用inflate方式将布局转换为View" class="headerlink" title="使用inflate方式将布局转换为View"></a>使用inflate方式将布局转换为View</h2><h2 id="找到布局文件中得控件即findViewById"><a href="#找到布局文件中得控件即findViewById" class="headerlink" title="找到布局文件中得控件即findViewById"></a>找到布局文件中得控件即findViewById</h2><h2 id="获取在布局文件中自定义属性的值"><a href="#获取在布局文件中自定义属性的值" class="headerlink" title="获取在布局文件中自定义属性的值"></a>获取在布局文件中自定义属性的值</h2><h2 id="根据自定义属性的值初始化控件"><a href="#根据自定义属性的值初始化控件" class="headerlink" title="根据自定义属性的值初始化控件"></a>根据自定义属性的值初始化控件</h2><h2 id="暴露接口"><a href="#暴露接口" class="headerlink" title="暴露接口"></a>暴露接口</h2><p>注意：接口不一定是interface，只要是提供给别人用的，就算是一个public方法也是接口，如果不清楚，可以查看这篇文章：<a href="../../../../Wiki/接口回调/">接口回调</a></p>
<p>所以，完整代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.showjoy.shop.common.view;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.text.TextUtils;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"><span class="keyword">import</span> android.widget.RelativeLayout;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.showjoy.shop.R;</div><div class="line"><span class="keyword">import</span> com.showjoy.view.SHIconFontTextView;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by qingfeng on 7/20/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShopCheckItem</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SHIconFontTextView viewShopCheckItemIcon;</div><div class="line">    <span class="keyword">private</span> TextView viewShopCheckItemName;</div><div class="line">    <span class="keyword">private</span> ImageView viewShopCheckItemSelected;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShopCheckItem</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        init(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShopCheckItem</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        init(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShopCheckItem</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        inflate(context, R.layout.view_pay_method, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">        viewShopCheckItemIcon = (SHIconFontTextView) findViewById(R.id.view_shop_check_item_icon);</div><div class="line">        viewShopCheckItemName = (TextView) findViewById(R.id.view_shop_check_item_name);</div><div class="line">        viewShopCheckItemSelected = (ImageView) findViewById(R.id.view_shop_check_item_selected);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != attrs) &#123;</div><div class="line">            TypedArray typeArray = context.obtainStyledAttributes(attrs, R.styleable.ShopCheckItem);</div><div class="line"></div><div class="line">            String icon = typeArray.getString(R.styleable.ShopCheckItem_shop_check_item_icon);</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(icon)) &#123;</div><div class="line">                viewShopCheckItemIcon.setText(icon);</div><div class="line">            &#125;</div><div class="line">            String name = typeArray.getString(R.styleable.ShopCheckItem_shop_check_item_name);</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(name)) &#123;</div><div class="line">                viewShopCheckItemName.setText(name);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> color = typeArray.getColor(R.styleable.ShopCheckItem_shop_check_item_name_color,</div><div class="line">                    context.getResources().getColor(R.color.grey5));</div><div class="line">            viewShopCheckItemName.setTextColor(color);</div><div class="line">            <span class="keyword">boolean</span> selected = typeArray.getBoolean(R.styleable.ShopCheckItem_shop_check_item_selected, <span class="keyword">false</span>);</div><div class="line">            <span class="keyword">if</span> (selected) &#123;</div><div class="line">                viewShopCheckItemSelected.setImageResource(R.mipmap.view_shop_check_item_selected);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                viewShopCheckItemSelected.setImageResource(R.drawable.view_shop_check_item_unselected);</div><div class="line">            &#125;</div><div class="line">            typeArray.recycle();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSelected</span><span class="params">(<span class="keyword">boolean</span> selected)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (selected) &#123;</div><div class="line">            viewShopCheckItemIcon.setTextColor(getContext().getResources().getColor(R.color.black));</div><div class="line">            viewShopCheckItemName.setTextColor(getContext().getResources().getColor(R.color.black));</div><div class="line">            viewShopCheckItemSelected.setImageResource(R.mipmap.view_shop_check_item_selected);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            viewShopCheckItemIcon.setTextColor(getContext().getResources().getColor(R.color.grey5));</div><div class="line">            viewShopCheckItemName.setTextColor(getContext().getResources().getColor(R.color.grey5));</div><div class="line">            viewShopCheckItemSelected.setImageResource(R.drawable.view_shop_check_item_unselected);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>是不是很简单，自定义View就是这么简单，当然自定义View不止这么一种方式咯，大家可以自行探索，然后在下方评论区域告诉我，蟹蟹~😄</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/View/自定义View/属性/属性的设置与使用/">https://fengqingxiuyi.github.io/2016/08/14/Android/View/自定义View/属性/属性的设置与使用/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了将某些公用的View抽取成通用的View，我们需要用到自定义View，而且一般情况下，为了方便快捷，我们需要在布局文件中就设置好值，所以我们需要学会运用&lt;code&gt;属性&lt;/code&gt;。接下来就让我们一起进入实战演练一番吧！&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;00A
    
    </summary>
    
      <category term="Android_View_自定义View_属性" scheme="https://fengqingxiuyi.github.io/categories/Android-View-%E8%87%AA%E5%AE%9A%E4%B9%89View-%E5%B1%9E%E6%80%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac+GitHub+Hexo+NexT使用注意点</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/MGHN/Mac+GitHub+Hexo+NexT%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/MGHN/Mac+GitHub+Hexo+NexT使用注意点/</id>
    <published>2016-08-14T13:23:19.000Z</published>
    <updated>2016-08-14T13:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文专门用于记录在使用Hexo博客过程中遇到的一些（奇葩的）问题。</p>
<h1 id="favicon不显示"><a href="#favicon不显示" class="headerlink" title="favicon不显示"></a>favicon不显示</h1><p>当我们在搭建Hexo博客的时候，必然会自定义favicon.ico，显示在网页选项卡的左上角，如图所示：</p>
<p><img src="../../../../../images/MGHN/favicon不显示.png" alt="favicon不显示"></p>
<p>设置favicon也很简单，只需要在<code>主题配置文件</code>（_config.yml）中，进行如下操作即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Put your favicon.ico into `hexo-site/source/` directory.</div><div class="line">favicon: /images/Blog/favicon.ico</div></pre></td></tr></table></figure>
<p>如果favicon的路径设置正确，而且清除了缓存，刷新了页面好几次，但favicon仍然不显示的话，可以<font color="red">等待一段时间，再去刷新</font>，可能就会显示了！</p>
<h1 id="404问题"><a href="#404问题" class="headerlink" title="404问题"></a>404问题</h1><p><font color="00AF60"><strong><em>现象：</em></strong></font>从首页点击某篇文章跳转到了404页面！</p>
<p><font color="00AF60"><strong><em>分析：</em></strong></font>既然出现了404页面，那么必定是路径问题；仔细检查路径发现，原来是以前名为mou.md的文件，现在变成了Mou.md。所以在github上路径中文件夹的名字仍然是mou，而不是Mou。</p>
<p><font color="00AF60"><strong><em>解决：</em></strong></font>本来以为只需要执行以下命令就可以了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</div></pre></td></tr></table></figure>
<p>后来发现自己还是太年轻了，因为hexo clean的只是本地的文件，和github完全没有关系，之后想了半天也毫无头绪，于是另辟蹊径：<font color="red">将Mou.md文件再重命名一下，如Mou2.md，执行上述命令之后，再重命名回Mou.md，再执行上述命令就可以了。</font>😄</p>
<p><font color="00AF60"><strong><em>总结：</em></strong></font>当我在重命名md文件时，切忌不可只是进行了<font color="red">大小写转换</font>，因为像这样把文章部署到github上之后，文件名对应的文件夹是不会发生变化的！！！</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/MGHN/Mac+GitHub+Hexo+NexT使用注意点/">https://fengqingxiuyi.github.io/2016/08/14/MGHN/Mac+GitHub+Hexo+NexT使用注意点/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文专门用于记录在使用Hexo博客过程中遇到的一些（奇葩的）问题。&lt;/p&gt;
&lt;h1 id=&quot;favicon不显示&quot;&gt;&lt;a href=&quot;#favicon不显示&quot; class=&quot;headerlink&quot; title=&quot;favicon不显示&quot;&gt;&lt;/a&gt;favicon不显示&lt;/h
    
    </summary>
    
      <category term="MGHN" scheme="https://fengqingxiuyi.github.io/categories/MGHN/"/>
    
    
  </entry>
  
  <entry>
    <title>ListView-Header</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/Android/View/ListView/ListView-Header/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/Android/View/ListView/ListView-Header/</id>
    <published>2016-08-14T13:19:21.000Z</published>
    <updated>2016-08-14T13:19:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>问：ListView没有数据时怎么显示Header？</p>
<p>答：只要ListView不设置为GONE，然后再setAdapter之前添加了headerView，就会显示Header。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/View/ListView/ListView-Header/">https://fengqingxiuyi.github.io/2016/08/14/Android/View/ListView/ListView-Header/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问：ListView没有数据时怎么显示Header？&lt;/p&gt;
&lt;p&gt;答：只要ListView不设置为GONE，然后再setAdapter之前添加了headerView，就会显示Header。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;版权声明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Android_View_ListView" scheme="https://fengqingxiuyi.github.io/categories/Android-View-ListView/"/>
    
    
  </entry>
  
  <entry>
    <title>TextView占位符</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/TextView%E5%8D%A0%E4%BD%8D%E7%AC%A6/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/TextView占位符/</id>
    <published>2016-08-14T11:15:21.000Z</published>
    <updated>2016-08-14T11:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍如何简单使用TextView占位符。</p>
<p>这个其实很简单，这里我就直接上例子了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">textView.setText(String.format(<span class="string">"%s考了%d分"</span>, <span class="string">"小明"</span>, <span class="number">88</span>);</div></pre></td></tr></table></figure>
<p>想必大家一看就懂了，置于那些想要深入研究，还有哪些占位符的小伙伴们，可以看以下文章：</p>
<p><a href="http://www.cnblogs.com/fsjohnhuang/p/4094777.html" target="_blank" rel="external">Java魔法堂：String.format详解</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/TextView占位符/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/TextView占位符/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文属于工具类文章，可以直接使用；本文主要介绍如何简单使用TextView占位符。&lt;/p&gt;
&lt;p&gt;这个其实很简单，这里我就直接上例子了：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
    
    </summary>
    
      <category term="Android_Wiki" scheme="https://fengqingxiuyi.github.io/categories/Android-Wiki/"/>
    
    
  </entry>
  
  <entry>
    <title>ImageView引用图片上下方空白</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/ImageView%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87%E4%B8%8A%E4%B8%8B%E6%96%B9%E7%A9%BA%E7%99%BD/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/ImageView引用图片上下方空白/</id>
    <published>2016-08-14T10:57:21.000Z</published>
    <updated>2016-08-14T11:15:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍如何解决ImageView引用图片上下方空白的问题。</p>
<h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>疑问：当我们将一张图片引用到我们指定的ImageView容器中，可能由于图片尺寸、比例等原因，无法铺满整个容器（表述不好），导致白边的出现，而且怎么去也去不掉。如下布局代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;ImageView</div><div class="line">    	android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    	android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    	android:src=<span class="string">"@mipmap/share_invite"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;TextView</div><div class="line">    	android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    	android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    	android:text=<span class="string">"测试空白区域文本"</span>/&gt;</div><div class="line">    </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>如上述布局代码，本身没有任何问题，但是因为图片的尺寸，比例等原因，就可能出现图片和文本之间存在空白区域的问题。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>那么怎么解决呢？</p>
<p>其实很简单，我们只需要为ImageView添加以下属性就可以了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:adjustViewBounds=<span class="string">"true"</span></div></pre></td></tr></table></figure>
<h1 id="adjustViewBounds"><a href="#adjustViewBounds" class="headerlink" title="adjustViewBounds"></a>adjustViewBounds</h1><p>我想，你一定会问，这句话代表着什么意思？为什么这样就可以了呢？这里我就给大家简要解释一下：</p>
<p>Google官方对于<code>adjustViewBounds</code>这个属性是这样介绍的：</p>
<p><code>谷歌原文：</code>Set this to true if you want the ImageView to adjust its bounds to preserve the aspect ratio of its drawable.</p>
<p><code>个人翻译（不喜勿喷）：</code>如果你想要ImageView适应边界，同时保持图片宽高比，可以将它设置为true。</p>
<p><code>我们也可以这样理解：</code>将 android:adjustViewBounds 设置为true，即可去除因图片宽高比等原因导致ImageView直接引用图片时上下方存在空白区域的问题。</p>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><font color="red">图片本身上下方无空白区域!!!</font>



<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/ImageView引用图片上下方空白/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/ImageView引用图片上下方空白/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文属于工具类文章，可以直接使用；本文主要介绍如何解决ImageView引用图片上下方空白的问题。&lt;/p&gt;
&lt;h1 id=&quot;疑问&quot;&gt;&lt;a href=&quot;#疑问&quot; class=&quot;headerlink&quot; title=&quot;疑问&quot;&gt;&lt;/a&gt;疑问&lt;/h1&gt;&lt;p&gt;疑问：当我们将一张图片
    
    </summary>
    
      <category term="Android_Wiki" scheme="https://fengqingxiuyi.github.io/categories/Android-Wiki/"/>
    
    
  </entry>
  
  <entry>
    <title>设置Hint字体大小</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/%E8%AE%BE%E7%BD%AEHint%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/设置Hint字体大小/</id>
    <published>2016-08-14T10:47:21.000Z</published>
    <updated>2016-08-14T10:52:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍如何为EditText的Hint设置字体大小。</p>
<p>设置Hint字体大小通常有以下两种方式：</p>
<h1 id="静态设置"><a href="#静态设置" class="headerlink" title="静态设置"></a>静态设置</h1><p>静态设置即在布局文件中设置相关属性。</p>
<p>很简单，我们只要在布局文件中，在EditText标签下设置textSize即可实现，但是有些情况好像设置了也没有用，尚不清楚。</p>
<h1 id="动态设置"><a href="#动态设置" class="headerlink" title="动态设置"></a>动态设置</h1><p>动态设置即在代码中动态实现Hint字体大小，有以下两种情况：</p>
<h2 id="已在布局中设置好Hint值"><a href="#已在布局中设置好Hint值" class="headerlink" title="已在布局中设置好Hint值"></a>已在布局中设置好Hint值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHint</span><span class="params">(EditText editText, <span class="keyword">int</span> fontSize)</span> </span>&#123;</div><div class="line">    CharSequence hint = registerGoodsName.getHint();</div><div class="line">    <span class="comment">// 新建一个可以添加属性的文本对象</span></div><div class="line">    SpannableString ss = <span class="keyword">new</span> SpannableString(hint);</div><div class="line">    <span class="comment">// 新建一个属性对象,设置文字的大小</span></div><div class="line">    AbsoluteSizeSpan ass = <span class="keyword">new</span> AbsoluteSizeSpan(fontSize, <span class="keyword">true</span>);</div><div class="line">    <span class="comment">// 附加属性到文本</span></div><div class="line">    ss.setSpan(ass, <span class="number">0</span>, ss.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">    <span class="comment">// 设置hint</span></div><div class="line">    editText.setHint(<span class="keyword">new</span> SpannedString(ss)); <span class="comment">// 一定要进行转换,否则属性会消失</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="未在布局中设置好Hint值"><a href="#未在布局中设置好Hint值" class="headerlink" title="未在布局中设置好Hint值"></a>未在布局中设置好Hint值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHint</span><span class="params">(EditText editText, String hint, <span class="keyword">int</span> fontSize)</span> </span>&#123;</div><div class="line">    <span class="comment">// 新建一个可以添加属性的文本对象</span></div><div class="line">    SpannableString ss = <span class="keyword">new</span> SpannableString(hint);</div><div class="line">    <span class="comment">// 新建一个属性对象,设置文字的大小</span></div><div class="line">    AbsoluteSizeSpan ass = <span class="keyword">new</span> AbsoluteSizeSpan(fontSize, <span class="keyword">true</span>);</div><div class="line">    <span class="comment">// 附加属性到文本</span></div><div class="line">    ss.setSpan(ass, <span class="number">0</span>, ss.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">    <span class="comment">// 设置hint</span></div><div class="line">    editText.setHint(<span class="keyword">new</span> SpannedString(ss)); <span class="comment">// 一定要进行转换,否则属性会消失</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/设置Hint字体大小/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/设置Hint字体大小/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文属于工具类文章，可以直接使用；本文主要介绍如何为EditText的Hint设置字体大小。&lt;/p&gt;
&lt;p&gt;设置Hint字体大小通常有以下两种方式：&lt;/p&gt;
&lt;h1 id=&quot;静态设置&quot;&gt;&lt;a href=&quot;#静态设置&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="Android_Wiki" scheme="https://fengqingxiuyi.github.io/categories/Android-Wiki/"/>
    
    
  </entry>
  
  <entry>
    <title>接口回调</title>
    <link href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83/"/>
    <id>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/接口回调/</id>
    <published>2016-08-14T10:40:23.000Z</published>
    <updated>2016-08-14T11:31:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍<code>接口回调</code>的相关知识。</p>
<h1 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h1><p>接口的概念：使用 interface 关键字来声明，可以看做是一种特殊的抽象类，可以指定一个类必须做什么，而不是规定它如何去做。</p>
<h1 id="接口的分类"><a href="#接口的分类" class="headerlink" title="接口的分类"></a>接口的分类</h1><p>个人看法：接口分为以下两种：</p>
<p>情况一：狭义的接口：即上述所述(<code>接口的概念</code>)。</p>
<p>情况二：广义的接口：即为了给其他类调用而存在。</p>
<p>接下来依次讲述一番他们的使用方法：</p>
<h2 id="狭义的接口"><a href="#狭义的接口" class="headerlink" title="狭义的接口"></a>狭义的接口</h2><p>情况一：狭义的接口（本文所述为同步回调），即使用 interface 关键字来声明，通常需要经历以下几个步骤：</p>
<p>（1）定义接口 Callback ,包含回调方法 click()，该接口可以重新定义一个，也可以在其他类（如：adapter类）内部，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">click</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（2）在需要设置接口回调的类中“注册接口”，比如类名为Caller，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Callback callback;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback callback)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.callback = callback;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（3）在需要设置接口回调的位置，调用回调方法，例如，为了解耦，需要将adapter中得点击事件回调到外部activity进行操作，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">adapterView.setOnClickListener(v -&gt; &#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</div><div class="line">		callback.click();</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>（4）在activity类中监听回调，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Caller().setCallback(<span class="keyword">new</span> Callback() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="comment">// do something...</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="广义的接口"><a href="#广义的接口" class="headerlink" title="广义的接口"></a>广义的接口</h2><p>情况二：广义的接口：即为了给其他类调用而存在</p>
<p>这种情况非常多，比如说，你自定义了一个View，但是缺少了给这个View设置颜色的方法，这个时候我们就可以定义一个公共的setColor方法，提供给外部调用，这就是一个接口，具体执行步骤如下所示：</p>
<p>（1）在自定义的View中定义如下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.setColor(context.getResources().getColor(color));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（2）在activity中调用该方法即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">activityView.setColor(android.R.color.black);</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此接口回调就讲完了，如果想要深入理解接口回调机制，可以查看以下文章：</p>
<p><a href="http://blog.csdn.net/xiaanming/article/details/8703708" target="_blank" rel="external">一个经典例子让你彻彻底底理解java回调机制</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/接口回调/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/接口回调/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：本文属于工具类文章，可以直接使用；本文主要介绍&lt;code&gt;接口回调&lt;/code&gt;的相关知识。&lt;/p&gt;
&lt;h1 id=&quot;接口的概念&quot;&gt;&lt;a href=&quot;#接口的概念&quot; class=&quot;headerlink&quot; title=&quot;接口的概念&quot;&gt;&lt;/a&gt;接口的概念&lt;/h1&gt;&lt;p&gt;接口
    
    </summary>
    
      <category term="Android_Wiki" scheme="https://fengqingxiuyi.github.io/categories/Android-Wiki/"/>
    
    
  </entry>
  
</feed>
