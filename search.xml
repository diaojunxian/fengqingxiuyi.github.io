<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[declare-styleable中format详解]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/15/Android/View/%E8%87%AA%E5%AE%9A%E4%B9%89View/%E5%B1%9E%E6%80%A7/declare-styleable%E4%B8%ADformat%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>本文转载自：<a href="http://blog.csdn.net/lihengfang/article/details/8290754" target="_blank" rel="external">declare-styleable中format详解</a></p>
<p>我们在做项目的时候，由于android自带的属性不能满足需求，android提供了自定义属性的方法，其中的format是做什么用的？以及如何使用它？下面列出一些常用的。</p>
<h1 id="reference：参考某一资源ID。"><a href="#reference：参考某一资源ID。" class="headerlink" title="reference：参考某一资源ID。"></a>reference：参考某一资源ID。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"background"</span> format = <span class="string">"reference"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ImageView</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span></div><div class="line">	android:background = <span class="string">"@drawable/图片ID"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="color：颜色值。"><a href="#color：颜色值。" class="headerlink" title="color：颜色值。"></a>color：颜色值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"textColor"</span> format = <span class="string">"color"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span></div><div class="line">	android:textColor = <span class="string">"#00FF00"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="boolean：布尔值。"><a href="#boolean：布尔值。" class="headerlink" title="boolean：布尔值。"></a>boolean：布尔值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"focusable"</span> format = <span class="string">"boolean"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span></div><div class="line">	android:focusable = <span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="dimension：尺寸值。"><a href="#dimension：尺寸值。" class="headerlink" title="dimension：尺寸值。"></a>dimension：尺寸值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"layout_width"</span> format = <span class="string">"dimension"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="float：浮点值。"><a href="#float：浮点值。" class="headerlink" title="float：浮点值。"></a>float：浮点值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"AlphaAnimation"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"fromAlpha"</span> format = <span class="string">"float"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"toAlpha"</span> format = <span class="string">"float"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;alpha</div><div class="line">	android:fromAlpha = <span class="string">"1.0"</span></div><div class="line">	android:toAlpha = <span class="string">"0.7"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="integer：整型值。"><a href="#integer：整型值。" class="headerlink" title="integer：整型值。"></a>integer：整型值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"AnimatedRotateDrawable"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"visible"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"frameDuration"</span> format=<span class="string">"integer"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"framesCount"</span> format=<span class="string">"integer"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"pivotX"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"pivotY"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"drawable"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;animated-rotate</div><div class="line">	xmlns:android = <span class="string">"http://schemas.android.com/apk/res/android"</span> </div><div class="line">	android:drawable = <span class="string">"@drawable/图片ID"</span> </div><div class="line">	android:pivotX = <span class="string">"50%"</span> </div><div class="line">	android:pivotY = <span class="string">"50%"</span> </div><div class="line">	android:framesCount = <span class="string">"12"</span> </div><div class="line">	android:frameDuration = <span class="string">"100"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="string：字符串。"><a href="#string：字符串。" class="headerlink" title="string：字符串。"></a>string：字符串。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"MapView"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"apiKey"</span> format = <span class="string">"string"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;com.google.android.maps.MapView</div><div class="line">	android:layout_width = <span class="string">"fill_parent"</span></div><div class="line">	android:layout_height = <span class="string">"fill_parent"</span></div><div class="line">	android:apiKey = <span class="string">"0jOkQ80oD1JL9C6HAja99uGXCRiS2CGjKO_bc_g"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="fraction：百分数。"><a href="#fraction：百分数。" class="headerlink" title="fraction：百分数。"></a>fraction：百分数。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"RotateDrawable"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"visible"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"fromDegrees"</span> format = <span class="string">"float"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"toDegrees"</span> format = <span class="string">"float"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"pivotX"</span> format = <span class="string">"fraction"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"pivotY"</span> format = <span class="string">"fraction"</span> /&gt;</div><div class="line">	&lt;attr name = <span class="string">"drawable"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;rotate</div><div class="line">	xmlns:android = <span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">	android:interpolator = <span class="string">"@anim/动画ID"</span></div><div class="line">	android:fromDegrees = <span class="string">"0"</span></div><div class="line">	android:toDegrees = <span class="string">"360"</span></div><div class="line">	android:pivotX = <span class="string">"200%"</span></div><div class="line">	android:pivotY = <span class="string">"300%"</span></div><div class="line">	android:duration = <span class="string">"5000"</span></div><div class="line">	android:repeatMode = <span class="string">"restart"</span></div><div class="line">	android:repeatCount = <span class="string">"infinite"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="enum：枚举值。"><a href="#enum：枚举值。" class="headerlink" title="enum：枚举值。"></a>enum：枚举值。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name=<span class="string">"orientation"</span>&gt;</div><div class="line">		&lt;enum name=<span class="string">"horizontal"</span> value=<span class="string">"0"</span> /&gt;</div><div class="line">		&lt;enum name=<span class="string">"vertical"</span> value=<span class="string">"1"</span> /&gt;</div><div class="line">	&lt;/attr&gt;           </div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line">	xmlns:android = <span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">	android:orientation = <span class="string">"vertical"</span></div><div class="line">	android:layout_width = <span class="string">"fill_parent"</span></div><div class="line">	android:layout_height = <span class="string">"fill_parent"</span>&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<h1 id="flag：位或运算。"><a href="#flag：位或运算。" class="headerlink" title="flag：位或运算。"></a>flag：位或运算。</h1><p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name=<span class="string">"windowSoftInputMode"</span>&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateUnspecified"</span> value = <span class="string">"0"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateUnchanged"</span> value = <span class="string">"1"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateHidden"</span> value = <span class="string">"2"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateAlwaysHidden"</span> value = <span class="string">"3"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateVisible"</span> value = <span class="string">"4"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"stateAlwaysVisible"</span> value = <span class="string">"5"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"adjustUnspecified"</span> value = <span class="string">"0x00"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"adjustResize"</span> value = <span class="string">"0x10"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"adjustPan"</span> value = <span class="string">"0x20"</span> /&gt;</div><div class="line">		&lt;flag name = <span class="string">"adjustNothing"</span> value = <span class="string">"0x30"</span> /&gt;</div><div class="line">	&lt;/attr&gt;        </div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">	android:name = <span class="string">".StyleAndThemeActivity"</span></div><div class="line">	android:label = <span class="string">"@string/app_name"</span></div><div class="line">	android:windowSoftInputMode = <span class="string">"stateUnspecified | stateUnchanged　|　stateHidden"</span>&gt;</div><div class="line">	&lt;intent-filter&gt;</div><div class="line">		&lt;action android:name = <span class="string">"android.intent.action.MAIN"</span> /&gt;</div><div class="line">		&lt;category android:name = <span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</div><div class="line">	&lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure>
<p>特别要注意：</p>
<p>属性定义时可以指定多种类型值。</p>
<p>（1）属性定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name = <span class="string">"名称"</span>&gt;</div><div class="line">	&lt;attr name = <span class="string">"background"</span> format = <span class="string">"reference|color"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>（2）属性使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ImageView</div><div class="line">	android:layout_width = <span class="string">"42dip"</span></div><div class="line">	android:layout_height = <span class="string">"42dip"</span></div><div class="line">	android:background = <span class="string">"@drawable/图片ID|#00FF00"</span>/&gt;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/declare-styleable中format详解/">https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/declare-styleable中format详解/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[attr和styleable的关系]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/15/Android/View/%E8%87%AA%E5%AE%9A%E4%B9%89View/%E5%B1%9E%E6%80%A7/attr%E5%92%8Cstyleable%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<p>本文转载自：<a href="http://www.jianshu.com/p/61b79e7f88fc" target="_blank" rel="external">深入理解Android 自定义attr Style styleable以及其应用</a></p>
<p>注：本文只截取了其中的<code>attr和styleable的关系</code>部分，其他部分可以查看原文，进行研究。</p>
<h1 id="attr和styleable的关系"><a href="#attr和styleable的关系" class="headerlink" title="attr和styleable的关系"></a>attr和styleable的关系</h1><p>首先要明确一点，<font color="red">attr不依赖于styleable，styleable只是为了方便attr的使用。</font></p>
<p>我们自己定义属性完全可以不放到styleable里面，比如直接在resources文件中定义一些属性：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;attr name=<span class="string">"custom_attr1"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">&lt;attr name=<span class="string">"custom_attr2"</span> format=<span class="string">"string"</span> /&gt;</div></pre></td></tr></table></figure>
<p>定义一个attr就会在R文件里面生成一个Id，那么我们去获取这个属性时，必须调用如下代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int[] custom_attrs = &#123;R.attr.custom_attr1,R.custom_attr2&#125;;</div><div class="line">TypedArray typedArray = context.obtainStyledAttributes(<span class="built_in">set</span>,custom_attrs);</div></pre></td></tr></table></figure>
<p>而通过定义一个styleable，我们可以在R文件里自动生成一个int[]，数组里面的int就是定义在styleable里面的attr的id。所以我们在获取属性的时候就可以直接使用styleable数组来获取一系列的属性。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"custom_attrs"</span>&gt;   </div><div class="line">        &lt;attr name=<span class="string">"custom_attr1"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">        &lt;attr name=<span class="string">"custom_attr2"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<p>获取：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TypedArray typedArray = context.obtainStyledAttributes(<span class="built_in">set</span>,R.styleable.custom_attrs);</div></pre></td></tr></table></figure>
<p>由上面的例子可以知道，定义一个declare-styleable，在获取属性的时候为我们自动提供了一个属性数组。此外，我觉得使用declare-styleable的方式有利于我们我们把相关的属性组织起来，有一个分组的概念，属性的使用范围更加明确。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/attr和styleable的关系/">https://fengqingxiuyi.github.io/2016/08/15/Android/View/自定义View/属性/attr和styleable的关系/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[属性的设置与使用]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/14/Android/View/%E8%87%AA%E5%AE%9A%E4%B9%89View/%E5%B1%9E%E6%80%A7/%E5%B1%9E%E6%80%A7%E7%9A%84%E8%AE%BE%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>为了将某些公用的View抽取成通用的View，我们需要用到自定义View，而且一般情况下，为了方便快捷，我们需要在布局文件中就设置好值，所以我们需要学会运用<code>属性</code>。接下来就让我们一起进入实战演练一番吧！</p>
<p><font color="00AF60"><strong><em>案例：</em></strong></font>比如说我们编写一个ShopCheckItem类，继承于RelativeLayout，用来作为自定义的View，那么我们需要执行以下几个步骤：</p>
<h1 id="编写布局文件"><a href="#编写布局文件" class="headerlink" title="编写布局文件"></a>编写布局文件</h1><p>首先我们需要编写布局文件，不要问为什么，自定义View的办法有很多种，本文只讲这种办法，慢慢看你就懂了！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;RelativeLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:paddingLeft=<span class="string">"20dp"</span></div><div class="line">    android:paddingRight=<span class="string">"20dp"</span>&gt;</div><div class="line"></div><div class="line">    &lt;com.showjoy.view.SHIconFontTextView</div><div class="line">        android:id=<span class="string">"@+id/view_shop_check_item_icon"</span></div><div class="line">        android:layout_width=<span class="string">"32dp"</span></div><div class="line">        android:layout_height=<span class="string">"32dp"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id=<span class="string">"@+id/view_shop_check_item_name"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_centerVertical=<span class="string">"true"</span></div><div class="line">        android:layout_marginLeft=<span class="string">"5dp"</span></div><div class="line">        android:layout_toRightOf=<span class="string">"@id/view_shop_check_item_icon"</span></div><div class="line">        android:textColor=<span class="string">"@color/black"</span></div><div class="line">        android:textSize=<span class="string">"16sp"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;ImageView</div><div class="line">        android:id=<span class="string">"@+id/view_shop_check_item_selected"</span></div><div class="line">        android:layout_width=<span class="string">"25dp"</span></div><div class="line">        android:layout_height=<span class="string">"25dp"</span></div><div class="line">        android:layout_alignParentRight=<span class="string">"true"</span>/&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<h1 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h1><p>接着根据布局，发现我们需要这样一些属性，如：icon、name、selected。于是我们就可以在styles.xml文件中编写自定义的属性了，具体代码如下所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"ShopCheckItem"</span>&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_check_item_icon"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_check_item_name"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_check_item_name_color"</span> format=<span class="string">"color"</span> /&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_check_item_selected"</span> format=<span class="string">"boolean"</span> /&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<h1 id="自定义View"><a href="#自定义View" class="headerlink" title="自定义View"></a>自定义View</h1><p>编写好属性后，我们就可以开始自定义view的编写了，一般包括以下几个步骤：</p>
<h2 id="使用inflate方式将布局转换为View"><a href="#使用inflate方式将布局转换为View" class="headerlink" title="使用inflate方式将布局转换为View"></a>使用inflate方式将布局转换为View</h2><h2 id="找到布局文件中得控件即findViewById"><a href="#找到布局文件中得控件即findViewById" class="headerlink" title="找到布局文件中得控件即findViewById"></a>找到布局文件中得控件即findViewById</h2><h2 id="获取在布局文件中自定义属性的值"><a href="#获取在布局文件中自定义属性的值" class="headerlink" title="获取在布局文件中自定义属性的值"></a>获取在布局文件中自定义属性的值</h2><h2 id="根据自定义属性的值初始化控件"><a href="#根据自定义属性的值初始化控件" class="headerlink" title="根据自定义属性的值初始化控件"></a>根据自定义属性的值初始化控件</h2><h2 id="暴露接口"><a href="#暴露接口" class="headerlink" title="暴露接口"></a>暴露接口</h2><p>注意：接口不一定是interface，只要是提供给别人用的，就算是一个public方法也是接口，如果不清楚，可以查看这篇文章：<a href="../../../../Wiki/接口回调/">接口回调</a></p>
<p>所以，完整代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.showjoy.shop.common.view;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.text.TextUtils;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"><span class="keyword">import</span> android.widget.RelativeLayout;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.showjoy.shop.R;</div><div class="line"><span class="keyword">import</span> com.showjoy.view.SHIconFontTextView;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by qingfeng on 7/20/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShopCheckItem</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SHIconFontTextView viewShopCheckItemIcon;</div><div class="line">    <span class="keyword">private</span> TextView viewShopCheckItemName;</div><div class="line">    <span class="keyword">private</span> ImageView viewShopCheckItemSelected;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShopCheckItem</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        init(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShopCheckItem</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        init(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShopCheckItem</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        inflate(context, R.layout.view_pay_method, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">        viewShopCheckItemIcon = (SHIconFontTextView) findViewById(R.id.view_shop_check_item_icon);</div><div class="line">        viewShopCheckItemName = (TextView) findViewById(R.id.view_shop_check_item_name);</div><div class="line">        viewShopCheckItemSelected = (ImageView) findViewById(R.id.view_shop_check_item_selected);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != attrs) &#123;</div><div class="line">            TypedArray typeArray = context.obtainStyledAttributes(attrs, R.styleable.ShopCheckItem);</div><div class="line"></div><div class="line">            String icon = typeArray.getString(R.styleable.ShopCheckItem_shop_check_item_icon);</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(icon)) &#123;</div><div class="line">                viewShopCheckItemIcon.setText(icon);</div><div class="line">            &#125;</div><div class="line">            String name = typeArray.getString(R.styleable.ShopCheckItem_shop_check_item_name);</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(name)) &#123;</div><div class="line">                viewShopCheckItemName.setText(name);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> color = typeArray.getColor(R.styleable.ShopCheckItem_shop_check_item_name_color,</div><div class="line">                    context.getResources().getColor(R.color.grey5));</div><div class="line">            viewShopCheckItemName.setTextColor(color);</div><div class="line">            <span class="keyword">boolean</span> selected = typeArray.getBoolean(R.styleable.ShopCheckItem_shop_check_item_selected, <span class="keyword">false</span>);</div><div class="line">            <span class="keyword">if</span> (selected) &#123;</div><div class="line">                viewShopCheckItemSelected.setImageResource(R.mipmap.view_shop_check_item_selected);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                viewShopCheckItemSelected.setImageResource(R.drawable.view_shop_check_item_unselected);</div><div class="line">            &#125;</div><div class="line">            typeArray.recycle();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSelected</span><span class="params">(<span class="keyword">boolean</span> selected)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (selected) &#123;</div><div class="line">            viewShopCheckItemIcon.setTextColor(getContext().getResources().getColor(R.color.black));</div><div class="line">            viewShopCheckItemName.setTextColor(getContext().getResources().getColor(R.color.black));</div><div class="line">            viewShopCheckItemSelected.setImageResource(R.mipmap.view_shop_check_item_selected);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            viewShopCheckItemIcon.setTextColor(getContext().getResources().getColor(R.color.grey5));</div><div class="line">            viewShopCheckItemName.setTextColor(getContext().getResources().getColor(R.color.grey5));</div><div class="line">            viewShopCheckItemSelected.setImageResource(R.drawable.view_shop_check_item_unselected);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>是不是很简单，自定义View就是这么简单，当然自定义View不止这么一种方式咯，大家可以自行探索，然后在下方评论区域告诉我，蟹蟹~😄</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/View/自定义View/属性/属性的设置与使用/">https://fengqingxiuyi.github.io/2016/08/14/Android/View/自定义View/属性/属性的设置与使用/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac+GitHub+Hexo+NexT使用注意点]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/14/MGHN/Mac+GitHub+Hexo+NexT%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>注：本文专门用于记录在使用Hexo博客过程中遇到的一些（奇葩的）问题。</p>
<h1 id="favicon不显示"><a href="#favicon不显示" class="headerlink" title="favicon不显示"></a>favicon不显示</h1><p>当我们在搭建Hexo博客的时候，必然会自定义favicon.ico，显示在网页选项卡的左上角，如图所示：</p>
<p><img src="../../../../../images/MGHN/favicon不显示.png" alt="favicon不显示"></p>
<p>设置favicon也很简单，只需要在<code>主题配置文件</code>（_config.yml）中，进行如下操作即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Put your favicon.ico into `hexo-site/source/` directory.</div><div class="line">favicon: /images/Blog/favicon.ico</div></pre></td></tr></table></figure>
<p>如果favicon的路径设置正确，而且清除了缓存，刷新了页面好几次，但favicon仍然不显示的话，可以<font color="red">等待一段时间，再去刷新</font>，可能就会显示了！</p>
<h1 id="404问题"><a href="#404问题" class="headerlink" title="404问题"></a>404问题</h1><p><font color="00AF60"><strong><em>现象：</em></strong></font>从首页点击某篇文章跳转到了404页面！</p>
<p><font color="00AF60"><strong><em>分析：</em></strong></font>既然出现了404页面，那么必定是路径问题；仔细检查路径发现，原来是以前名为mou.md的文件，现在变成了Mou.md。所以在github上路径中文件夹的名字仍然是mou，而不是Mou。</p>
<p><font color="00AF60"><strong><em>解决：</em></strong></font>本来以为只需要执行以下命令就可以了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</div></pre></td></tr></table></figure>
<p>后来发现自己还是太年轻了，因为hexo clean的只是本地的文件，和github完全没有关系，之后想了半天也毫无头绪，于是另辟蹊径：<font color="red">将Mou.md文件再重命名一下，如Mou2.md，执行上述命令之后，再重命名回Mou.md，再执行上述命令就可以了。</font>😄</p>
<p><font color="00AF60"><strong><em>总结：</em></strong></font>当我在重命名md文件时，切忌不可只是进行了<font color="red">大小写转换</font>，因为像这样把文章部署到github上之后，文件名对应的文件夹是不会发生变化的！！！</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/MGHN/Mac+GitHub+Hexo+NexT使用注意点/">https://fengqingxiuyi.github.io/2016/08/14/MGHN/Mac+GitHub+Hexo+NexT使用注意点/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ListView-Header]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/14/Android/View/ListView/ListView-Header/</url>
      <content type="html"><![CDATA[<p>问：ListView没有数据时怎么显示Header？</p>
<p>答：只要ListView不设置为GONE，然后再setAdapter之前添加了headerView，就会显示Header。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/View/ListView/ListView-Header/">https://fengqingxiuyi.github.io/2016/08/14/Android/View/ListView/ListView-Header/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TextView占位符]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/TextView%E5%8D%A0%E4%BD%8D%E7%AC%A6/</url>
      <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍如何简单使用TextView占位符。</p>
<p>这个其实很简单，这里我就直接上例子了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">textView.setText(String.format(<span class="string">"%s考了%d分"</span>, <span class="string">"小明"</span>, <span class="number">88</span>);</div></pre></td></tr></table></figure>
<p>想必大家一看就懂了，置于那些想要深入研究，还有哪些占位符的小伙伴们，可以看以下文章：</p>
<p><a href="http://www.cnblogs.com/fsjohnhuang/p/4094777.html" target="_blank" rel="external">Java魔法堂：String.format详解</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/TextView占位符/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/TextView占位符/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ImageView引用图片上下方空白]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/ImageView%E5%BC%95%E7%94%A8%E5%9B%BE%E7%89%87%E4%B8%8A%E4%B8%8B%E6%96%B9%E7%A9%BA%E7%99%BD/</url>
      <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍如何解决ImageView引用图片上下方空白的问题。</p>
<h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>疑问：当我们将一张图片引用到我们指定的ImageView容器中，可能由于图片尺寸、比例等原因，无法铺满整个容器（表述不好），导致白边的出现，而且怎么去也去不掉。如下布局代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;ImageView</div><div class="line">    	android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    	android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    	android:src=<span class="string">"@mipmap/share_invite"</span>/&gt;</div><div class="line">    </div><div class="line">    &lt;TextView</div><div class="line">    	android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">    	android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    	android:text=<span class="string">"测试空白区域文本"</span>/&gt;</div><div class="line">    </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>如上述布局代码，本身没有任何问题，但是因为图片的尺寸，比例等原因，就可能出现图片和文本之间存在空白区域的问题。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>那么怎么解决呢？</p>
<p>其实很简单，我们只需要为ImageView添加以下属性就可以了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:adjustViewBounds=<span class="string">"true"</span></div></pre></td></tr></table></figure>
<h1 id="adjustViewBounds"><a href="#adjustViewBounds" class="headerlink" title="adjustViewBounds"></a>adjustViewBounds</h1><p>我想，你一定会问，这句话代表着什么意思？为什么这样就可以了呢？这里我就给大家简要解释一下：</p>
<p>Google官方对于<code>adjustViewBounds</code>这个属性是这样介绍的：</p>
<p><code>谷歌原文：</code>Set this to true if you want the ImageView to adjust its bounds to preserve the aspect ratio of its drawable.</p>
<p><code>个人翻译（不喜勿喷）：</code>如果你想要ImageView适应边界，同时保持图片宽高比，可以将它设置为true。</p>
<p><code>我们也可以这样理解：</code>将 android:adjustViewBounds 设置为true，即可去除因图片宽高比等原因导致ImageView直接引用图片时上下方存在空白区域的问题。</p>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><font color="red">图片本身上下方无空白区域!!!</font>



<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/ImageView引用图片上下方空白/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/ImageView引用图片上下方空白/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设置Hint字体大小]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/%E8%AE%BE%E7%BD%AEHint%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F/</url>
      <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍如何为EditText的Hint设置字体大小。</p>
<p>设置Hint字体大小通常有以下两种方式：</p>
<h1 id="静态设置"><a href="#静态设置" class="headerlink" title="静态设置"></a>静态设置</h1><p>静态设置即在布局文件中设置相关属性。</p>
<p>很简单，我们只要在布局文件中，在EditText标签下设置textSize即可实现，但是有些情况好像设置了也没有用，尚不清楚。</p>
<h1 id="动态设置"><a href="#动态设置" class="headerlink" title="动态设置"></a>动态设置</h1><p>动态设置即在代码中动态实现Hint字体大小，有以下两种情况：</p>
<h2 id="已在布局中设置好Hint值"><a href="#已在布局中设置好Hint值" class="headerlink" title="已在布局中设置好Hint值"></a>已在布局中设置好Hint值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHint</span><span class="params">(EditText editText, <span class="keyword">int</span> fontSize)</span> </span>&#123;</div><div class="line">    CharSequence hint = registerGoodsName.getHint();</div><div class="line">    <span class="comment">// 新建一个可以添加属性的文本对象</span></div><div class="line">    SpannableString ss = <span class="keyword">new</span> SpannableString(hint);</div><div class="line">    <span class="comment">// 新建一个属性对象,设置文字的大小</span></div><div class="line">    AbsoluteSizeSpan ass = <span class="keyword">new</span> AbsoluteSizeSpan(fontSize, <span class="keyword">true</span>);</div><div class="line">    <span class="comment">// 附加属性到文本</span></div><div class="line">    ss.setSpan(ass, <span class="number">0</span>, ss.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">    <span class="comment">// 设置hint</span></div><div class="line">    editText.setHint(<span class="keyword">new</span> SpannedString(ss)); <span class="comment">// 一定要进行转换,否则属性会消失</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="未在布局中设置好Hint值"><a href="#未在布局中设置好Hint值" class="headerlink" title="未在布局中设置好Hint值"></a>未在布局中设置好Hint值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHint</span><span class="params">(EditText editText, String hint, <span class="keyword">int</span> fontSize)</span> </span>&#123;</div><div class="line">    <span class="comment">// 新建一个可以添加属性的文本对象</span></div><div class="line">    SpannableString ss = <span class="keyword">new</span> SpannableString(hint);</div><div class="line">    <span class="comment">// 新建一个属性对象,设置文字的大小</span></div><div class="line">    AbsoluteSizeSpan ass = <span class="keyword">new</span> AbsoluteSizeSpan(fontSize, <span class="keyword">true</span>);</div><div class="line">    <span class="comment">// 附加属性到文本</span></div><div class="line">    ss.setSpan(ass, <span class="number">0</span>, ss.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">    <span class="comment">// 设置hint</span></div><div class="line">    editText.setHint(<span class="keyword">new</span> SpannedString(ss)); <span class="comment">// 一定要进行转换,否则属性会消失</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/设置Hint字体大小/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/设置Hint字体大小/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[接口回调]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83/</url>
      <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍<code>接口回调</code>的相关知识。</p>
<h1 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h1><p>接口的概念：使用 interface 关键字来声明，可以看做是一种特殊的抽象类，可以指定一个类必须做什么，而不是规定它如何去做。</p>
<h1 id="接口的分类"><a href="#接口的分类" class="headerlink" title="接口的分类"></a>接口的分类</h1><p>个人看法：接口分为以下两种：</p>
<p>情况一：狭义的接口：即上述所述(<code>接口的概念</code>)。</p>
<p>情况二：广义的接口：即为了给其他类调用而存在。</p>
<p>接下来依次讲述一番他们的使用方法：</p>
<h2 id="狭义的接口"><a href="#狭义的接口" class="headerlink" title="狭义的接口"></a>狭义的接口</h2><p>情况一：狭义的接口（本文所述为同步回调），即使用 interface 关键字来声明，通常需要经历以下几个步骤：</p>
<p>（1）定义接口 Callback ,包含回调方法 click()，该接口可以重新定义一个，也可以在其他类（如：adapter类）内部，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">click</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（2）在需要设置接口回调的类中“注册接口”，比如类名为Caller，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Callback callback;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback callback)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.callback = callback;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（3）在需要设置接口回调的位置，调用回调方法，例如，为了解耦，需要将adapter中得点击事件回调到外部activity进行操作，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">adapterView.setOnClickListener(v -&gt; &#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123;</div><div class="line">		callback.click();</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>（4）在activity类中监听回调，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Caller().setCallback(<span class="keyword">new</span> Callback() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="comment">// do something...</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="广义的接口"><a href="#广义的接口" class="headerlink" title="广义的接口"></a>广义的接口</h2><p>情况二：广义的接口：即为了给其他类调用而存在</p>
<p>这种情况非常多，比如说，你自定义了一个View，但是缺少了给这个View设置颜色的方法，这个时候我们就可以定义一个公共的setColor方法，提供给外部调用，这就是一个接口，具体执行步骤如下所示：</p>
<p>（1）在自定义的View中定义如下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.setColor(context.getResources().getColor(color));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（2）在activity中调用该方法即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">activityView.setColor(android.R.color.black);</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此接口回调就讲完了，如果想要深入理解接口回调机制，可以查看以下文章：</p>
<p><a href="http://blog.csdn.net/xiaanming/article/details/8703708" target="_blank" rel="external">一个经典例子让你彻彻底底理解java回调机制</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/接口回调/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/接口回调/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[将layout转换为Bitmap]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/%E5%B0%86layout%E8%BD%AC%E6%8D%A2%E4%B8%BABitmap/</url>
      <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍如何将layout转换为Bitmap，以及遇到的一些注意点。</p>
<p>（1）编写好要转换为图片的布局文件，必须设置根控件的id。</p>
<p>（2）在要执行该业务的类中使用View.inflate的方式将布局转换为View。</p>
<p>（3）转换为View之后，找到布局文件中的控件，并为其设置数据，如果无需设置可省略。</p>
<p>（4）将View添加到要执行该业务的类的某个控件中，并将这个控件设置为invisible，便于<code>隐藏渲染</code>。<font color="red">注意：此控件的父控件应该为RealtiveLayout，避免出现空白区域，影响用户体验。</font></p>
<p>（5）调用以下方法，将layout转换为Bitmap：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout2Bitmap</span><span class="params">(ViewGroup viewGroup)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> width = viewGroup.getMeasuredWidth();</div><div class="line">    <span class="keyword">int</span> height = viewGroup.getMeasuredHeight();</div><div class="line">    Bitmap b = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);</div><div class="line">    Canvas canvas = <span class="keyword">new</span> Canvas(b);</div><div class="line">    viewGroup.draw(canvas);</div><div class="line">    img.setImageBitmap(b);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（6）<font color="red">注意：执行完第4步后，不能立刻执行第5步，因为此时页面可能还没有渲染完毕，直接执行第5步会导致提示width和height必须大于0的异常发生，需要根据业务需要，在合适的地方执行。</font></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/将layout转换为Bitmap/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/将layout转换为Bitmap/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[获取指定包名下的Activity]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E5%8C%85%E5%90%8D%E4%B8%8B%E7%9A%84Activity/</url>
      <content type="html"><![CDATA[<p>注：本文属于工具类文章，可以直接使用；本文主要介绍如何获取指定包名下的所有Activity，并实现Activity的跳转。</p>
<h1 id="Activity类文件"><a href="#Activity类文件" class="headerlink" title="Activity类文件"></a>Activity类文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getActivities</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    PackageInfo packageInfo;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        packageInfo = context.getPackageManager().getPackageInfo(</div><div class="line">                context.getPackageName(), PackageManager.GET_ACTIVITIES);</div><div class="line">        List&lt;String&gt; activityNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        List&lt;ActivityInfo&gt; activityInfos = Arrays.asList(packageInfo.activities);</div><div class="line">        <span class="comment">// 将activityInfos中的name添加到集合activityNames中</span></div><div class="line">        <span class="keyword">for</span> (ActivityInfo activityInfo : activityInfos) &#123;</div><div class="line">        activityNames.add(activityInfo.name.substring(activityInfo.name.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 显示ListView</span></div><div class="line">        <span class="keyword">if</span> (activityNames != <span class="keyword">null</span>) &#123;</div><div class="line">            testListview.setAdapter(<span class="keyword">new</span> ArrayAdapter&lt;&gt;(context,</div><div class="line">                    android.R.layout.simple_list_item_1, activityNames));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 跳转到指定的Activity页面</span></div><div class="line">        testListview.setOnItemClickListener((parent, view, position, id) -&gt; &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                activity.startActivity(<span class="keyword">new</span> Intent(activity, Class.forName(activityInfos.get(position).name)));</div><div class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;RelativeLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:background=<span class="string">"@color/black"</span>&gt;</div><div class="line"></div><div class="line">    &lt;ListView</div><div class="line">        android:id=<span class="string">"@+id/test_listview"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:divider=<span class="string">"@color/white"</span></div><div class="line">        android:dividerHeight=<span class="string">"1dp"</span> /&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/获取指定包名下的Activity/">https://fengqingxiuyi.github.io/2016/08/14/Android/Wiki/获取指定包名下的Activity/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android模板制作]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/13/Android/%E6%A8%A1%E6%9D%BF/Android%E6%A8%A1%E6%9D%BF%E5%88%B6%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>本文专门介绍和<code>模板</code>相关的知识，那么问题来了：</p>
<ol>
<li>模板是什么</li>
<li>模板使用位置</li>
<li>模板如何创建(包含模板存放位置)</li>
<li>模板如何使用</li>
</ol>
<p>接下来，我就按照以上顺序为大家解读看起来高大上的<code>模板</code>。</p>
<h1 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h1><font color="red">本文所有模板路径均为Mac下的路径，Windows用户也可以查看路径中的相关信息，进而快速定位。</font>

<h1 id="模板是什么"><a href="#模板是什么" class="headerlink" title="模板是什么"></a>模板是什么</h1><p>个人理解：模板即为了帮助人们简化某些固定而繁琐的操作而制作的工具，用于快速实现这些固定而繁琐的操作。</p>
<h1 id="模板使用位置"><a href="#模板使用位置" class="headerlink" title="模板使用位置"></a>模板使用位置</h1><p>当我们在使用AndroidStudio进行开发的时候，将鼠标选中工程项目，然后右击可以在New选项下面看到很多AndroidStudio提供给我们的模板类别，例如：Activity、AIDL等。具体可看下图：</p>
<p><img src="../../../../../../images/Android/模板/工程右击-New.png" alt="工程右击-New"></p>
<p>细心的你会发现在这些模板的上面有一个选项，叫：Edit File Templates…，如下图所示：</p>
<p><img src="../../../../../../images/Android/模板/Edit-File-Templates.png" alt="Edit-File-Templates"></p>
<p>点击这个选项，会进入自定义模板页面，其中内置的变量在页面下方都有解释，是不是很方便，但是它有一个致命的缺点：一次只能创建一个java文件。具体可看下图：</p>
<p><img src="../../../../../../images/Android/模板/Edit-File-Templates-in.png" alt="Edit-File-Templates-in"></p>
<p>因为觉得这个很简单，所以我就不做过多阐述了，接下来我就仔细阐述一下，如何一次创建多个java文件，而且还可以选择是否包含xml文件。</p>
<h1 id="模板如何创建-包含模板存放位置"><a href="#模板如何创建-包含模板存放位置" class="headerlink" title="模板如何创建(包含模板存放位置)"></a>模板如何创建(包含模板存放位置)</h1><h2 id="警告-1"><a href="#警告-1" class="headerlink" title="警告"></a>警告</h2><p>如果直接复制相关代码的话，请注意其中的注释，可能会带来一些问题，如果出现问题，可以把#开头的注释去除，再尝试！！！</p>
<p>如果不懂上面这段话的意思的话，可以先行跳过。</p>
<h2 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h2><p>AndroidStudio的模板是使用<code>FreeMarker</code>模板引擎制作的，有兴趣的可以了解一下。</p>
<p>本文参考：<a href="http://www.i-programmer.info/professional-programmer/resources-and-tools/6845-android-adt-template-format-document.html" target="_blank" rel="external">http://www.i-programmer.info/professional-programmer/resources-and-tools/6845-android-adt-template-format-document.html</a></p>
<h2 id="案例-amp-解答"><a href="#案例-amp-解答" class="headerlink" title="案例&amp;解答"></a>案例&amp;解答</h2><font color="00AF60"><strong><em>案例：</em></strong></font>

<p>由于现在的项目使用的是<code>类MVP架构</code>，所以基本上每个模块都需要entity、request、activity、presenter、viewmodel这五个类，无论是登录注册模块，还是商品详情页、首页、收益页面等模块，都无法摆脱这几个类，因此准备为这个<code>类MVP架构</code>制作一个通用模板。</p>
<font color="00AF60"><strong><em>解答：</em></strong></font>

<p>制作好模板之后，我想说，其实很简单，只是把会变化的部分用<code>${...}</code>替换罢了，不过在这里我们还是老老实实的从头开始吧！</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="模板存放位置"><a href="#模板存放位置" class="headerlink" title="模板存放位置"></a>模板存放位置</h3><p>首页我们进入AndroidStudio安装目录下的<code>/plugins/android/lib/templates</code>文件夹，这就是AndroidStudio模板文件的目录了，到这里你可能还有所迷惑，因为你没有发现像我刚开始所说的Activity、AIDL等模板文件，没关系，你再进入<code>activities</code>文件夹下面就可以看到Activity的相关模板了，进入<code>other</code>文件夹就可以看到AIDL的相关模板了。</p>
<h3 id="模板副本"><a href="#模板副本" class="headerlink" title="模板副本"></a>模板副本</h3><p>这里我们选择<code>activities</code>文件夹，然后你是不是觉得手足无措，不知道如何下手？其实一开始我也不知道怎么做，但是没关系，AndroidStudio不是已经提供给我们这么多模板了么，为了简单起见，我们在这里拷贝一份<code>EmptyActivity</code>，并将其重命名为<code>MVPActivity</code>，<font color="red"><strong><em>放在当前目录下</em></strong></font>。</p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>打开文件夹后，我们看到以下目录结构：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">EmptyActivity</div><div class="line">  |----globals.xml.ftl <span class="comment"># 全局变量文件</span></div><div class="line">  |----recipe.xml.ftl  <span class="comment"># 配置要引用的模板路径以及生成文件的路径</span></div><div class="line">  |----root</div><div class="line">    |----src</div><div class="line">      |----app_package</div><div class="line">        |----SimpleActivity.java.ftl <span class="comment"># 模板文件</span></div><div class="line">  |----template_blank_activity.png   <span class="comment"># 创建模板时界面左边的预览图</span></div><div class="line">  |----template.xml <span class="comment"># 模板的配置信息以及要输入的参数</span></div></pre></td></tr></table></figure>
<p>接下我们可以根据目录结构顺序（建议按以下顺序看），打开看一下，这里大致介绍一下：</p>
<h4 id="globals-xml-ftl"><a href="#globals-xml-ftl" class="headerlink" title="globals.xml.ftl"></a>globals.xml.ftl</h4><p><code>globals.xml.ftl</code>中都是类似</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;global id=<span class="string">"hasNoActionBar"</span> <span class="built_in">type</span>=<span class="string">"boolean"</span> value=<span class="string">"false"</span> /&gt;</div></pre></td></tr></table></figure>
<p>这样的语句，显然它的意思就是我定义了一个全局变量hasNoActionBar，它的类型是boolean，默认值为false。</p>
<h4 id="recipe-xml-ftl"><a href="#recipe-xml-ftl" class="headerlink" title="recipe.xml.ftl"></a>recipe.xml.ftl</h4><p><code>recipe.xml.ftl</code>稍微有些复杂，这里讲解以下instantiate、open等几个重要参数：</p>
<p><font color="00AF60"><strong><em>copy</em></strong></font>：复制–将from中的文件复制到to路径下，但并不会将ftl中得变量进行转换，即如果源文件中的类名为${activityClass}，复制过后类名还是${activityClass}转换为我们需要的类名。</p>
<p><font color="00AF60"><strong><em>merge</em></strong></font>：合并–将from中的文件合并到to路径下的文件中。</p>
<p><font color="00AF60"><strong><em>instantiate</em></strong></font>：和copy类似，也是将from中的文件复制到to路径下，但是它会将${activityClass}转换为我们需要的类名。其实有这样一个过程：<font color="red">ftl-&gt;freemarker process -&gt; java</font>。</p>
<p><font color="00AF60"><strong><em>open</em></strong></font>：代码生成后，打开file中指定的文件。</p>
<h4 id="SimpleActivity-java-ftl"><a href="#SimpleActivity-java-ftl" class="headerlink" title="SimpleActivity.java.ftl"></a>SimpleActivity.java.ftl</h4><p>打开<code>SimpleActivity.java.ftl</code>文件，会发现和我们创建Activity类后及其类似，只是把包名、类名、布局名等用<code>${...}</code>替换了，其实<code>${...}</code>中得内容都是id名，这里不做过多阐述，我们继续往下看。</p>
<h4 id="template-xml"><a href="#template-xml" class="headerlink" title="template.xml"></a>template.xml</h4><p><code>template.xml</code>：打开以后你会发现这个文件好长，看来是重头戏了！！！是的，我们来详细解读一下：</p>
<p>一眼看去是不是和AndroidManifest.xml中得Application节点中的内容结构很相似（包括Application节点）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;template</div><div class="line">    format=<span class="string">"5"</span>   <span class="comment"># The template format version that this template adheres to. Should be 3</span></div><div class="line">    revision=<span class="string">"5"</span> <span class="comment"># 可选，当你想更新模板的时候可以以整数的形式增加此模板的版本号	</span></div><div class="line">    name=<span class="string">"Empty Activity"</span> <span class="comment"># 模板显示的名字</span></div><div class="line">    minApi=<span class="string">"7"</span>   <span class="comment"># 可选，模板所需的最小API值，IDE将确保在实例化模板之前，目标工程的minSdkVersion不低于这个值</span></div><div class="line">    minBuildApi=<span class="string">"14"</span>      <span class="comment"># 可选，模板所需的最小编译API，值为API级别，IDE将确保在实例化模板之前，项目工程的API等级大于或等于这个值</span></div><div class="line">    description=<span class="string">"Creates a new empty activity"</span>&gt; <span class="comment"># 模板的描述信息</span></div><div class="line"></div><div class="line">    &lt;category value=<span class="string">"Activity"</span> /&gt; <span class="comment"># 模板类型，用于在菜单栏File-New下显示，如Activity、AIDL等</span></div><div class="line">    &lt;formfactor value=<span class="string">"Mobile"</span> /&gt; <span class="comment"># 如同我们在创建module时所显示的类型，如：Wear、TV等。</span></div><div class="line"></div><div class="line">    &lt;parameter</div><div class="line">        id=<span class="string">"activityClass"</span>   <span class="comment"># 唯一标示，在ftl文件中可以用$&#123;activityClass&#125;获取参数值</span></div><div class="line">        name=<span class="string">"Activity Name"</span> <span class="comment"># 创建模板时在文本框左边显示的该文本框名称</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span>        <span class="comment"># 这个参数的类型，如：string, boolean, enum等</span></div><div class="line">        constraints=<span class="string">"class|unique|nonempty"</span>       <span class="comment"># 可选，这个参数的约束类型，可用|符号联合使用，constraints值类型大全请看4.5</span></div><div class="line">        suggest=<span class="string">"<span class="variable">$&#123;layoutToActivity(layoutName)&#125;</span>"</span> <span class="comment"># 可选，自动提示，比如输入layout的值可以自动生成activityClass</span></div><div class="line">        default=<span class="string">"MainActivity"</span> <span class="comment"># 可选，参数默认值，创建模板时在文本框中显示，相当于hint</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"The name of the activity class to create"</span> /&gt; <span class="comment"># 创建模板时，选中文本框后，在底部显示的关于该文本框的帮助信息</span></div><div class="line"></div><div class="line">    &lt;!-- 128x128 thumbnails relative to template.xml --&gt;</div><div class="line">    &lt;thumbs&gt;</div><div class="line">        &lt;!-- default thumbnail is required --&gt;</div><div class="line">        &lt;thumb&gt;template_blank_activity.png&lt;/thumb&gt; <span class="comment"># 可选，用于创建模板时，在左边显示名为template_blank_activity的预览图片</span></div><div class="line">    &lt;/thumbs&gt;</div><div class="line"></div><div class="line">    &lt;globals file=<span class="string">"globals.xml.ftl"</span> /&gt; <span class="comment"># 可选，将工程定义的全局变量包含进来</span></div><div class="line">    &lt;execute file=<span class="string">"recipe.xml.ftl"</span> /&gt;  <span class="comment"># 开始执行模板渲染</span></div><div class="line"></div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<h4 id="constraints值类型大全"><a href="#constraints值类型大全" class="headerlink" title="constraints值类型大全"></a>constraints值类型大全</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Valid constraint types are:</div><div class="line">	nonempty — the value must not be empty</div><div class="line">	apilevel — the value should represent a numeric API level</div><div class="line">	package — the value should represent a valid Java package name</div><div class="line">	class — the value should represent a valid Java class name</div><div class="line">	activity — the value should represent a fully-qualified activity class name</div><div class="line">	layout — the value should represent a valid layout resource name</div><div class="line">	drawable — the value should represent a valid drawable resource name</div><div class="line">	string — the value should represent a valid string resource name</div><div class="line">	id — the value should represent a valid id resource name</div><div class="line">	unique — the value must be unique; this constraint only makes sense when other constraints are specified, such as layout, <span class="built_in">which</span> would mean that the value should not represent an existing layout resource name</div><div class="line">	exists — the value must already exist; this constraint only makes sense when other constraints are specified, such as layout, <span class="built_in">which</span> would mean that the value should represent an existing layout resource name</div></pre></td></tr></table></figure>
<h3 id="template-xml制作"><a href="#template-xml制作" class="headerlink" title="template.xml制作"></a>template.xml制作</h3><p>到这里相信大家对template.xml文件有了一定的了解了，好了，让我们来大干一场吧！</p>
<h4 id="MVP版template-xml"><a href="#MVP版template-xml" class="headerlink" title="MVP版template.xml"></a>MVP版template.xml</h4><p>既然这里详细的讲解了template.xml文件，我们先从template.xml文件入手吧，这里我就不一个个细说了，直接上完整代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;template</div><div class="line">    format=<span class="string">"2"</span>          <span class="comment"># 可修改，此处已修改</span></div><div class="line">    revision=<span class="string">"2"</span>        <span class="comment"># 可修改，此处已修改</span></div><div class="line">    name=<span class="string">"MVP Activity"</span> <span class="comment"># 需要修改</span></div><div class="line">    minApi=<span class="string">"7"</span>          <span class="comment"># 可修改</span></div><div class="line">    minBuildApi=<span class="string">"14"</span>    <span class="comment"># 可修改</span></div><div class="line">    description=<span class="string">"Creates a new MVP activity"</span>&gt; <span class="comment"># 需要修改</span></div><div class="line"></div><div class="line">    &lt;category value=<span class="string">"AAShowJoyMVP"</span> /&gt; <span class="comment"># 可修改，此处已修改</span></div><div class="line">    &lt;formfactor value=<span class="string">"Mobile"</span> /&gt;     <span class="comment"># 一般不修改</span></div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># Activity类</span></div><div class="line">        id=<span class="string">"activityClass"</span>   <span class="comment"># 可修改</span></div><div class="line">        name=<span class="string">"Activity Name"</span> <span class="comment"># 可修改</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span>        <span class="comment"># 一般不修改</span></div><div class="line">        constraints=<span class="string">"class|unique|nonempty"</span> <span class="comment"># 一般不修改</span></div><div class="line">        default=<span class="string">"TestActivity"</span> <span class="comment"># 可修改，此处已修改</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"The name of the activity class to create"</span> /&gt; <span class="comment"># 可修改，此处未修改</span></div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># Activity类的布局文件</span></div><div class="line">        id=<span class="string">"layoutName"</span></div><div class="line">        name=<span class="string">"Layout Name"</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span></div><div class="line">        constraints=<span class="string">"layout|unique|nonempty"</span></div><div class="line">        suggest=<span class="string">"<span class="variable">$&#123;classToResource(activityClass)&#125;</span>_activity"</span> <span class="comment"># 可修改，此处已修改，若不明白可以跳过，之后会有详解！！！</span></div><div class="line">        default=<span class="string">"test_activity"</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"The name of the layout to create for the activity"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># 是否作为启动Activity</span></div><div class="line">        id=<span class="string">"isLauncher"</span></div><div class="line">        name=<span class="string">"Launcher Activity"</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"boolean"</span></div><div class="line">        default=<span class="string">"false"</span> <span class="comment"># 默认非启动Activity</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"If true, this activity will have a CATEGORY_LAUNCHER intent filter, making it visible in the launcher"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># 包名</span></div><div class="line">        id=<span class="string">"packageName"</span></div><div class="line">        name=<span class="string">"Package name"</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span></div><div class="line">        constraints=<span class="string">"package"</span></div><div class="line">        default=<span class="string">"com.showjoy.shop"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># viewModel类</span></div><div class="line">        id=<span class="string">"viewModelClass"</span></div><div class="line">        name=<span class="string">"View Model Name"</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span></div><div class="line">        constraints=<span class="string">"class|nonempty|unique"</span></div><div class="line">        default=<span class="string">"TestViewModel"</span></div><div class="line">        suggest=<span class="string">"<span class="variable">$&#123;underscoreToCamelCase(classToResource(activityClass))&#125;</span>ViewModel"</span> <span class="comment"># 此类同布局文件，之后会有详解！！！</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"The name of the ViewModel to create"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># presenter类</span></div><div class="line">        id=<span class="string">"presenterClass"</span></div><div class="line">        name=<span class="string">"Presenter Name"</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span></div><div class="line">        constraints=<span class="string">"class|nonempty|unique"</span></div><div class="line">        default=<span class="string">"TestPresenter"</span></div><div class="line">        suggest=<span class="string">"<span class="variable">$&#123;underscoreToCamelCase(classToResource(activityClass))&#125;</span>Presenter"</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"The name of the Presenter to create"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># request类</span></div><div class="line">        id=<span class="string">"requestClass"</span></div><div class="line">        name=<span class="string">"Request Name"</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span></div><div class="line">        constraints=<span class="string">"class|nonempty|unique"</span></div><div class="line">        default=<span class="string">"TestRequest"</span></div><div class="line">        suggest=<span class="string">"<span class="variable">$&#123;underscoreToCamelCase(classToResource(activityClass))&#125;</span>Request"</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"The name of the Request to create"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;parameter          <span class="comment"># entity类</span></div><div class="line">        id=<span class="string">"entityClass"</span></div><div class="line">        name=<span class="string">"Entity Name"</span></div><div class="line">        <span class="built_in">type</span>=<span class="string">"string"</span></div><div class="line">        constraints=<span class="string">"class|nonempty|unique"</span></div><div class="line">        default=<span class="string">"TestEntity"</span></div><div class="line">        suggest=<span class="string">"<span class="variable">$&#123;underscoreToCamelCase(classToResource(activityClass))&#125;</span>Entity"</span></div><div class="line">        <span class="built_in">help</span>=<span class="string">"The name of the Entity to create"</span> /&gt;</div><div class="line">       </div><div class="line"></div><div class="line">    &lt;globals file=<span class="string">"globals.xml.ftl"</span> /&gt; <span class="comment"># 一般不修改</span></div><div class="line">    &lt;execute file=<span class="string">"recipe.xml.ftl"</span> /&gt;  <span class="comment"># 一般不修改</span></div><div class="line"></div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p>template.xml文件的使用到这里就结束了，还是比较简单的，以下阐述之前所留下的两个问题：</p>
<p>（1）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">suggest=<span class="string">"<span class="variable">$&#123;classToResource(activityClass)&#125;</span>_activity"</span></div></pre></td></tr></table></figure>
<p>classToResource(activityClass)：这句话的意思是，当我们在创建该模板后，在activityClass对应的文本框中输入某个值，比如：test，它会直接在layoutName对应的文本框中显示，即：test，所以以完整的语句（1）而言，此时layoutName对应的文本框中显示的应该是test_activity。</p>
<p>（2）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">suggest=<span class="string">"<span class="variable">$&#123;underscoreToCamelCase(classToResource(activityClass))&#125;</span>ViewModel"</span></div></pre></td></tr></table></figure>
<p>classToResource(activityClass)在（1）中描述的已经很清楚了，即为test，那么underscoreToCamelCase又是什么意思呢？其实就是将test转换为驼峰命名的方法，即Test。所以以完整的语句（2）而言，此时viewModelClass对应的文本框中显示的应该是TestViewModel。</p>
<p>如果你觉得文字描述过于繁琐，仍然看不懂的话，可以查看以下gif：</p>
<p><img src="../../../../../../images/Android/模板/AndroidStudio自带模板列表-suggest.gif" alt="AndroidStudio自带模板列表-suggest"></p>
<h4 id="MVP版目录结构"><a href="#MVP版目录结构" class="headerlink" title="MVP版目录结构"></a>MVP版目录结构</h4><p>接下来我们就可以把要制作成模板的类，拷贝到相应的文件夹中，此时的目录结构为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">MVPActivity</div><div class="line">  |----globals.xml.filter</div><div class="line">  |----recipe.xml.ftl</div><div class="line">  |----activity_layout_recipe.xml.filter <span class="comment"># 此文件与recipe类似，只是因为解耦思想，所以将class和layout分别引入</span></div><div class="line">  |----root</div><div class="line">    |----src</div><div class="line">      |----app_package</div><div class="line">        |----classes</div><div class="line">          |----Activity.java.ftl</div><div class="line">          |----Entity.java.ftl</div><div class="line">          |----Presenter.java.ftl</div><div class="line">          |----Request.java.ftl</div><div class="line">          |----ViewModel.java.ftl</div><div class="line">        |----layout</div><div class="line">          |----activity_layout.xml.ftl</div><div class="line">  |----template.xml</div></pre></td></tr></table></figure>
<h4 id="Request-java-ftl"><a href="#Request-java-ftl" class="headerlink" title="Request.java.ftl"></a>Request.java.ftl</h4><p>为了方便而又全面的进行讲解，此处我们以Request.java.ftl文件为例，这里我就直接上全部代码了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package <span class="variable">$&#123;packageName&#125;</span>.request;                <span class="comment"># $&#123;packageName&#125;对应的是template.xml文件中id为packageName的参数设置的字符串，如果该类不在包名根目录下，可以在后面添加相应的module名。</span></div><div class="line"></div><div class="line">import android.support.annotation.NonNull;     <span class="comment"># 如果包名中未涉及到在创建模板时设置的包名和类名，则无需修改</span></div><div class="line">import <span class="variable">$&#123;packageName&#125;</span>.entities.<span class="variable">$&#123;entityClass&#125;</span>; <span class="comment"># 如果包名中涉及到在创建模板时设置的包名和类名，则只需相对应的进行修改即可</span></div><div class="line"></div><div class="line">/**</div><div class="line"> * 将以下涉及到在创建模板时设置的包名和类名，进行如下相对应的替换即可，布局文件也是这样替换的！！！</div><div class="line"> */</div><div class="line">public class <span class="variable">$&#123;requestClass&#125;</span> extends SHGetRequest&lt;<span class="variable">$&#123;entityClass&#125;</span>&gt; &#123;</div><div class="line">    @Override</div><div class="line">    protected Class&lt;<span class="variable">$&#123;entityClass&#125;</span>&gt; <span class="function"><span class="title">getDataClass</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> <span class="variable">$&#123;entityClass&#125;</span>.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected TypeReference&lt;<span class="variable">$&#123;entityClass&#125;</span>&gt; <span class="function"><span class="title">getDataTypeReference</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @NonNull</div><div class="line">    @Override</div><div class="line">    protected String <span class="function"><span class="title">getRequestUrl</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h4><p>接下来我们来看一下布局文件的替换：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;RelativeLayout</div><div class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    tools:context=<span class="string">"<span class="variable">$&#123;relativePackage&#125;</span>.<span class="variable">$&#123;activityClass&#125;</span>"</span>&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<p>虽然说tools命名空间一般都是可有可无的，这里为了全面，也讲述以下，你应该发现了一个从未见过的id：relativePackage，不用迷惑，估计你也想到了，其实我就是在globals.xml.ftl文件中定义了一个全局变量而已，它的值默认为包名，具体代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;global id=<span class="string">"relativePackage"</span> <span class="built_in">type</span>=<span class="string">"string"</span> value=<span class="string">"<span class="variable">$&#123;packageName&#125;</span>"</span>/&gt;</div></pre></td></tr></table></figure>
<h4 id="globals-xml-ftl-1"><a href="#globals-xml-ftl-1" class="headerlink" title="globals.xml.ftl"></a>globals.xml.ftl</h4><p>既然说到了globals.xml.ftl文件，我们就去看看好了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;globals&gt;</div><div class="line">    &lt;global id=<span class="string">"hasNoActionBar"</span> <span class="built_in">type</span>=<span class="string">"boolean"</span> value=<span class="string">"false"</span> /&gt;</div><div class="line">    &lt;global id=<span class="string">"parentActivityClass"</span> value=<span class="string">""</span> /&gt;</div><div class="line">    &lt;global id=<span class="string">"simpleLayoutName"</span> value=<span class="string">"<span class="variable">$&#123;layoutName&#125;</span>"</span> /&gt;</div><div class="line">    &lt;global id=<span class="string">"excludeMenu"</span> <span class="built_in">type</span>=<span class="string">"boolean"</span> value=<span class="string">"true"</span> /&gt;</div><div class="line">    &lt;global id=<span class="string">"generateActivityTitle"</span> <span class="built_in">type</span>=<span class="string">"boolean"</span> value=<span class="string">"false"</span> /&gt;</div><div class="line">    &lt;global id=<span class="string">"relativePackage"</span> <span class="built_in">type</span>=<span class="string">"string"</span> value=<span class="string">"<span class="variable">$&#123;packageName&#125;</span>"</span>/&gt;</div><div class="line">    &lt;<span class="comment">#include "../common/common_globals.xml.ftl" /&gt;</span></div><div class="line">&lt;/globals&gt;</div></pre></td></tr></table></figure>
<p>其实并没有什么，global代表的都是全局变量，#include代表的是引用的文件，相当于继承。</p>
<h4 id="recipe-xml-ftl-1"><a href="#recipe-xml-ftl-1" class="headerlink" title="recipe.xml.ftl"></a>recipe.xml.ftl</h4><p>然后就只有recipe.xml.ftl文件了，也快结束了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;recipe&gt;</div><div class="line">    &lt;<span class="comment">#include "../common/recipe_manifest.xml.ftl" /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment"># 引入同级目录中的activity_layout_recipe.xml.ftl文件，其内容会在下一节中讲述</span></div><div class="line">    &lt;<span class="comment">#include "activity_layout_recipe.xml.ftl" /&gt;	</span></div><div class="line"></div><div class="line">    &lt;instantiate from=<span class="string">"src/app_package/classes/Activity.java.ftl"</span></div><div class="line">      to=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(srcOut)&#125;</span>/<span class="variable">$&#123;activityClass&#125;</span>.java"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;instantiate from=<span class="string">"src/app_package/classes/ViewModel.java.ftl"</span></div><div class="line">      to=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(srcOut)&#125;</span>/<span class="variable">$&#123;viewModelClass&#125;</span>.java"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;instantiate from=<span class="string">"src/app_package/classes/Entity.java.ftl"</span></div><div class="line">      to=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(srcOut)&#125;</span>/entities/<span class="variable">$&#123;entityClass&#125;</span>.java"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;instantiate from=<span class="string">"src/app_package/classes/Presenter.java.ftl"</span></div><div class="line">      to=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(srcOut)&#125;</span>/<span class="variable">$&#123;presenterClass&#125;</span>.java"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;instantiate from=<span class="string">"src/app_package/classes/Request.java.ftl"</span></div><div class="line">      to=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(srcOut)&#125;</span>/request/<span class="variable">$&#123;requestClass&#125;</span>.java"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;open file=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(srcOut)&#125;</span>/<span class="variable">$&#123;viewModelClass&#125;</span>.java"</span> /&gt;</div><div class="line">    </div><div class="line">    &lt;open file=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(resOut)&#125;</span>/layout/<span class="variable">$&#123;layoutName&#125;</span>.xml"</span> /&gt;</div><div class="line">    </div><div class="line">&lt;/recipe&gt;</div></pre></td></tr></table></figure>
<p><code>instantiate</code>的作用在上面已经讲的很清楚了，简单来说就是将ftl文件转换为java文件，而<code>open</code>指的是在创建模板成功后，打开指定的文件，很简单吧，这里只有一个注意点：<font color="red"><strong><em>路径</em></strong></font> 不要写错了！！！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$&#123;escapeXmlAttribute(srcOut)&#125;</span>代表的即为包名所代表的路径</div><div class="line"><span class="variable">$&#123;escapeXmlAttribute(resOut)&#125;</span>代表的是res根目录</div></pre></td></tr></table></figure>
<h4 id="activity-layout-recipe-xml-ftl"><a href="#activity-layout-recipe-xml-ftl" class="headerlink" title="activity_layout_recipe.xml.ftl"></a>activity_layout_recipe.xml.ftl</h4><p>之前因为解耦思想，所以把布局文件的recipe文件单独处理了，即为activity_layout_recipe.xml.ftl，打开文件，其实很简单：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;recipe&gt;</div><div class="line"></div><div class="line">    &lt;instantiate from=<span class="string">"src/app_package/layout/activity_layout.xml.ftl"</span></div><div class="line">                 to=<span class="string">"<span class="variable">$&#123;escapeXmlAttribute(resOut)&#125;</span>/layout/<span class="variable">$&#123;layoutName&#125;</span>.xml"</span> /&gt;</div><div class="line"></div><div class="line">&lt;/recipe&gt;</div></pre></td></tr></table></figure>
<p>这里就不做阐述了，大家看上一节就明白了。</p>
<h1 id="模板如何使用"><a href="#模板如何使用" class="headerlink" title="模板如何使用"></a>模板如何使用</h1><p>模板创建好之后，我们首先需要的是验证是否能够正确创建出我们需要的部分，且没有错误发生，这个过程其实就是模板使用的过程，具体可以参考<code>第2章模板使用位置</code>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，Android模板制作已经全部完成了，本文篇幅还是比较长的，如果有什么疑问可以评论，我会尽力解决每一个问题的，谢谢，码字好累额！！！</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/13/Android/模板/Android模板制作/">https://fengqingxiuyi.github.io/2016/08/13/Android/模板/Android模板制作/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[支付宝支付-注意点]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/13/Android/%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B/%E6%94%AF%E4%BB%98%E5%AE%9D/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98-%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>由于支付宝SDK对于整个支付流程已经介绍的十分详细了，在这里我就简单说一些注意点。</p>
<p>由于存在支付宝可能没有安装的情况，所以我们在调用支付宝支付时，需要对其进行判断，做出不同的处理方式，即是使用客户端支付，还是使用H5支付，这里简单阐述一下：</p>
<h1 id="情况一：已安装支付宝客户端"><a href="#情况一：已安装支付宝客户端" class="headerlink" title="情况一：已安装支付宝客户端"></a>情况一：已安装支付宝客户端</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 唤醒支付宝支付</div><div class="line"> * <span class="doctag">@param</span> data 服务端返回订单数据</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">payOrder</span><span class="params">(JSONObject data)</span> </span>&#123;</div><div class="line">    registerLoadingView.setVisibility(View.GONE);</div><div class="line">    </div><div class="line">    String redirectStr = data.getString(<span class="string">"redirectStr"</span>);</div><div class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(redirectStr)) &#123;    <span class="comment">// 唤醒支付宝支付</span></div><div class="line">        Thread payThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            PayTask alipay = <span class="keyword">new</span> PayTask(activity);</div><div class="line">            String result = alipay.pay(redirectStr);</div><div class="line">            Message msg = Message.obtain();</div><div class="line">            msg.what = MSG_PAY_RESPONSE;</div><div class="line">            msg.obj = result;</div><div class="line">            handler.sendMessage(msg);</div><div class="line">        &#125;);</div><div class="line">        payThread.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Handler handler = <span class="keyword">new</span> Handler(msg -&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (MSG_PAY_RESPONSE == msg.what) &#123;</div><div class="line">        Result result = <span class="keyword">new</span> Result((String) msg.obj);</div><div class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(result.getResult())) &#123;</div><div class="line">            <span class="keyword">switch</span> (result.getResult()) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">"4000"</span>:    <span class="comment">// 系统异常 TODO</span></div><div class="line">                    Toast.makeText(context, <span class="string">"订单支付失败"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">"6001"</span>:    <span class="comment">// 用户中途取消支付操作   TODO</span></div><div class="line">                    Toast.makeText(context, <span class="string">"订单支付已被取消"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">"6002"</span>:    <span class="comment">// 网络连接出错   TODO</span></div><div class="line">                    Toast.makeText(context, <span class="string">"网络连接出错"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">"9000"</span>:    <span class="comment">// 操作成功 TODO</span></div><div class="line">                    Toast.makeText(context, <span class="string">"订单支付成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                    <span class="comment">// TODO do something...</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="情况二：未安装支付宝客户端"><a href="#情况二：未安装支付宝客户端" class="headerlink" title="情况二：未安装支付宝客户端"></a>情况二：未安装支付宝客户端</h1><p>需要在Androidmanifest.xml文件中加入以下代码，即可进入H5支付流程。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 支付宝 --&gt;</div><div class="line">&lt;activity</div><div class="line">    android:name=<span class="string">"com.alipay.sdk.app.H5PayActivity"</span></div><div class="line">    android:configChanges=<span class="string">"orientation|keyboardHidden|navigation"</span></div><div class="line">    android:exported=<span class="string">"false"</span></div><div class="line">    android:screenOrientation=<span class="string">"behind"</span></div><div class="line">    android:windowSoftInputMode=<span class="string">"adjustResize|stateHidden"</span> /&gt;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/13/Android/支付流程/支付宝/支付宝支付-注意点/">https://fengqingxiuyi.github.io/2016/08/13/Android/支付流程/支付宝/支付宝支付-注意点/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[支付宝支付-相关网址]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/13/Android/%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B/%E6%94%AF%E4%BB%98%E5%AE%9D/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98-%E7%9B%B8%E5%85%B3%E7%BD%91%E5%9D%80/</url>
      <content type="html"><![CDATA[<p>本文只是介绍一下关于<code>支付宝支付</code>的相关网址信息，便于大家快速定位到指定位置。</p>
<h1 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h1><p>网址：<a href="https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.FCGmVr&amp;treeId=193&amp;articleId=104509&amp;docType=1" target="_blank" rel="external">App支付DEMO&amp;SDK</a></p>
<p>内容：</p>
<h2 id="App支付DEMO-amp-SDK"><a href="#App支付DEMO-amp-SDK" class="headerlink" title="App支付DEMO&amp;SDK"></a>App支付DEMO&amp;SDK</h2><p><a href="https://doc.open.alipay.com/doc2/detail.htm?treeId=204&amp;articleId=105051&amp;docType=1" target="_blank">App支付功能</a>（<span style="background-color: #ffff00;"><strong>支付产品全面升级，若您使用的是老接口，请移步<a style="background-color: #ffff00;" href="http://doc.open.alipay.com/doc2/detail?treeId=59&amp;articleId=103563&amp;docType=1" target="_blank">老版本移动支付文档</a>。</strong></span>）</p>
<table>
<thead>
<tr>
<th style="text-align:left">说明</th>
<th style="text-align:center">链接</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><p>iOS&amp;Android版资源</p> <p><strong>说明：<span style="color: #404040; font-family: Helvetica;">iOS</span><span style="color: #404040; font-family: 'PingFang SC';">版</span><span style="color: #404040; font-family: Helvetica;">SDK</span><span style="color: #404040; font-family: 'PingFang SC';">已支持</span><span style="color: #404040; font-family: Helvetica;">IPv6_only</span><span style="color: #404040; font-family: 'PingFang SC';">网络</span></strong></p></td>
<td style="text-align:center"><a href="http://aopsdkdownload.cn-hangzhou.alipay-pub.aliyun-inc.com/demo/WS_APP_PAY_SDK_BASE.zip" target="_blank" rel="external">SDK&amp;DEMO</a></td>
</tr>
<tr>
<td style="text-align:left">iOS&amp;Android版资源（适用于集成了百川sdk，出现UTDID冲突）</td>
<td style="text-align:center"><a href="http://aopsdkdownload.cn-hangzhou.alipay-pub.aliyun-inc.com/demo/AlipaySDK_No_UTDID.zip" target="_blank" rel="external">SDK</a></td>
</tr>
</tbody>
</table>
<h1 id="支付调用"><a href="#支付调用" class="headerlink" title="支付调用"></a>支付调用</h1><p>网址：<a href="https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.o8hixH&amp;treeId=204&amp;articleId=105296&amp;docType=1" target="_blank" rel="external">App支付Android集成流程详解</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/13/Android/支付流程/支付宝/支付宝支付-相关网址/">https://fengqingxiuyi.github.io/2016/08/13/Android/支付流程/支付宝/支付宝支付-相关网址/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[微信支付-相关网址]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/13/Android/%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E7%9B%B8%E5%85%B3%E7%BD%91%E5%9D%80/</url>
      <content type="html"><![CDATA[<p>本文只是介绍一下关于<code>微信支付</code>的相关网址信息，便于大家快速定位到指定位置。</p>
<h1 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h1><p>网址：<a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419319167&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">Android资源下载</a></p>
<p>内容：</p>
<h2 id="Android资源下载"><a href="#Android资源下载" class="headerlink" title="Android资源下载"></a>Android资源下载</h2><hr>
<p></p><p><a href="https://res.wx.qq.com/open/zh_CN/htmledition/res/dev/download/sdk/WeChatSDK_Android221cbf.zip" style="outline: 0px; color: rgb(34, 34, 34); text-decoration: underline; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;" target="_blank" rel="external"><strong><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;">开发工具包（SDK）</span></strong></a></p><p class="no_extra" style="margin-top: 0px; margin-bottom: 0px; padding-bottom: 0px;"><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;">使用微信分享、登录、收藏、支付等功能需要的库以及文件。点击下载&nbsp;</span><a href="https://res.wx.qq.com/open/zh_CN/htmledition/res/dev/download/sdk/Android_SDK_3.1.1.zip" style="outline: 0px; color: rgb(50, 146, 255); text-decoration: underline; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;" target="_blank" rel="external"><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;">Android开发工具包</span></a></p><p class="no_extra" style="margin-top: 0px; margin-bottom: 0px; padding-bottom: 0px;"><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;">使用微信语音识别接口、语音合成接口。点击下载&nbsp;</span><a href="https://res.wx.qq.com/open/zh_CN/htmledition/res/dev/download/sdk/WXVoice_Android_3.0.2221cbf.zip" style="outline: 0px; color: rgb(50, 146, 255); text-decoration: underline; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;" target="_blank" rel="external"><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;">语音SDK+Demo+开发文档</span></a></p><p class="no_extra" style="margin-top: 0px; margin-bottom: 0px; padding-bottom: 0px;"><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;">使用微信图像识别接口。点击下载&nbsp;</span><a href="https://res.wx.qq.com/open/zh_CN/htmledition/res/dev/download/sdk/WXImg_Android_2.0.2221cbf.zip" style="outline: 0px; color: rgb(50, 146, 255); text-decoration: underline; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;" target="_blank" rel="external"><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;">图像SDK+Demo+开发文档</span></a></p><p class="no_extra" style="margin-top: 0px; margin-bottom: 0px; padding-bottom: 0px;"><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;">使用微信卡券功能接口。点击下载&nbsp;</span><a href="https://res.wx.qq.com/open/zh_CN/htmledition/res/dev/download/sdk/WXTicket_Android221cbf.zip" style="outline: 0px; color: rgb(50, 146, 255); text-decoration: underline; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;" target="_blank" rel="external"><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;">卡券SDK+开发文档</span></a></p><p><br></p><p><a href="https://res.wx.qq.com/open/zh_CN/htmledition/res/dev/download/sdk/WeChatSDK_sample_Android221cbf.zip" style="outline: 0px; color: rgb(34, 34, 34); text-decoration: underline; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;" target="_blank" rel="external"><strong><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;">范例代码</span></strong></a></p><p><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;">包含了一个完整的范例工程。该范例的使用可以参阅Android平台上手指南：HelloWeixin@Android。</span><a href="https://res.wx.qq.com/open/zh_CN/htmledition/res/dev/download/sdk/WeChatSDK_sample_Android221cbf.zip" style="outline: 0px; color: rgb(50, 146, 255); text-decoration: underline; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;" target="_blank" rel="external"><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;">点击下载</span></a></p><p><strong style="outline: 0px; color: rgb(34, 34, 34); text-decoration: underline; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;"><br></strong></p><p><strong style="outline: 0px; color: rgb(34, 34, 34); text-decoration: underline; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;"><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;"><a href="https://res.wx.qq.com/open/zh_CN/htmledition/res/dev/download/sdk/Gen_Signature_Android221cbf.apk" style="outline: 0px; color: rgb(34, 34, 34); text-decoration: underline; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;" target="_blank" rel="external">签名生成工具</a></span></strong></p><p><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;">用于获取安装到手机的第三方应用签名的apk包。点击下载&nbsp;</span><a href="https://res.wx.qq.com/open/zh_CN/htmledition/res/dev/download/sdk/Gen_Signature_Android2.apk" style="outline: 0px; color: rgb(50, 146, 255); text-decoration: underline; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;" target="_blank" rel="external"><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;">签名生成工具</span></a></p><p><span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 14px;"><br></span></p><p></p>
<h1 id="支付调用"><a href="#支付调用" class="headerlink" title="支付调用"></a>支付调用</h1><p>网址：<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1" target="_blank" rel="external">APP支付调用</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/13/Android/支付流程/微信/微信支付-相关网址/">https://fengqingxiuyi.github.io/2016/08/13/Android/支付流程/微信/微信支付-相关网址/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[类微信图片压缩算法]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/11/Android/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/%E7%B1%BB%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>原文出处：<a href="https://github.com/Curzibn/Luban/blob/master/DESCRIPTION.md" target="_blank" rel="external">https://github.com/Curzibn/Luban/blob/master/DESCRIPTION.md</a></p>
<p>官方网址：<a href="https://github.com/Curzibn/Luban/" target="_blank" rel="external">https://github.com/Curzibn/Luban/</a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Luban 是图片压缩工具，通过参考或者自创压缩规则推求极致的压缩效果<br>目前的版本压缩效果主要参考微信。因为微信用户量最大，如果压缩后的图片越接近微信则越被用户接受。</p>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>目前的 Luban 只是压缩结果接近微信，自身的算法只是为了达到这个效果而设计的。与微信并无任何联系，也不敢妄称是微信的算法。</p>
<h1 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h1><p>注：下文所说“比例”统一表示：图片短边除以长边为该图片比例</p>
<h2 id="第三挡压缩（参考最新版微信压缩效果）"><a href="#第三挡压缩（参考最新版微信压缩效果）" class="headerlink" title="第三挡压缩（参考最新版微信压缩效果）"></a>第三挡压缩（参考最新版微信压缩效果）</h2><ol>
<li><p>判断图片比例值，是否处于以下区间内；</p>
<ul>
<li>[1, 0.5625)    即图片处于 [1:1 ~ 9:16) 比例范围内</li>
<li>[0.5625, 0.5)  即图片处于 [9:16 ~ 1:2) 比例范围内</li>
<li>[0.5, 0)       即图片处于 [1:2 ~ 1:∞) 比例范围内</li>
</ul>
</li>
<li><p>判断图片最长边是否过边界值；</p>
<ul>
<li>[1, 0.5625)   边界值为：1664 <em> n（n=1）, 4990 </em> n（n=2）, 1280 * pow(2, n-1)（n≥3）</li>
<li>[0.5625, 0.5) 边界值为：1280 * pow(2, n-1)（n≥1）</li>
<li>[0.5, 0)      边界值为：1280 * pow(2, n-1)（n≥1）</li>
</ul>
</li>
<li><p>计算压缩图片实际边长值，以第2步计算结果为准，超过某个边界值则：width / pow(2, n-1)，height/pow(2, n-1)</p>
</li>
<li><p>计算压缩图片的实际文件大小，以第2、3步结果为准，图片比例越大则文件越大。</p>
<p> size = (newW <em> newH) / (width </em> height) * m；</p>
<ul>
<li>[1, 0.5625) 则 width &amp; height 对应 1664，4990，1280 * n（n≥3），m 对应 150，300，300；</li>
<li>[0.5625, 0.5) 则 width = 1440，height = 2560, m = 200；</li>
<li>[0.5, 0) 则 width = 1280，height = 1280 / scale，m = 500；注：scale为比例值</li>
</ul>
</li>
<li><p>判断第4步的size是否过小</p>
<ul>
<li>[1, 0.5625) 则最小 size 对应 60，60，100</li>
<li>[0.5625, 0.5) 则最小 size 都为 100</li>
<li>[0.5, 0) 则最小 size 都为 100</li>
</ul>
</li>
</ol>
<p>6.将前面求到的值压缩图片 width, height, size 传入压缩流程，压缩图片直到满足以上数值</p>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><font color="red">以上具体数值均由逆推微信朋友圈所得</font>


<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/11/Android/图片压缩/类微信图片压缩算法/">https://fengqingxiuyi.github.io/2016/08/11/Android/图片压缩/类微信图片压缩算法/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[类微信图片压缩使用]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/11/Android/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/%E7%B1%BB%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>原文出处：<a href="https://github.com/Curzibn/Luban/blob/master/README.md" target="_blank" rel="external">https://github.com/Curzibn/Luban/blob/master/README.md</a></p>
<p>官方网址：<a href="https://github.com/Curzibn/Luban/" target="_blank" rel="external">https://github.com/Curzibn/Luban/</a></p>
<h1 id="Luban"><a href="#Luban" class="headerlink" title="Luban"></a>Luban</h1><p>Luban(鲁班)——Android图片压缩工具，仿微信朋友圈压缩策略</p>
<h1 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h1><p>目前做app开发总绕不开图片这个元素。但是随着手机拍照分辨率的提升，图片的压缩成为一个很重要的问题。单纯对图片进行裁切，压缩已经有很多文章介绍。但是裁切成多少，压缩成多少却很难控制好，裁切过头图片太小，质量压缩过头则显示效果太差。</p>
<p>于是自然想到app巨头“微信”会是怎么处理，Luban(鲁班)就是通过在微信朋友圈发送近100张不同分辨率图片，对比原图与微信压缩后的图片逆向推算出来的压缩算法。</p>
<p>因为有其他语言也想要实现 Luban，所以描述了一遍<a href="../类微信图片压缩算法/index.html">算法步骤</a> </p>
<p>因为是逆向推算，效果还没法跟微信一模一样，但是已经很接近微信朋友圈压缩后的效果，具体看以下对比！</p>
<h1 id="效果与对比"><a href="#效果与对比" class="headerlink" title="效果与对比"></a>效果与对比</h1><table>
<thead>
<tr>
<th>内容</th>
<th>原图</th>
<th>Luban</th>
<th>Wechat</th>
</tr>
</thead>
<tbody>
<tr>
<td>截屏 720P</td>
<td>720*1280,390k</td>
<td>720*1280,87k</td>
<td>720*1280,56k</td>
</tr>
<tr>
<td>截屏 1080P</td>
<td>1080*1920,2.21M</td>
<td>1080*1920,104k</td>
<td>1080*1920,112k</td>
</tr>
<tr>
<td>拍照 13M(4:3)</td>
<td>3096*4128,3.12M</td>
<td>1548*2064,141k</td>
<td>1548*2064,147k</td>
</tr>
<tr>
<td>拍照 9.6M(16:9)</td>
<td>4128*2322,4.64M</td>
<td>1032*581,97k</td>
<td>1032*581,74k</td>
</tr>
<tr>
<td>滚动截屏</td>
<td>1080*6433,1.56M</td>
<td>1080*6433,351k</td>
<td>1080*6433,482k</td>
</tr>
</tbody>
</table>
<h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><pre><code>compile &apos;io.reactivex:rxandroid:1.2.1&apos;
compile &apos;io.reactivex:rxjava:1.1.6&apos;

compile &apos;top.zibin:Luban:1.0.5&apos;
</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="Listener方式"><a href="#Listener方式" class="headerlink" title="Listener方式"></a>Listener方式</h2><p>Luban内部采用io线程进行图片压缩，外部调用只需设置好结果监听即可</p>
<pre><code>Luban.get(this)
    .load(File)                     //传人要压缩的图片
    .putGear(Luban.THIRD_GEAR)      //设定压缩档次，默认三挡
    .setCompressListener(new OnCompressListener() { //设置回调

        @Override
        public void onStart() {
            //TODO 压缩开始前调用，可以在方法内启动 loading UI
        }
        @Override
        public void onSuccess(File file) {
            //TODO 压缩成功后调用，返回压缩后的图片文件
        }

        @Override
        public void onError(Throwable e) {
            //TODO 当压缩过去出现问题时调用
        }
    }).launch();    //启动压缩
</code></pre><h2 id="RxJava方式"><a href="#RxJava方式" class="headerlink" title="RxJava方式"></a>RxJava方式</h2><p>RxJava 调用方式请自行随意控制线程</p>
<pre><code>Luban.get(this)
        .load(file)
        .putGear(Luban.THIRD_GEAR)
        .asObservable()
        .subscribeOn(Schedulers.io())
        .observeOn(AndroidSchedulers.mainThread())
        .doOnError(new Action1&lt;Throwable&gt;() {
            @Override
            public void call(Throwable throwable) {
                throwable.printStackTrace();
            }
        })
        .onErrorResumeNext(new Func1&lt;Throwable, Observable&lt;? extends File&gt;&gt;() {
            @Override
            public Observable&lt;? extends File&gt; call(Throwable throwable) {
                return Observable.empty();
            }
        })
        .subscribe(new Action1&lt;File&gt;() {
            @Override
            public void call(File file) {
                //TODO 压缩成功后调用，返回压缩后的图片文件
            }
        });
</code></pre><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><pre><code>Copyright 2016 Zheng Zibin

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</code></pre><hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/11/Android/图片压缩/类微信图片压缩使用/">https://fengqingxiuyi.github.io/2016/08/11/Android/图片压缩/类微信图片压缩使用/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[细说Android事件传递机制(dispatchTouchEvent、onInterceptTouchEvent、onTouchEvent)]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/11/Android/%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/%E7%BB%86%E8%AF%B4Android%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6(dispatchTouchEvent%E3%80%81onInterceptTouchEvent%E3%80%81onTouchEvent)/</url>
      <content type="html"><![CDATA[<p>原文出处：<a href="http://blog.csdn.net/yanzi1225627/article/details/22592831" target="_blank" rel="external">http://blog.csdn.net/yanzi1225627/article/details/22592831</a></p>
<p>作者: yanzi1225627</p>
<div id="article_content" class="article_content"><br><p><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space: pre;">    </span>本文背景:前些天用到了之前写的<a target="_blank" href="http://blog.csdn.net/yanzi1225627/article/details/8633872">自定义图片文字复合控件</a>，在给他设置监听时遇到了麻烦。虽然最后解决了问题，但发现在不重写LinearLayout的onInterceptTouchEvent时，子ImageView、子TextView、父Linearlayout三者不同的属性配置(android:clickable android:focuseable)会造成自定义控件onClick监听失败、或成功。复写了父Linearlayout 的onInterceptTouchEvent时，监听不受子图片、子文字的属性影响。为知其所以然，深入研究android的事件传递机制，记录于此。</span></span></p><h1><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">一、View的dispatchTouchEvent和onTouchEvent</span></span></h1><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>探讨Android事件传递机制前，明确android的两大基础控件类型:View和ViewGroup。View即普通的控件，没有子布局的，如Button、TextView. ViewGroup继承自View，表示可以有子控件，如Linearlayout、Listview这些。而事件即MotionEvent，最重要的有3个:</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">(1)MotionEvent.ACTION_DOWN &nbsp;按下View，是所有事件的开始</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">(2)MotionEvent.ACTION_MOVE &nbsp; 滑动事件<br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">(3)MotionEvent.ACTION_UP &nbsp; &nbsp; &nbsp; 与down对应，表示抬起<br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>另外，明确事件传递机制的最终目的都是为了触发执行View的点击监听和触摸监听:</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">        </span><strong>**</strong>.setOnClickListener(new View.OnClickListener() {<br><span style="white-space:pre">            </span><br><span style="white-space:pre">            </span>@Override<br><span style="white-space:pre">            </span>public void onClick(View v) {<br><span style="white-space:pre">                </span>// TODO Auto-generated method stub<br><span style="white-space:pre">                </span>Log.i(tag, &quot;testLinelayout—onClick…&quot;);<br><span style="white-space:pre">            </span>}<br><span style="white-space:pre">        </span>});<br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">        </span><strong><em>*</em></strong>.setOnTouchListener(new View.OnTouchListener() {<br><span style="white-space:pre">            </span><br><span style="white-space:pre">            </span>@Override<br><span style="white-space:pre">            </span>public boolean onTouch(View v, MotionEvent event) {<br><span style="white-space:pre">                </span>// TODO Auto-generated method stub<br><span style="white-space:pre">    </span><br><span style="white-space:pre">                </span>return false;<br><span style="white-space:pre">            </span>}<br><span style="white-space:pre">        </span>});<br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>我们简称为onClick监听和onTouch监听，一般程序会注册这两个监听。从上面可以看到，onTouch监听里默认return false。不要小看了这个return false，后面可以看到它有大用。</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>对于View来说，事件传递机制有两个函数：<span style="color:#ff0000;">dispatchTouchEvent</span>负责分发事件，在dispatch<strong>*里又会调用<span style="color:#ff0000;">onTouchEvent</span>表示执行事件，或者说消费事件，结合源码分析其流程。事件传递的入口是View的dispatchTouchEvent()函数:</strong></span></span></div><div><span style="font-size:18px;"><span style="font-family: 'Comic Sans MS';"></span></span><pre code_snippet_id="271353" snippet_file_name="blog_20140402_1_7835809" name="code" class="java"><span style="font-size:18px;">    /<br>     <em> Pass the touch screen motion event down to the target view, or this
     </em> view if it is the target.<br>     <em>
     </em> @param event The motion event to be dispatched.<br>     <em> @return True if the event was handled by the view, false otherwise.
     </em>/<br>    public boolean dispatchTouchEvent(MotionEvent event) {<br>        if (mInputEventConsistencyVerifier != null) {<br>            mInputEventConsistencyVerifier.onTouchEvent(event, 0);<br>        }<br><br>        if (onFilterTouchEventForSecurity(event)) {<br>            //noinspection SimplifiableIfStatement<br>            ListenerInfo li = mListenerInfo;<br>            if (li != null &amp;&amp; li.mOnTouchListener != null &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED<br>                    &amp;&amp; li.mOnTouchListener.onTouch(this, event)) {<br>                return true;<br>            }<br><br>            if (onTouchEvent(event)) {<br>                return true;<br>            }<br>        }<br><br>        if (mInputEventConsistencyVerifier != null) {<br>            mInputEventConsistencyVerifier.onUnhandledEvent(event, 0);<br>        }<br>        return false;<br>    }</span></pre><span style="font-size:18px;">找到这个判断:</span></div><div><span style="font-size:18px;color:#ff0000;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (li != null &amp;&amp; li.mOnTouchListener != null &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; li.mOnTouchListener.onTouch(this, event)) {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return true;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br></span></div><div><span style="font-size:18px;">他会执行View的OnTouchListener.onTouch这个函数，也就是上面说的onTouch监听。里面有三个判断，如果三个都为1，就会执行return true，不往下走了。而默认的onTouch监听返回false，只要一个是false，就不会返回true。接着往下看，程序执行onTouchEvent：</span></div><div><span style="font-size:18px;"><span style="font-family: 'Comic Sans MS';"></span></span><pre code_snippet_id="271353" snippet_file_name="blog_20140402_2_3419135" name="code" class="java"><span style="font-size:18px;">            if (onTouchEvent(event)) {<br>                return true;<br>            }</span></pre><span style="font-size:18px;">onTouchEvent的源码比较多，贴最重要的:</span></div><div><span style="font-size:18px;"><span style="font-family: 'Comic Sans MS';"></span></span><pre code_snippet_id="271353" snippet_file_name="blog_20140402_3_9450183" name="code" class="java"><span style="font-size:18px;">                        if (!mHasPerformedLongPress) {<br>                            // This is a tap, so remove the longpress check<br>                            removeLongPressCallback();<br><br>                            // Only perform take click actions if we were in the pressed state<br>                            if (!focusTaken) {<br>                                // Use a Runnable and post this rather than calling<br>                                // performClick directly. This lets other visual state<br>                                // of the view update before click actions start.<br>                                if (mPerformClick == null) {<br>                                    mPerformClick = new PerformClick();<br>                                }<br>                                if (!post(mPerformClick)) {<br>                                   <span style="color:#ff0000;"> performClick();</span><br>                                }<br>                            }<br>                        }</span></pre><span style="font-size:18px;">可以看到有个<span style="color:#ff0000;">performClick()</span>,它的源码里有这么一句<span style="color:#ff0000;">&nbsp;li.mOnClickListener.onClick(this);</span></span></div><div><span style="font-size:18px;"><span style="font-family: 'Comic Sans MS';"></span></span><pre code_snippet_id="271353" snippet_file_name="blog_20140402_4_5829896" name="code" class="java"><span style="font-size:18px;">    public boolean performClick() {<br>        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);<br><br>        ListenerInfo li = mListenerInfo;<br>        if (li != null &amp;&amp; li.mOnClickListener != null) {<br>            playSoundEffect(SoundEffectConstants.CLICK);<br>            <span style="color:#ff0000;"><strong>li.mOnClickListener.onClick(this);</strong></span><br>            return true;<br>        }<br><br>        return false;<br>    }</span></pre><span style="font-size:18px;"><br>终于对上了，它执行了我们注册的onClick监听。当然执行前会经过一系列判断，是否注册了监听等。<br>总结:</span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">1、事件入口是dispatchTouchEvent(),它会先执行注册的onTouch监听,如果一切顺利的话，接着执行onTouchEvent，在onTouchEvent里会执行onClick监听。</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">2、无论是dispatchTouchEvent还是onTouchEvent，如果返回true表示这个事件已经被消费、处理了，不再往下传了。在dispathTouchEvent的源码里可以看到，如果onTouchEvent返回了true，那么它也返回true。如果dispatch<strong><em>在执行onTouch监听的时候，onTouch返回了true，那么它也返回true，这个事件提前被onTouch消费掉了。就不再执行onTouchEvent了，更别说onClick监听了。</em></strong></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">3、我们通常在onTouch监听了设置图片一旦被触摸就改变它的背景、透明度之类的，这个onTouch表示事件的时机。而在onClick监听了去具体干某些事。</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>下面通过代码来说明,自定义一个TestButton继承自Button，重写它的dispath和onTouchEvent方法，为了简单只关注down和up事件。</span></span></div><div><span style="font-size:18px;"><span style="font-family: 'Comic Sans MS';"></span></span><pre code_snippet_id="271353" snippet_file_name="blog_20140402_5_8796282" name="code" class="java"><span style="font-size:18px;">package org.yanzi.ui;<br><br>import android.content.Context;<br>import android.util.AttributeSet;<br>import android.util.Log;<br>import android.view.MotionEvent;<br>import android.widget.Button;<br><br>public class TestButton extends Button {<br>    private final static String tag = &quot;yan&quot;;<br>    public TestButton(Context context, AttributeSet attrs) {<br>        super(context, attrs);<br>        // TODO Auto-generated constructor stub<br>    }<br>    @Override<br>    public boolean onTouchEvent(MotionEvent event) {<br>        // TODO Auto-generated method stub<br>        switch(event.getAction()){<br>        case MotionEvent.ACTION_DOWN:<br>            Log.i(tag, &quot;TestButton-onTouchEvent-ACTION_DOWN…&quot;);<br>            break;<br>        case MotionEvent.ACTION_UP:<br>            Log.i(tag, &quot;TestButton-onTouchEvent-ACTION_UP…&quot;);<br>            break;<br>        default:break;<br>        }<br>        return super.onTouchEvent(event);<br>    }<br><br>    @Override<br>    public boolean dispatchTouchEvent(MotionEvent event) {<br>        // TODO Auto-generated method stub<br>        switch(event.getAction()){<br>        case MotionEvent.ACTION_DOWN:<br>            Log.i(tag, &quot;TestButton-dispatchTouchEvent-ACTION_DOWN…&quot;);<br>            break;<br>        case MotionEvent.ACTION_UP:<br>            Log.i(tag, &quot;TestButton-dispatchTouchEvent-ACTION_UP…&quot;);<br>            break;<br>        default:break;<br>        }<br><br>        return super.dispatchTouchEvent(event);<br>    }<br><br>}<br></span></pre><span style="font-size:18px;"><br>在Activity里注册两个监听:</span></div><div><span style="font-size:18px;"><span style="font-family: 'Comic Sans MS';"></span></span><pre code_snippet_id="271353" snippet_file_name="blog_20140402_6_6255790" name="code" class="java"><span style="font-size:18px;">        testBtn.setOnClickListener(new View.OnClickListener() {<br><br>            @Override<br>            public void onClick(View v) {<br>                // TODO Auto-generated method stub<br>                Log.i(tag, &quot;testBtn—onClick…&quot;);<br>            }<br>        });<br>        testBtn.setOnTouchListener(new View.OnTouchListener() {<br><br>            @Override<br>            public boolean onTouch(View v, MotionEvent event) {<br>                // TODO Auto-generated method stub<br>                switch(event.getAction()){<br>                case MotionEvent.ACTION_DOWN:<br>                    Log.i(tag, &quot;testBtn-onTouch-ACTION_DOWN…&quot;);<br>                    break;<br>                case MotionEvent.ACTION_UP:<br>                    Log.i(tag, &quot;testBtn-onTouch-ACTION_UP…&quot;);<br>                    break;<br>                default:break;<br><br>                }<br>                return false;<br>            }<br>        });</span></pre><span style="font-size:18px;"><br>同时复写Activity的dispatch方法和onTouchEvent方法：</span></div><div><span style="font-size:18px;"><span style="font-family: 'Comic Sans MS';"></span></span><pre code_snippet_id="271353" snippet_file_name="blog_20140402_7_683656" name="code" class="java"><span style="font-size:18px;">@Override<br>    public boolean dispatchTouchEvent(MotionEvent ev) {<br>        // TODO Auto-generated method stub<br>        switch(ev.getAction()){<br>        case MotionEvent.ACTION_DOWN:<br>            Log.i(tag, &quot;MainActivity-dispatchTouchEvent-ACTION_DOWN…&quot;);<br>            break;<br>        case MotionEvent.ACTION_UP:<br>            Log.i(tag, &quot;MainActivity-dispatchTouchEvent-ACTION_UP…&quot;);<br>            break;<br>        default:break;<br>        }<br>        return super.dispatchTouchEvent(ev);<br>    }<br><br>    @Override<br>    public boolean onTouchEvent(MotionEvent event) {<br>        // TODO Auto-generated method stub<br>        switch(event.getAction()){<br>        case MotionEvent.ACTION_DOWN:<br>            Log.i(tag, &quot;MainActivity-onTouchEvent-ACTION_DOWN…&quot;);<br>            break;<br>        case MotionEvent.ACTION_UP:<br>            Log.i(tag, &quot;MainActivity-onTouchEvent-ACTION_UP…&quot;);<br>            break;<br>        default:break;<br>        }<br>        return super.onTouchEvent(event);<br>    }</span></pre><span style="font-size:18px;"><br>最终一次点击，打印信息如下:</span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>Line 33: 01-08 14:59:45.847 I/yan &nbsp; &nbsp; ( 4613): MainActivity-dispatchTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 35: 01-08 14:59:45.849 I/yan &nbsp; &nbsp; ( 4613): TestButton-dispatchTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 37: 01-08 14:59:45.849 I/yan &nbsp; &nbsp; ( 4613): testBtn-onTouch-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 39: 01-08 14:59:45.849 I/yan &nbsp; &nbsp; ( 4613): TestButton-onTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 41: 01-08 14:59:45.939 I/yan &nbsp; &nbsp; ( 4613): MainActivity-dispatchTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 43: 01-08 14:59:45.941 I/yan &nbsp; &nbsp; ( 4613): TestButton-dispatchTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 45: 01-08 14:59:45.944 I/yan &nbsp; &nbsp; ( 4613): testBtn-onTouch-ACTION_UP…<br><span style="white-space:pre">    </span>Line 47: 01-08 14:59:45.946 I/yan &nbsp; &nbsp; ( 4613): TestButton-onTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 49: 01-08 14:59:45.974 I/yan &nbsp; &nbsp; ( 4613): testBtn—onClick…<br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>事件先由Activity的dispatchTouchEvent进行分发，然后TestButton的dispatchTouchEvent进行分发，接着执行onTouch监听，然后执行onTouchEvent。第二次UP动作的时候，在onTouchEvent里又执行了onClick监听。</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>如果我们想这个TestButton只能执行onTouch监听不能执行onClick监听，方法有很多。在onTouch监听里默认返回false改为true，如下:</span></span></div><div><span style="font-size:18px;"><span style="font-family: 'Comic Sans MS';"></span></span><pre code_snippet_id="271353" snippet_file_name="blog_20140402_8_3475319" name="code" class="java"><span style="font-size:18px;">testBtn.setOnTouchListener(new View.OnTouchListener() {<br><br>            @Override<br>            public boolean onTouch(View v, MotionEvent event) {<br>                // TODO Auto-generated method stub<br>                switch(event.getAction()){<br>                case MotionEvent.ACTION_DOWN:<br>                    Log.i(tag, &quot;testBtn-onTouch-ACTION_DOWN…&quot;);<br>                    break;<br>                case MotionEvent.ACTION_UP:<br>                    Log.i(tag, &quot;testBtn-onTouch-ACTION_UP…&quot;);<br>                    break;<br>                default:break;<br><br>                }<br>                return true;<br>            }<br>        });</span></pre><span style="font-size:18px;"><br>事件流程为:</span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>Line 75: 01-08 15:05:51.627 I/yan &nbsp; &nbsp; ( 5262): MainActivity-dispatchTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 77: 01-08 15:05:51.628 I/yan &nbsp; &nbsp; ( 5262): TestButton-dispatchTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 79: 01-08 15:05:51.629 I/yan &nbsp; &nbsp; ( 5262): testBtn-onTouch-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 81: 01-08 15:05:51.689 I/yan &nbsp; &nbsp; ( 5262): MainActivity-dispatchTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 83: 01-08 15:05:51.691 I/yan &nbsp; &nbsp; ( 5262): TestButton-dispatchTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 85: 01-08 15:05:51.695 I/yan &nbsp; &nbsp; ( 5262): testBtn-onTouch-ACTION_UP…<br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>可以看到压根就没执行onTouchEvent。因为onTouch返回了true，已提前将这个事件消费了，就不往下传了，dispatch流程提前终止。</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><br></span></span></div><h1><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">二、ViewGroup的dispatchTouchEvent、onInterceptTouchEvent、onTouchEvent</span></span></h1><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>再来看ViewGroup，在复写ViewGroup时可以发现它的onTouchEvent在在View里的，表示这两个方法是一样的。但dispatchTouchEvent是在ViewGroup里的，表示和View的dispatchTouchEvent不一样，多了一个onInterceptTouchEvent函数，表示拦截的意思。<a target="_blank" href="http://www.cnblogs.com/xiaoQLu/archive/2012/04/28/2474443.html">链接</a>&nbsp;打个很形象的比喻，这玩意就像个秘书、谋士。为啥View没有呢，因为它级别不够，一个Button里面是不可能有子View的。但LinearLayout(继承ViewGroup)就有孩子(子布局)，这个onInterceptTouchEvent就会判断事件要不要通知它的孩子呢。它的源码如下：</span></span></div><div><span style="font-size:18px;"><span style="font-family: 'Comic Sans MS';"></span></span><pre code_snippet_id="271353" snippet_file_name="blog_20140402_9_378420" name="code" class="java"><span style="font-size:18px;">    public boolean dispatchTouchEvent(MotionEvent ev) {<br>        if (mInputEventConsistencyVerifier != null) {<br>            mInputEventConsistencyVerifier.onTouchEvent(ev, 1);<br>        }<br><br>        boolean handled = false;<br>        if (onFilterTouchEventForSecurity(ev)) {<br>            final int action = ev.getAction();<br>            final int actionMasked = action &amp; MotionEvent.ACTION_MASK;<br><br>            // Handle an initial down.<br>            if (actionMasked == MotionEvent.ACTION_DOWN) {<br>                // Throw away all previous state when starting a new touch gesture.<br>                // The framework may have dropped the up or cancel event for the previous gesture<br>                // due to an app switch, ANR, or some other state change.<br>                cancelAndClearTouchTargets(ev);<br>                resetTouchState();<br>            }<br><br>            // Check for interception.<br>            final boolean intercepted;<br>            if (actionMasked == MotionEvent.ACTION_DOWN<br>                    || mFirstTouchTarget != null) {<br>                final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;<br>                if (!disallowIntercept) {<br>                    <strong><span style="color:#ff0000;">intercepted = onInterceptTouchEvent(ev);</span></strong><br>                    ev.setAction(action); // restore action in case it was changed<br>                } else {<br>                    intercepted = false;<br>                }<br>            } else {<br>                // There are no touch targets and this action is not an initial down<br>                // so this view group continues to intercept touches.<br>                intercepted = true;<br>            }<br><br>            // Check for cancelation.<br>            final boolean canceled = resetCancelNextUpFlag(this)<br>                    || actionMasked == MotionEvent.ACTION_CANCEL;<br><br>            // Update list of touch targets for pointer down, if needed.<br>            final boolean split = (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != 0;<br>            TouchTarget newTouchTarget = null;<br>            boolean alreadyDispatchedToNewTouchTarget = false;<br>            <strong><span style="color:#ff0000;">if (!canceled &amp;&amp; !intercepted)</span></strong> {<br>                if (actionMasked == MotionEvent.ACTION_DOWN<br>                        || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)<br>                        || actionMasked == MotionEvent.ACTION_HOVER_MOVE) {<br>                    final int actionIndex = ev.getActionIndex(); // always 0 for down<br>                    final int idBitsToAssign = split ? 1 &lt;&lt; ev.getPointerId(actionIndex)<br>                            : TouchTarget.ALL_POINTER_IDS;<br><br>                    // Clean up earlier touch targets for this pointer id in case they<br>                    // have become out of sync.<br>                    removePointersFromTouchTargets(idBitsToAssign);<br><br>                    final int childrenCount = mChildrenCount;<br>                    if (childrenCount != 0) {<br>                        // Find a child that can receive the event.<br>                        // Scan children from front to back.<br>                        final View[] children = mChildren;<br>                        final float x = ev.getX(actionIndex);<br>                        final float y = ev.getY(actionIndex);<br><br>                        final boolean customOrder = isChildrenDrawingOrderEnabled();<br>                        for (int i = childrenCount - 1; i &gt;= 0; i–) {<br>                            final int childIndex = customOrder ?<br>                                    getChildDrawingOrder(childrenCount, i) : i;<br>                            final View child = children[childIndex];<br>                            if (!canViewReceivePointerEvents(child)<br>                                    || !isTransformedTouchPointInView(x, y, child, null)) {<br>                                continue;<br>                            }<br><br>                            newTouchTarget = getTouchTarget(child);<br>                            if (newTouchTarget != null) {<br>                                // Child is already receiving touch within its bounds.<br>                                // Give it the new pointer in addition to the ones it is handling.<br>                                newTouchTarget.pointerIdBits |= idBitsToAssign;<br>                                break;<br>                            }<br><br>                            resetCancelNextUpFlag(child);<br>                            if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) {<br>                                // Child wants to receive touch within its bounds.<br>                                mLastTouchDownTime = ev.getDownTime();<br>                                mLastTouchDownIndex = childIndex;<br>                                mLastTouchDownX = ev.getX();<br>                                mLastTouchDownY = ev.getY();<br>                                newTouchTarget = addTouchTarget(child, idBitsToAssign);<br>                                alreadyDispatchedToNewTouchTarget = true;<br>                                break;<br>                            }<br>                        }<br>                    }<br><br>                    if (newTouchTarget == null &amp;&amp; mFirstTouchTarget != null) {<br>                        // Did not find a child to receive the event.<br>                        // Assign the pointer to the least recently added target.<br>                        newTouchTarget = mFirstTouchTarget;<br>                        while (newTouchTarget.next != null) {<br>                            newTouchTarget = newTouchTarget.next;<br>                        }<br>                        newTouchTarget.pointerIdBits |= idBitsToAssign;<br>                    }<br>                }<br>            }<br><br>            // Dispatch to touch targets.<br>            if (mFirstTouchTarget == null) {<br>                // No touch targets so treat this as an ordinary view.<br>                handled = dispatchTransformedTouchEvent(ev, canceled, null,<br>                        TouchTarget.ALL_POINTER_IDS);<br>            } else {<br>                // Dispatch to touch targets, excluding the new touch target if we already<br>                // dispatched to it.  Cancel touch targets if necessary.<br>                TouchTarget predecessor = null;<br>                TouchTarget target = mFirstTouchTarget;<br>                while (target != null) {<br>                    final TouchTarget next = target.next;<br>                    if (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) {<br>                        handled = true;<br>                    } else {<br>                        final boolean cancelChild = resetCancelNextUpFlag(target.child)<br>                        || intercepted;<br>                        if (dispatchTransformedTouchEvent(ev, cancelChild,<br>                                target.child, target.pointerIdBits)) {<br>                            handled = true;<br>                        }<br>                        if (cancelChild) {<br>                            if (predecessor == null) {<br>                                mFirstTouchTarget = next;<br>                            } else {<br>                                predecessor.next = next;<br>                            }<br>                            target.recycle();<br>                            target = next;<br>                            continue;<br>                        }<br>                    }<br>                    predecessor = target;<br>                    target = next;<br>                }<br>            }<br><br>            // Update list of touch targets for pointer up or cancel, if needed.<br>            if (canceled<br>                    || actionMasked == MotionEvent.ACTION_UP<br>                    || actionMasked == MotionEvent.ACTION_HOVER_MOVE) {<br>                resetTouchState();<br>            } else if (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_UP) {<br>                final int actionIndex = ev.getActionIndex();<br>                final int idBitsToRemove = 1 &lt;&lt; ev.getPointerId(actionIndex);<br>                removePointersFromTouchTargets(idBitsToRemove);<br>            }<br>        }<br><br>        if (!handled &amp;&amp; mInputEventConsistencyVerifier != null) {<br>            mInputEventConsistencyVerifier.onUnhandledEvent(ev, 1);<br>        }<br>        return handled;<br>    }</span></pre><span style="font-size:18px;"><br>可以看到标红的有两句(<span style="color:#ff0000;">intercepted = onInterceptTouchEvent(ev); &nbsp;&nbsp;</span>&nbsp;<span style="color:#ff0000;">if (!canceled &amp;&amp; !intercepted)&nbsp;&nbsp;</span>)，它会先调用&nbsp;intercepted = onInterceptTouchEvent(ev);然后通过if判断。</span></div><div><span style="font-size:18px;"><span style="font-family: 'Comic Sans MS';"></span></span><pre code_snippet_id="271353" snippet_file_name="blog_20140402_10_7489263" name="code" class="java"><span style="font-size:18px;">  public boolean onInterceptTouchEvent(MotionEvent ev) {<br>        return false;<br>    }</span></pre><span style="font-size:18px;"><br>它就一句话，默认false。也就是说这个谋士默认的意见是，<span style="color:#ff0000;"><strong>永远不拦截！！！！只要有孩子，就</strong></span>交给孩子们处理吧。下面给出实例说明，新建TestLinearLayout继承自Linearlayout。</span><pre code_snippet_id="271353" snippet_file_name="blog_20140402_11_6344211" name="code" class="java"><span style="font-size:18px;">package org.yanzi.ui;<br><br>import android.content.Context;<br>import android.util.AttributeSet;<br>import android.util.Log;<br>import android.view.MotionEvent;<br>import android.widget.LinearLayout;<br><br>public class TestLinearLayout extends LinearLayout{<br>    private final static String tag = &quot;yan&quot;;<br>    public TestLinearLayout(Context context, AttributeSet attrs) {<br>        super(context, attrs);<br>        // TODO Auto-generated constructor stub<br>    }<br><br>    @Override<br>    public boolean dispatchTouchEvent(MotionEvent ev) {<br>        // TODO Auto-generated method stub<br>        switch(ev.getAction()){<br>        case MotionEvent.ACTION_DOWN:<br>            Log.i(tag, &quot;TestLinearLayout-dispatchTouchEvent-ACTION_DOWN…&quot;);<br>            break;<br>        case MotionEvent.ACTION_UP:<br>            Log.i(tag, &quot;TestLinearLayout-dispatchTouchEvent-ACTION_UP…&quot;);<br>            break;<br>        default:break;<br>        }<br>        return super.dispatchTouchEvent(ev);<br>    }<br><br>    @Override<br>    public boolean onInterceptTouchEvent(MotionEvent ev) {<br>        // TODO Auto-generated method stub<br>        switch(ev.getAction()){<br>        case MotionEvent.ACTION_DOWN:<br>            Log.i(tag, &quot;TestLinearLayout-onInterceptTouchEvent-ACTION_DOWN…&quot;);<br>            break;<br>        case MotionEvent.ACTION_UP:<br>            Log.i(tag, &quot;TestLinearLayout-onInterceptTouchEvent-ACTION_UP…&quot;);<br>            break;<br>        default:break;<br>        }<br>        return super.onInterceptTouchEvent(ev);<br>    }<br><br>    @Override<br>    public boolean onTouchEvent(MotionEvent event) {<br>        // TODO Auto-generated method stub<br>        switch(event.getAction()){<br>        case MotionEvent.ACTION_DOWN:<br>            Log.i(tag, &quot;TestLinearLayout-onTouchEvent-ACTION_DOWN…&quot;);<br>            break;<br>        case MotionEvent.ACTION_UP:<br>            Log.i(tag, &quot;TestLinearLayout-onTouchEvent-ACTION_UP…&quot;);<br>            break;<br>        default:break;<br>        }<br>        return super.onTouchEvent(event);<br>    }<br><br><br>}<br></span></pre><span style="font-size:18px;">布局文件改成:</span></div><div><span style="font-size:18px;"><span style="font-family: 'Comic Sans MS';"></span></span><pre code_snippet_id="271353" snippet_file_name="blog_20140402_12_215670" name="code" class="html"><span style="font-size:18px;">&lt;RelativeLayout xmlns:android=&quot;<a href="http://schemas.android.com/apk/res/android&amp;quot" target="_blank" rel="external">http://schemas.android.com/apk/res/android&amp;quot</a>;<br>    xmlns:tools=&quot;<a href="http://schemas.android.com/tools&amp;quot" target="_blank" rel="external">http://schemas.android.com/tools&amp;quot</a>;<br>    android:layout_width=&quot;match_parent&quot;<br>    android:layout_height=&quot;match_parent&quot;<br>    android:paddingBottom=&quot;@dimen/activity_vertical_margin&quot;<br>    android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot;<br>    android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot;<br>    android:paddingTop=&quot;@dimen/activity_vertical_margin&quot;<br>    tools:context=&quot;.MainActivity&quot; &gt;<br><br>    &lt;TextView<br>        android:layout_width=&quot;wrap_content&quot;<br>        android:layout_height=&quot;wrap_content&quot;<br>        android:text=&quot;@string/hello_world&quot; /&gt;<br><br>    &lt;org.yanzi.ui.TestLinearLayout<br>        android:id=&quot;@+id/linearlayout_test&quot;<br>        android:layout_width=&quot;200dip&quot;<br>        android:layout_height=&quot;200dip&quot; &gt;<br><br>        &lt;org.yanzi.ui.TestButton<br>            android:id=&quot;@+id/btn_test&quot;<br>            android:layout_width=&quot;wrap_content&quot;<br>            android:layout_height=&quot;wrap_content&quot;<br>            android:text=&quot;测试按钮&quot; /&gt;<br>    &lt;/org.yanzi.ui.TestLinearLayout&gt;<br><br>&lt;/RelativeLayout&gt;</span></pre><span style="font-size:18px;"><br>在Activity里给这个自定义LinearLayout也注册上onClick监听、onTouch监听。</span></div><div><span style="font-size:18px;"><span style="font-family: 'Comic Sans MS';"></span></span><pre code_snippet_id="271353" snippet_file_name="blog_20140402_13_9103636" name="code" class="java"><span style="font-size:18px;">testLinelayout = (TestLinearLayout)findViewById(R.id.linearlayout_test);<br>        testLinelayout.setOnTouchListener(new View.OnTouchListener() {<br><br>            @Override<br>            public boolean onTouch(View v, MotionEvent event) {<br>                // TODO Auto-generated method stub<br>                switch(event.getAction()){<br>                case MotionEvent.ACTION_DOWN:<br>                    Log.i(tag, &quot;testLinelayout-onTouch-ACTION_DOWN…&quot;);<br>                    break;<br>                case MotionEvent.ACTION_UP:<br>                    Log.i(tag, &quot;testLinelayout-onTouch-ACTION_UP…&quot;);<br>                    break;<br>                default:break;<br><br>                }<br>                return false;<br>            }<br>        });<br><br>        testLinelayout.setOnClickListener(new View.OnClickListener() {<br><br>            @Override<br>            public void onClick(View v) {<br>                // TODO Auto-generated method stub<br>                Log.i(tag, &quot;testLinelayout—onClick…&quot;);<br>            }<br>        });</span></pre><span style="font-size:18px;"><br>不复写事件传递里的 任何方法，流程如下:</span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>Line 57: 01-08 15:29:42.167 I/yan &nbsp; &nbsp; ( 5826): MainActivity-dispatchTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 59: 01-08 15:29:42.169 I/yan &nbsp; &nbsp; ( 5826): TestLinearLayout-dispatchTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 61: 01-08 15:29:42.169 I/yan &nbsp; &nbsp; ( 5826): TestLinearLayout-onInterceptTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 63: 01-08 15:29:42.169 I/yan &nbsp; &nbsp; ( 5826): TestButton-dispatchTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 65: 01-08 15:29:42.170 I/yan &nbsp; &nbsp; ( 5826): testBtn-onTouch-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 67: 01-08 15:29:42.170 I/yan &nbsp; &nbsp; ( 5826): TestButton-onTouchEvent-ACTION_DOWN…</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">—————————————————————————————————————————<br><span style="white-space:pre">    </span>Line 69: 01-08 15:29:42.279 I/yan &nbsp; &nbsp; ( 5826): MainActivity-dispatchTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 71: 01-08 15:29:42.280 I/yan &nbsp; &nbsp; ( 5826): TestLinearLayout-dispatchTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 73: 01-08 15:29:42.283 I/yan &nbsp; &nbsp; ( 5826): TestLinearLayout-onInterceptTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 75: 01-08 15:29:42.287 I/yan &nbsp; &nbsp; ( 5826): TestButton-dispatchTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 81: 01-08 15:29:42.298 I/yan &nbsp; &nbsp; ( 5826): testBtn-onTouch-ACTION_UP…<br><span style="white-space:pre">    </span>Line 83: 01-08 15:29:42.301 I/yan &nbsp; &nbsp; ( 5826): TestButton-onTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 85: 01-08 15:29:42.313 I/yan &nbsp; &nbsp; ( 5826): testBtn—onClick…<br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">由Activity的dispatchTouchEvent—-Linearlayout的dispatchTouchEvent————问问它的谋士要不要让孩子知道onInterceptTouchEvent———孩子的dispatchTouchEvent—–孩子的onTouch监听——孩子的onTouchEvent—-孩子的onClick监听。为了更清晰这个流程，下面作如下改动：</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">1、如果事件传给了孩子们，但孩子没有onTouch和onClick监听怎么办？即将button的onclick和onTouch都注释掉:</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">流程如下:</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>Line 131: 01-08 15:36:16.574 I/yan &nbsp; &nbsp; ( 6124): TestLinearLayout-dispatchTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 133: 01-08 15:36:16.574 I/yan &nbsp; &nbsp; ( 6124): TestLinearLayout-onInterceptTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 135: 01-08 15:36:16.574 I/yan &nbsp; &nbsp; ( 6124): TestButton-dispatchTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 137: 01-08 15:36:16.575 I/yan &nbsp; &nbsp; ( 6124): TestButton-onTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 143: 01-08 15:36:16.746 I/yan &nbsp; &nbsp; ( 6124): MainActivity-dispatchTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 145: 01-08 15:36:16.747 I/yan &nbsp; &nbsp; ( 6124): TestLinearLayout-dispatchTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 147: 01-08 15:36:16.747 I/yan &nbsp; &nbsp; ( 6124): TestLinearLayout-onInterceptTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 149: 01-08 15:36:16.748 I/yan &nbsp; &nbsp; ( 6124): TestButton-dispatchTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 151: 01-08 15:36:16.748 I/yan &nbsp; &nbsp; ( 6124): TestButton-onTouchEvent-ACTION_UP…<br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">因为事件给了孩子们，它没监听也关系不到父亲了，父亲的onClick和onTouch都没执行。</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">2,如果将TestLinearlayout的onInterceptTouchEvent 改成return true，即不让孩子们知道。</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>Line 57: 01-08 15:40:06.832 I/yan &nbsp; &nbsp; ( 6640): MainActivity-dispatchTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 59: 01-08 15:40:06.835 I/yan &nbsp; &nbsp; ( 6640): TestLinearLayout-dispatchTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 61: 01-08 15:40:06.836 I/yan &nbsp; &nbsp; ( 6640): TestLinearLayout-onInterceptTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 63: 01-08 15:40:06.836 I/yan &nbsp; &nbsp; ( 6640): testLinelayout-onTouch-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 65: 01-08 15:40:06.836 I/yan &nbsp; &nbsp; ( 6640): TestLinearLayout-onTouchEvent-ACTION_DOWN…<br><span style="white-space:pre">    </span>Line 67: 01-08 15:40:07.016 I/yan &nbsp; &nbsp; ( 6640): MainActivity-dispatchTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 69: 01-08 15:40:07.017 I/yan &nbsp; &nbsp; ( 6640): TestLinearLayout-dispatchTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 73: 01-08 15:40:07.025 I/yan &nbsp; &nbsp; ( 6640): testLinelayout-onTouch-ACTION_UP…<br><span style="white-space:pre">    </span>Line 75: 01-08 15:40:07.026 I/yan &nbsp; &nbsp; ( 6640): TestLinearLayout-onTouchEvent-ACTION_UP…<br><span style="white-space:pre">    </span>Line 77: 01-08 15:40:07.052 I/yan &nbsp; &nbsp; ( 6640): testLinelayout—onClick…<br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>果然事件就此打住，孩子们压根不知道，父亲执行了onClick和onTouch监听。可见父亲还是伟大的啊，只要谋士不拦截事件，那么事件就给孩子。</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>最后的结论:</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">1、如果是自定义复合控件，如图片+文字，我再Activity里给你注册了onClick监听，期望点击它执行。那么最简单的方法就是将图片+文字的父布局，也即让其容器ViewGroup的秘书将事件拦下，这样父亲就可以执行onClick了。这时候的父亲就像一个独立的孩子一样了(View)，无官一身轻，再也不用管它的孩子了,可以正常onClick onTouch.</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">2、如果希望一个View只onTouch而不onClick，在onTouch里return true就ok了。</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">3、dispatch是为了onTouch监听，onTouchEvent是为了onClick监听。</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">4、自定义布局时，一般情况下：</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">@Override<br><span style="white-space:pre">    </span>public boolean onTouchEvent(MotionEvent event) {return super.onTouchEvent(event);} &nbsp;<br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">@Override<br><span style="white-space:pre">    </span>public boolean dispatchTouchEvent(MotionEvent event) {return super.dispatchTouchEvent(event);<br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>我们可以复写，但是最后的super.<strong><em>是万万不能少滴。如果少了，表示连dispatch</em></strong> onTouchEvent压根就不调用了，事件就此打住。</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><span style="white-space:pre">    </span>貌似真相水落石出了，但究竟清楚了没有请看下篇根据自定义复合控件的监听问题再探讨下。</span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">参考: &nbsp;&nbsp;<a target="_blank" href="http://ryantang.me/blog/2014/01/02/android-event-dispatch/">链接1</a>&nbsp;(灰常感谢前辈的大作啊) &nbsp; &nbsp;<a target="_blank" href="http://www.cnblogs.com/xiaoQLu/archive/2012/04/28/2474443.html">链接2</a></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">测试代码: &nbsp;<a target="_blank" href="http://download.csdn.net/detail/yanzi1225627/7121063">http://download.csdn.net/detail/yanzi1225627/7121063</a></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;"><br></span></span></div><div><span style="font-family: 'Comic Sans MS';"><span style="font-size:18px;">—————————本文系原创，转载注明作者:yanzi1225627<br></span></span><br></div><br></div>


<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/11/Android/事件传递机制/细说Android事件传递机制(dispatchTouchEvent、onInterceptTouchEvent、onTouchEvent)/">https://fengqingxiuyi.github.io/2016/08/11/Android/事件传递机制/细说Android事件传递机制(dispatchTouchEvent、onInterceptTouchEvent、onTouchEvent)/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[View注意点]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/View/View%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="Fresco图片框架注意点"><a href="#Fresco图片框架注意点" class="headerlink" title="Fresco图片框架注意点"></a>Fresco图片框架注意点</h1><p>Fresco官方文档：<a href="http://fresco-cn.org/docs/getting-started.html" target="_blank" rel="external">http://fresco-cn.org/docs/getting-started.html</a></p>
<h2 id="注意点1：凡是使用Fresco设置的图片，必须设置具体的宽高才可以正常显示"><a href="#注意点1：凡是使用Fresco设置的图片，必须设置具体的宽高才可以正常显示" class="headerlink" title="注意点1：凡是使用Fresco设置的图片，必须设置具体的宽高才可以正常显示"></a>注意点1：凡是使用Fresco设置的图片，必须设置具体的宽高才可以正常显示</h2><p>例如：SHImageView</p>
<p>模块地址：<br>同级目录下的SHImageView.java文件<br>或<br><a href="http://git.showjoy.net/android/showjoyandroid_image/tree/master" target="_blank" rel="external">http://git.showjoy.net/android/showjoyandroid_image/tree/master</a></p>
<h2 id="注意点2：为Fresco图片设置圆形背景"><a href="#注意点2：为Fresco图片设置圆形背景" class="headerlink" title="注意点2：为Fresco图片设置圆形背景"></a>注意点2：为Fresco图片设置圆形背景</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 去除fresco:roundedCornerRadius=<span class="string">"5dp"</span>可预览</div><div class="line">&lt;com.showjoy.image.SHCircleImageView</div><div class="line">    android:id=<span class="string">"@+id/home_best_seller_img"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    fresco:actualImageScaleType=<span class="string">"centerCrop"</span></div><div class="line">    fresco:backgroundImage=<span class="string">"@color/white"</span></div><div class="line">    fresco:roundedCornerRadius=<span class="string">"5dp"</span></div><div class="line">    fresco:roundingBorderColor=<span class="string">"@color/grey2"</span></div><div class="line">    fresco:roundingBorderWidth=<span class="string">"2dp"</span> /&gt;</div></pre></td></tr></table></figure>
<p>答：因为已经设置了round属性，所以已经是圆形了，这个时候，如果想要设置其圆形边框内的背景，需要通过这个属性backgroundImage设置背景才是圆形边框内的背景色</p>
<h1 id="ShopEditText"><a href="#ShopEditText" class="headerlink" title="ShopEditText"></a>ShopEditText</h1><p>ShopEditText必须设置字体大小（注：已提供属性），否则字体显示特别小<br>模块地址：同级目录下ShopEditText文件夹下的ShopEditText.java文件</p>
<h1 id="tools-Designtime-Attributes"><a href="#tools-Designtime-Attributes" class="headerlink" title="tools-Designtime Attributes"></a>tools-Designtime Attributes</h1><p>Google文档地址：<a href="http://tools.android.com/tips/layout-designtime-attributes" target="_blank" rel="external">http://tools.android.com/tips/layout-designtime-attributes</a></p>
<p>中文翻译：这些属性用于渲染布局，而不会影响到程序运行。也就是说只在预览布局时出现，在程序运行时相当于该属性不存在。</p>
<p>例子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;RelativeLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        tools:text=<span class="string">"test"</span>/&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<p>更加全面的tools详解：<a href="http://blog.csdn.net/zhengdan66/article/details/46960985" target="_blank" rel="external">http://blog.csdn.net/zhengdan66/article/details/46960985</a></p>
<h1 id="android-paddingstart-paddingend"><a href="#android-paddingstart-paddingend" class="headerlink" title="android:paddingstart(paddingend)"></a>android:paddingstart(paddingend)</h1><p>android:paddingstart(paddingend)：左右对齐时使用。左对齐时：paddingstart对应paddingleft；paddingend对应paddingright；右对齐时则刚好相反；</p>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><font color="red">本文持续更新</font>

<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/View/View注意点/">https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/View/View注意点/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SHImageView]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/View/SHImageView/</url>
      <content type="html"><![CDATA[<p>本文介绍 统一图片组件 的制作与使用</p>
<p>本图片组件封装于Fresco组件，本文用于介绍 统一图片组件 的制作与使用，可查看Fresco官方文档：<a href="http://fresco-cn.org/docs/getting-started.html" target="_blank" rel="external">http://fresco-cn.org/docs/getting-started.html</a></p>
<h1 id="统一图片组件-的制作"><a href="#统一图片组件-的制作" class="headerlink" title="统一图片组件 的制作"></a>统一图片组件 的制作</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.showjoy.image;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</div><div class="line"><span class="keyword">import</span> android.text.TextUtils;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.showjoy.image.base.ISHImageLoadListener;</div><div class="line"><span class="keyword">import</span> com.showjoy.image.fresco.FrescoImageView;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 尚妆统一图片组件</div><div class="line"> * Created by lufei on 3/30/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SHImageView</span> <span class="keyword">extends</span> <span class="title">FrescoImageView</span> </span>&#123;</div><div class="line"></div><div class="line">    String imageUrl;</div><div class="line">    <span class="keyword">int</span> width;</div><div class="line">    <span class="keyword">int</span> height;</div><div class="line">    ISHImageLoadListener loadListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SHImageView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SHImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SHImageView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SHImageView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (TextUtils.equals(imageUrl, url)) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        imageUrl = url;</div><div class="line">        <span class="keyword">super</span>.setImageUrl(url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFailureImage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setFailureImage();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">placeholderImage</span><span class="params">(<span class="keyword">int</span> resource)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.placeholderImage(resource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">placeholderImage</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.placeholderImage(drawable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageRes</span><span class="params">(<span class="keyword">int</span> resId)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setImageRes(resId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageUrl</span><span class="params">(String url, ISHImageLoadListener loadListener)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (TextUtils.equals(imageUrl, url) &amp;&amp; <span class="keyword">this</span>.loadListener == loadListener) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        imageUrl = url;</div><div class="line">        <span class="keyword">this</span>.loadListener = loadListener;</div><div class="line">        <span class="keyword">super</span>.setImageUrl(url, loadListener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageUrl</span><span class="params">(String url, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (TextUtils.equals(imageUrl, url) &amp;&amp; <span class="keyword">this</span>.width == width &amp;&amp; <span class="keyword">this</span>.height == height) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        imageUrl = url;</div><div class="line">        <span class="keyword">this</span>.width = width;</div><div class="line">        <span class="keyword">this</span>.height = height;</div><div class="line">        <span class="keyword">super</span>.setImageUrl(url, width, height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageUrl</span><span class="params">(String url, <span class="keyword">int</span> width, <span class="keyword">int</span> height, ISHImageLoadListener loadListener)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (TextUtils.equals(imageUrl, url) &amp;&amp; <span class="keyword">this</span>.width == width &amp;&amp; <span class="keyword">this</span>.height == height</div><div class="line">                &amp;&amp; <span class="keyword">this</span>.loadListener == loadListener) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        imageUrl = url;</div><div class="line">        <span class="keyword">this</span>.loadListener = loadListener;</div><div class="line">        <span class="keyword">this</span>.width = width;</div><div class="line">        <span class="keyword">this</span>.height = height;</div><div class="line">        <span class="keyword">super</span>.setImageUrl(url, width, height, loadListener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageRes</span><span class="params">(<span class="keyword">int</span> resId, ISHImageLoadListener loadListener)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setImageRes(resId, loadListener);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="统一图片组件-的使用"><a href="#统一图片组件-的使用" class="headerlink" title="统一图片组件 的使用"></a>统一图片组件 的使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;com.showjoy.image.SHImageView</div><div class="line">        android:id=<span class="string">"@+id/image"</span></div><div class="line">        android:layout_width=<span class="string">"30dp"</span></div><div class="line">        android:layout_height=<span class="string">"30dp"</span> /&gt;</div></pre></td></tr></table></figure>
<p>注意：此 统一图片组件 的宽和高不能同时为wrap_content，具体参考Fresco文档。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/View/SHImageView/">https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/View/SHImageView/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ShopEditText]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/View/ShopEditText/</url>
      <content type="html"><![CDATA[<p>本文介绍 统一文本编辑框 的制作与使用，统一文本编辑框继承于RelativeLayout，同时也支持大范围区域的点击效果！</p>
<h1 id="统一文本编辑框-的制作"><a href="#统一文本编辑框-的制作" class="headerlink" title="统一文本编辑框 的制作"></a>统一文本编辑框 的制作</h1><h2 id="Java文件内容"><a href="#Java文件内容" class="headerlink" title="Java文件内容"></a>Java文件内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.showjoy.shop.common.view;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.text.InputType;</div><div class="line"><span class="keyword">import</span> android.text.TextUtils;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.util.TypedValue;</div><div class="line"><span class="keyword">import</span> android.view.Gravity;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout;</div><div class="line"><span class="keyword">import</span> android.widget.RelativeLayout;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.showjoy.shop.R;</div><div class="line"><span class="keyword">import</span> com.showjoy.view.SHIconFontTextView;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 达人店专用的统一编辑框</div><div class="line"> * Created by lufei on 7/20/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShopEditText</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RelativeLayout viewShopEditRoot;</div><div class="line">    <span class="keyword">private</span> SHIconFontTextView viewShopEditLeftIcon;</div><div class="line">    <span class="keyword">private</span> SHIconFontTextView viewShopEditRightIcon;</div><div class="line">    <span class="keyword">private</span> EditText viewShopEditInput;</div><div class="line">    <span class="keyword">private</span> LinearLayout inviteErrorTip;</div><div class="line">    <span class="keyword">private</span> SHIconFontTextView inviteErrorIcon;</div><div class="line">    <span class="keyword">private</span> TextView inviteErrorTextView;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShopEditText</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        init(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShopEditText</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        init(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShopEditText</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        inflate(context, R.layout.view_shop_edit, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">        viewShopEditRoot = (RelativeLayout) findViewById(R.id.view_shop_edit_root);</div><div class="line">        viewShopEditLeftIcon = (SHIconFontTextView) findViewById(R.id.view_shop_edit_left_icon);</div><div class="line">        viewShopEditRightIcon = (SHIconFontTextView) findViewById(R.id.view_shop_edit_right_icon);</div><div class="line">        viewShopEditInput = (EditText) findViewById(R.id.view_shop_edit_input);</div><div class="line">        inviteErrorTip = (LinearLayout) findViewById(R.id.invite_error_tip);</div><div class="line">        inviteErrorIcon = (SHIconFontTextView) findViewById(R.id.invite_error_icon);</div><div class="line">        inviteErrorTextView = (TextView) findViewById(R.id.invite_error_text_view);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != attrs) &#123;</div><div class="line">            TypedArray typeArray = context.obtainStyledAttributes(attrs, R.styleable.ShopEditText);</div><div class="line"></div><div class="line">            String emptyText = typeArray.getString(R.styleable.ShopEditText_shop_edit_empty_text);</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(emptyText)) &#123;</div><div class="line">                inviteErrorTextView.setText(emptyText);</div><div class="line">            &#125;</div><div class="line">            String hint = typeArray.getString(R.styleable.ShopEditText_shop_edit_hint);</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(hint)) &#123;</div><div class="line">                viewShopEditInput.setHint(hint);</div><div class="line">            &#125;</div><div class="line">            String leftIcon = typeArray.getString(R.styleable.ShopEditText_shop_edit_left_icon);</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(leftIcon)) &#123;</div><div class="line">                viewShopEditLeftIcon.setText(leftIcon);</div><div class="line">            &#125;</div><div class="line">            String rightIcon = typeArray.getString(R.styleable.ShopEditText_shop_edit_right_icon);</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(rightIcon)) &#123;</div><div class="line">                viewShopEditRightIcon.setText(rightIcon);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> gravity = typeArray.getInt(R.styleable.ShopEditText_shop_edit_gravity, <span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (gravity == <span class="number">0</span>) &#123;</div><div class="line">                viewShopEditInput.setGravity(Gravity.LEFT);</div><div class="line">                inviteErrorTip.setGravity(Gravity.LEFT);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (gravity == <span class="number">1</span>) &#123;</div><div class="line">                viewShopEditInput.setGravity(Gravity.CENTER);</div><div class="line">                inviteErrorTip.setGravity(Gravity.CENTER);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (gravity == <span class="number">2</span>) &#123;</div><div class="line">                viewShopEditInput.setGravity(Gravity.RIGHT);</div><div class="line">                inviteErrorTip.setGravity(Gravity.RIGHT);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">float</span> size = typeArray.getDimension(R.styleable.ShopEditText_shop_edit_text_size, <span class="number">14f</span>);</div><div class="line">            viewShopEditInput.setTextSize(TypedValue.COMPLEX_UNIT_PX, size);</div><div class="line">            typeArray.recycle();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        inviteErrorTip.setOnClickListener(v -&gt; &#123;</div><div class="line">            setErrorVisible(<span class="keyword">false</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInputType</span><span class="params">(<span class="keyword">int</span> inputType)</span> </span>&#123;</div><div class="line">        viewShopEditInput.setInputType(inputType);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> viewShopEditInput.getText().toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorText</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">        inviteErrorTextView.setText(text);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorVisible</span><span class="params">(<span class="keyword">boolean</span> visible)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (visible) &#123;</div><div class="line">            inviteErrorTip.setVisibility(VISIBLE);</div><div class="line">            viewShopEditInput.setVisibility(GONE);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            inviteErrorTip.setVisibility(GONE);</div><div class="line">            viewShopEditInput.setVisibility(VISIBLE);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadOnly</span><span class="params">(<span class="keyword">boolean</span> readOnly)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (readOnly) &#123;</div><div class="line">            viewShopEditInput.setInputType(InputType.TYPE_NULL);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            viewShopEditInput.setInputType(InputType.TYPE_CLASS_TEXT);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">        viewShopEditInput.setText(text);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getRightIcon</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> viewShopEditRightIcon;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(OnClickListener l)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setOnClickListener(l);</div><div class="line">        viewShopEditInput.setOnClickListener(l);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="属性文件内容"><a href="#属性文件内容" class="headerlink" title="属性文件内容"></a>属性文件内容</h2><font color="red">PS: 以下内容位于styles.xml文件中</font>

<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">declare</span>-styleable name=<span class="string">"ShopEditText"</span>&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_edit_hint"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_edit_empty_text"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_edit_left_icon"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_edit_right_icon"</span> format=<span class="string">"string"</span> /&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_edit_text_size"</span> format=<span class="string">"dimension"</span> /&gt;</div><div class="line">    &lt;attr name=<span class="string">"shop_edit_gravity"</span> format=<span class="string">"integer"</span>&gt;</div><div class="line">        &lt;flag name=<span class="string">"left"</span> value=<span class="string">"0"</span> /&gt;</div><div class="line">        &lt;flag name=<span class="string">"center"</span> value=<span class="string">"1"</span> /&gt;</div><div class="line">        &lt;flag name=<span class="string">"right"</span> value=<span class="string">"2"</span> /&gt;</div><div class="line">    &lt;/attr&gt;</div><div class="line">&lt;/<span class="built_in">declare</span>-styleable&gt;</div></pre></td></tr></table></figure>
<h2 id="布局文件内容"><a href="#布局文件内容" class="headerlink" title="布局文件内容"></a>布局文件内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;RelativeLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:id=<span class="string">"@+id/view_shop_edit_root"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:id=<span class="string">"@+id/view_shop_edit"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:orientation=<span class="string">"horizontal"</span></div><div class="line">        android:gravity=<span class="string">"center"</span>&gt;</div><div class="line"></div><div class="line">        &lt;com.showjoy.view.SHIconFontTextView</div><div class="line">            android:id=<span class="string">"@+id/view_shop_edit_left_icon"</span></div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_marginRight=<span class="string">"5.5dp"</span></div><div class="line">            android:textColor=<span class="string">"@color/grey4"</span></div><div class="line">            android:textSize=<span class="string">"18sp"</span> /&gt;</div><div class="line"></div><div class="line">        &lt;EditText</div><div class="line">            android:id=<span class="string">"@+id/view_shop_edit_input"</span></div><div class="line">            android:layout_width=<span class="string">"0dp"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_weight=<span class="string">"1"</span></div><div class="line">            android:background=<span class="string">"@null"</span></div><div class="line">            android:hint=<span class="string">"请填写邀请码"</span></div><div class="line">            android:textSize=<span class="string">"18sp"</span> /&gt;</div><div class="line"></div><div class="line">        &lt;com.showjoy.view.SHIconFontTextView</div><div class="line">            android:id=<span class="string">"@+id/view_shop_edit_right_icon"</span></div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:textColor=<span class="string">"@color/grey4"</span></div><div class="line">            android:textSize=<span class="string">"18sp"</span> /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;View</div><div class="line">        android:id=<span class="string">"@+id/view_shop_edit_line"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"1px"</span></div><div class="line">        android:layout_marginTop=<span class="string">"10dp"</span></div><div class="line">        android:layout_below=<span class="string">"@id/view_shop_edit"</span></div><div class="line">        android:background=<span class="string">"@color/grey4"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:id=<span class="string">"@+id/invite_error_tip"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:orientation=<span class="string">"horizontal"</span></div><div class="line">        android:layout_marginTop=<span class="string">"10dp"</span></div><div class="line">        android:layout_below=<span class="string">"@+id/view_shop_edit_line"</span></div><div class="line">        android:visibility=<span class="string">"gone"</span>&gt;</div><div class="line"></div><div class="line">        &lt;com.showjoy.view.SHIconFontTextView</div><div class="line">            android:id=<span class="string">"@+id/invite_error_icon"</span></div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:textSize=<span class="string">"18sp"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=<span class="string">"@+id/invite_error_text_view"</span></div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:gravity=<span class="string">"center"</span></div><div class="line">            android:textColor=<span class="string">"@color/redPink"</span></div><div class="line">            android:textSize=<span class="string">"18sp"</span> /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<h1 id="统一文本编辑框-的使用"><a href="#统一文本编辑框-的使用" class="headerlink" title="统一文本编辑框 的使用"></a>统一文本编辑框 的使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;com.showjoy.shop.common.view.ShopEditText</div><div class="line">        android:id=<span class="string">"@+id/login_user_name"</span></div><div class="line">        android:layout_width=<span class="string">"250dp"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_below=<span class="string">"@+id/login_logo"</span></div><div class="line">        android:layout_centerHorizontal=<span class="string">"true"</span></div><div class="line">        android:layout_marginTop=<span class="string">"35dp"</span></div><div class="line">        app:shop_edit_hint=<span class="string">"输入用户名"</span></div><div class="line">        app:shop_edit_text_size=<span class="string">"16sp"</span> /&gt;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/View/ShopEditText/">https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/View/ShopEditText/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android-Relativelayout属性总结]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/View/Android-Relativelayout%E5%B1%9E%E6%80%A7%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>文章转载自：<a href="http://blog.csdn.net/kimifdw/article/details/11981509" target="_blank" rel="external">http://blog.csdn.net/kimifdw/article/details/11981509</a></p>
<h1 id="指定偏移量"><a href="#指定偏移量" class="headerlink" title="指定偏移量"></a>指定偏移量</h1><p>1.android:paddingleft(paddingright/paddingtop/paddingbottom)：控件内部内容（如文本距离该控件的边距）；<br>2.android:paddingstart(paddingend)：左右对齐时使用。左对齐时：paddingstart对应paddingleft；paddingend对应paddingright；右对齐时则刚好相反；<br>3.android:layout_margin：该控件距离父控件的边距；（layout_marginleft/layout_marginright/layout_margintop/layout_marginbottom）；</p>
<h1 id="给定控件ID"><a href="#给定控件ID" class="headerlink" title="给定控件ID"></a>给定控件ID</h1><p>4.android:layout_above ：将该控件的底部至于给定ID的控件之上；<br>5.android:layout_below ：将该控件的顶部至于给定ID的控件之下；<br>6.android:layout_toLeftOf ：将该控件的右边缘和给定ID的控件的左边缘对齐；</p>
<ol>
<li>android:layout_toRightOf：将该控件的左边缘和给定ID的控件的右边缘对齐；<br>8.android:layout_alignBaseline： 该控件的baseline和给定ID的控件的baseline对齐；（baseline为控件的基准线）；<br>9.android:layout_alignBottom：将该控件的底部边缘与给定ID控件的底部边缘；</li>
<li>android:layout_alignLeft：将该控件的左边缘与给定ID控件的左边缘对齐；<br>11.android:layout_alignRight ：将该控件的右边缘与给定ID控件的右边缘对齐；<br>12.android:layout_alignTop ： 将给定控件的顶部边缘与给定ID控件的顶部对齐；<h1 id="相对于父组件"><a href="#相对于父组件" class="headerlink" title="相对于父组件"></a>相对于父组件</h1>13.android:alignParentBottom ：如果该值为true，则将该控件的底部和父控件的底部对齐；<br>14.android:layout_alignParentLeft：如果该值为true，则将该控件的左边与父控件的左边对齐；<br>15.android:layout_alignParentRight ：如果该值为true，则将该控件的右边与父控件的右边对齐；<br>16.android:layout_alignParentTop：如果该值为true，则将空间的顶部与父控件的顶部对齐；<br>17.android:layout_alignWithParentIfMissing 如果对应的兄弟元素找不到的话就以父元素做参照物；<h1 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h1>18.android:layout_centerHorizontal ：如果值为真，该控件将被至于水平方向的中央；<br>19.android:layout_centerInParent：如果值为真，该控件将被至于父控件水平方向和垂直方向的中央；<br>20.android:layout_centerVertical： 如果值为真，该控件将被至于垂直方向的中央；<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1>21.android:gravity：设置容器中的内容的位置，默认为靠左；<br>22.android:layout_gravity：设置容器中内容相对于容器的位置（无法在relativelayout中使用）；</li>
</ol>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/View/Android-Relativelayout属性总结/">https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/View/Android-Relativelayout属性总结/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网络请求注意点]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="快速创建数据实体类"><a href="#快速创建数据实体类" class="headerlink" title="快速创建数据实体类"></a>快速创建数据实体类</h1><p>步骤：</p>
<ol>
<li>在AndroidStudio上安装GsonFormat插件，重启AndroidStudio。</li>
<li>创建实体类，如GoodsResult类。</li>
<li>复制接口返回的data下的数据，如{…}，如果data是JSONArray类型，则取其中一个{…}即可。</li>
<li>将光标置于GoodsResult类的{}中，然后按快捷键option+s，出现GsonFormat弹框后，粘贴即可</li>
<li>如果数据格式正确，点击OK会自动生成实体类，否则会出现错误提示：data err!</li>
</ol>
<h1 id="返回数据类型问题"><a href="#返回数据类型问题" class="headerlink" title="返回数据类型问题"></a>返回数据类型问题</h1><p>如果有数据返回，则服务端返回的数据格式有以下两种形式：</p>
<h2 id="形式1：data是JSONObject类型"><a href="#形式1：data是JSONObject类型" class="headerlink" title="形式1：data是JSONObject类型"></a>形式1：data是JSONObject类型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"count"</span>: 0,</div><div class="line">    <span class="string">"data"</span>: &#123;</div><div class="line">        ...</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"isRedirect"</span>: 0,</div><div class="line">    <span class="string">"isSuccess"</span>: 1,</div><div class="line">    <span class="string">"login"</span>: 0</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="形式2：data是JSONArray类型"><a href="#形式2：data是JSONArray类型" class="headerlink" title="形式2：data是JSONArray类型"></a>形式2：data是JSONArray类型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"count"</span>: 2,</div><div class="line">    <span class="string">"data"</span>: [</div><div class="line">        &#123;</div><div class="line">            ...</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="string">"isRedirect"</span>: 0,</div><div class="line">    <span class="string">"isSuccess"</span>: 1,</div><div class="line">    <span class="string">"login"</span>: 0</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据不同的数据格式，我们需要创建不同的请求类：</p>
<h2 id="形式1：data是JSONObject类型-1"><a href="#形式1：data是JSONObject类型-1" class="headerlink" title="形式1：data是JSONObject类型"></a>形式1：data是JSONObject类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeRequest</span> <span class="keyword">extends</span> <span class="title">SHGetRequest</span>&lt;<span class="title">HomeResult</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Class&lt;HomeResult&gt; <span class="title">getDataClass</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> HomeResult.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> TypeReference&lt;HomeResult&gt; <span class="title">getDataTypeReference</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getRequestUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SHHost.getMainHost()+<span class="string">"/api/shop"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="形式2：data是JSONArray类型-1"><a href="#形式2：data是JSONArray类型-1" class="headerlink" title="形式2：data是JSONArray类型"></a>形式2：data是JSONArray类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsRequest</span> <span class="keyword">extends</span> <span class="title">SHGetRequest</span>&lt;<span class="title">List</span>&lt;<span class="title">GoodsRequest</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;List&lt;GoodsRequest&gt;&gt; getDataClass() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 因为TypeReference是抽象类，不可以直接new，所以需要在最后添加&#123;&#125;，作为匿名内部类。</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> TypeReference&lt;List&lt;GoodsRequest&gt;&gt; getDataTypeReference() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TypeReference&lt;List&lt;GoodsRequest&gt;&gt;()&#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getRequestUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SHHost.getMainHost()+<span class="string">"/api/shop/products"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="addParam问题"><a href="#addParam问题" class="headerlink" title="addParam问题"></a>addParam问题</h1><p>例如：request.addParam(“page”, page);<br>案例：在一开始的时候我们添加了page字段，此时page值为1；当我们需要加载下一页的时候，怎么修改page字段的值呢？<br>答：有人说直接page++即可实现，但是由于配置参数，开启请求这些操作都是在presenter类里面实现的，我们无法在viewModel类里面直接修改；此时我们只需要覆盖page字段即可，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadNext</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// page如果存在, 则会被覆盖</span></div><div class="line">    goodsRequest.addParam(<span class="string">"page"</span>, page);</div><div class="line">    goodsRequest.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="显示调用接口时，手机网络请求响应过程"><a href="#显示调用接口时，手机网络请求响应过程" class="headerlink" title="显示调用接口时，手机网络请求响应过程"></a>显示调用接口时，手机网络请求响应过程</h1><p>核心思想：使用Charles软件，利用电脑代理手机网络进行监测<br>步骤：</p>
<ol>
<li>打开手机上已经的网络的详情页</li>
<li>在代理选项下“主机名”文本框中输入电脑上已连接网络的IP地址</li>
<li>在代理选项下“端口”文本框中输入端口号：8888</li>
<li>打开Charles软件，在Structure对应的文本框中选择我们请求的接口地址，进行数据监测。</li>
</ol>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><font color="red">本文持续更新</font>

<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/网络请求/网络请求注意点/">https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/网络请求/网络请求注意点/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[达人店-网络请求过程]]></title>
      <url>https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/%E8%BE%BE%E4%BA%BA%E5%BA%97-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="1、创建BaseActivity，执行onCreate方法，发现如下代码："><a href="#1、创建BaseActivity，执行onCreate方法，发现如下代码：" class="headerlink" title="1、创建BaseActivity，执行onCreate方法，发现如下代码："></a>1、创建BaseActivity，执行onCreate方法，发现如下代码：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">viewModel = getViewModel();</div></pre></td></tr></table></figure>
<h1 id="2、进入getViewModel-方法，发现如下代码："><a href="#2、进入getViewModel-方法，发现如下代码：" class="headerlink" title="2、进入getViewModel()方法，发现如下代码："></a>2、进入getViewModel()方法，发现如下代码：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="meta">@NonNull</span> <span class="function">T <span class="title">getViewModel</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>可以得知它是在BaseActivity的子类实现的，随便进入一个子类看看，发现原来是创建了一个子类对象，即如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NonNull</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> CategoryViewModel <span class="title">getViewModel</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CategoryViewModel(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="3、再进入这个子类的构造方法可以发现如下代码："><a href="#3、再进入这个子类的构造方法可以发现如下代码：" class="headerlink" title="3、再进入这个子类的构造方法可以发现如下代码："></a>3、再进入这个子类的构造方法可以发现如下代码：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CategoryViewModel</span><span class="params">(BaseActivity activity)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(activity);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4、继续进入查看-发现了如下代码："><a href="#4、继续进入查看-发现了如下代码：" class="headerlink" title="4、继续进入查看,发现了如下代码："></a>4、继续进入查看,发现了如下代码：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseViewModel</span><span class="params">(BaseActivity activity)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.activity = activity;</div><div class="line">    <span class="keyword">this</span>.context = activity.getApplicationContext();</div><div class="line"></div><div class="line">    init();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="5、进入init-方法发现如下代码："><a href="#5、进入init-方法发现如下代码：" class="headerlink" title="5、进入init()方法发现如下代码："></a>5、进入init()方法发现如下代码：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    presenter = getPresenter();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != presenter) &#123;</div><div class="line">        presenter.initParams(getParams());</div><div class="line">        <span class="keyword">if</span> (presenter.requestOnStart()) &#123;</div><div class="line">            presenter.startRequest();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此可以明白：在getViewModel的时候已经开始请求数据了！！！</p>
<h1 id="6、重新回到BaseActivity的onCreate方法中，发现它继续执行如下代码："><a href="#6、重新回到BaseActivity的onCreate方法中，发现它继续执行如下代码：" class="headerlink" title="6、重新回到BaseActivity的onCreate方法中，发现它继续执行如下代码："></a>6、重新回到BaseActivity的onCreate方法中，发现它继续执行如下代码：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">setContentView(getContentViewRes());</div><div class="line">activity = <span class="keyword">this</span>;</div><div class="line">context = activity.getApplicationContext();</div><div class="line"></div><div class="line">viewModel.initView();</div><div class="line">viewModel.viewCreated();</div></pre></td></tr></table></figure>
<p>这里我们主要查看viewCreated方法就可以了。</p>
<h1 id="7、进入viewCreated方法，可以发现如下代码："><a href="#7、进入viewCreated方法，可以发现如下代码：" class="headerlink" title="7、进入viewCreated方法，可以发现如下代码："></a>7、进入viewCreated方法，可以发现如下代码：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">viewCreated</span><span class="params">()</span> </span>&#123;</div><div class="line">    initData();</div><div class="line">    viewCreated = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != presenter) &#123;</div><div class="line">        presenter.updateView();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们发现了重要方法，即updateView，显而易见它是用来显示数据的，继续进入可以发现如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateView</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!responsed) &#123;</div><div class="line">        showCache();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (responseSuccess) &#123;</div><div class="line">        responseSuccess(response);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        responseError(responseErrorCode);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>8、好，到这里重点来了，之前我们已经说过，在getViewModel的时候已经开始网络请求的，因为是异步请求，所以我们无法得知在执行第7步的时候，是否已经请求完毕，这里分两种情况：</p>
<h1 id="情况一：网络请求尚未完成"><a href="#情况一：网络请求尚未完成" class="headerlink" title="情况一：网络请求尚未完成"></a>情况一：网络请求尚未完成</h1><p>继续执行updateView中的代码，因为responsed默认为false，所以，此时页面是以缓存的数据进行展示的（注：如果有缓存的话）；<br>之后网络请求完成了，假设请求成功，则执行如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponseSuccess</span><span class="params">(R r)</span> </span>&#123;</div><div class="line">    responsed = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    responseSuccess = <span class="keyword">true</span>;</div><div class="line">    response = r;</div><div class="line">    <span class="keyword">if</span> (viewModel.isViewCreated()) &#123;</div><div class="line">        updateView();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为responsed和viewCreated都已经是true，所以再次执行updateView方法，但因为responsed是true，所以此时的updateView方法执行以下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (responseSuccess) &#123;</div><div class="line">    responseSuccess(response);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    responseError(responseErrorCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>即使用网络请求得到的数据重新展示页面</p>
<h1 id="情况二：网络请求已完成"><a href="#情况二：网络请求已完成" class="headerlink" title="情况二：网络请求已完成"></a>情况二：网络请求已完成</h1><p>这里以响应成功为例，则会执行onResponseSuccess方法，即如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponseSuccess</span><span class="params">(R r)</span> </span>&#123;</div><div class="line">    responsed = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    responseSuccess = <span class="keyword">true</span>;</div><div class="line">    response = r;</div><div class="line">    <span class="keyword">if</span> (viewModel.isViewCreated()) &#123;</div><div class="line">        updateView();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时因为尚未执行viewCreated方法，所以不执行updateView方法，然后代码继续向下执行，即执行viewCreated方法，即如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">viewCreated</span><span class="params">()</span> </span>&#123;</div><div class="line">    initData();</div><div class="line">    viewCreated = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != presenter) &#123;</div><div class="line">        presenter.updateView();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>显而易见，执行的是updateView方法，只不过此时responsed已经为true，所以updateView执行的是以下内容：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (responseSuccess) &#123;</div><div class="line">    responseSuccess(response);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    responseError(responseErrorCode);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>即显示数据的时候不再使用缓存显示，而是用响应的数据进行展示。</p>
<p>9、至此我们就讲完了目前 达人店 项目的网络请求过程。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/网络请求/达人店-网络请求过程/">https://fengqingxiuyi.github.io/2016/08/10/ShowJoy/网络请求/达人店-网络请求过程/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[选择恐惧症的福音！教你认清MVC，MVP和MVVM]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/24/Android/%E6%A1%86%E6%9E%B6/%E9%80%89%E6%8B%A9%E6%81%90%E6%83%A7%E7%97%87%E7%9A%84%E7%A6%8F%E9%9F%B3%EF%BC%81%E6%95%99%E4%BD%A0%E8%AE%A4%E6%B8%85MVC%EF%BC%8CMVP%E5%92%8CMVVM/</url>
      <content type="html"><![CDATA[<p>原文出处：<a href="http://zjutkz.net/2016/04/13/选择恐惧症的福音！教你认清MVC，MVP和MVVM/" target="_blank" rel="external">http://zjutkz.net/2016/04/13/选择恐惧症的福音！教你认清MVC，MVP和MVVM/</a></p>
<content type="html"><br><p>相信大家对MVC，MVP和MVVM都不陌生，作为三个最耳熟能详的Android框架，它们的应用可以是非常广泛的，但是对于一些新手来说，可能对于区分它们三个都有困难，更别说在实际的项目中应用了，有些时候想用MVP的，代码写着写着就变成了MVC，久而久之就对它们三个的选择产生了恐惧感，如果你也是这样的人群，那么这篇文章可能会对你有很大的帮助，希望大家看完都会有收获吧！</p> <p>文章重点：</p> <p>(1)了解并区分MVC，MVP，MVVM。</p> <p>(2)知道这三种模式在Android中如何使用。</p> <p>(3)走出data binding的误区。</p> <p>(4)了解MVP+data binding的开发模式。</p> <p>本篇文章的demo我将会上传到<a href="https://github.com/zjutkz" target="_blank" rel="external">我的github上</a>。</p> <a id="more"></a> <h1 id="水之积也不厚-则其负大舟也无力"><a href="#水之积也不厚-则其负大舟也无力" class="headerlink" title="水之积也不厚,则其负大舟也无力"></a>水之积也不厚,则其负大舟也无力</h1><p>正如庄子在逍遥游中说的，如果水不够深，那就没有能够担负大船的力量 。所以在真正开始涉及具体的代码之前，我们要先对MVC，MVP和MVVM做一个初步的了解。如果各位同学对此已经有所了解了，可以选择性跳过这一节。</p> <h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>MVC，Model View Controller，是软件架构中最常见的一种框架，简单来说就是通过controller的控制去操作model层的数据，并且返回给view层展示，具体见下图</p> <p> <img src="http://zjutkz.net/images/选择恐惧症的福音！教你认清MVC-MVP和MVVM/mvc.png" alt="mvc"></p> <p>当用户出发事件的时候，view层会发送指令到controller层，接着controller去通知model层更新数据，model层更新完数据以后直接显示在view层上，这就是MVC的工作原理。</p> <p>那具体到Android上是怎么样一个情况呢？</p> <p>大家都知道一个Android工程有什么对吧，有java的class文件，有res文件夹，里面是各种资源，还有类似manifest文件等等。对于原生的Android项目来说，layout.xml里面的xml文件就对应于MVC的view层，里面都是一些view的布局代码，而各种java bean，还有一些类似repository类就对应于model层，至于controller层嘛，当然就是各种activity咯。大家可以试着套用我上面说的MVC的工作原理是理解。比如你的界面有一个按钮，按下这个按钮去网络上下载一个文件，这个按钮是view层的，是使用xml来写的，而那些和网络连接相关的代码写在其他类里，比如你可以写一个专门的networkHelper类，这个就是model层，那怎么连接这两层呢？是通过button.setOnClickListener()这个函数，这个函数就写在了activity中，对应于controller层。是不是很清晰。</p> <p>大家想过这样会有什么问题吗？显然是有的，不然为什么会有MVP和MVVM的诞生呢，是吧。问题就在于xml作为view层，控制能力实在太弱了，你想去动态的改变一个页面的背景，或者动态的隐藏/显示一个按钮，这些都没办法在xml中做，只能把代码写在activity中，造成了activity既是controller层，又是view层的这样一个窘境。大家回想一下自己写的代码，如果是一个逻辑很复杂的页面，activity或者fragment是不是动辄上千行呢？这样不仅写起来麻烦，维护起来更是噩梦。（当然看过Android源码的同学其实会发现上千行的代码不算啥，一个RecyclerView.class的代码都快上万行了呢。。）</p> <p>MVC还有一个重要的缺陷，大家看上面那幅图，view层和model层是相互可知的，这意味着两层之间存在耦合，耦合对于一个大型程序来说是非常致命的，因为这表示开发，测试，维护都需要花大量的精力。</p> <p>正因为MVC有这样那样的缺点，所以才演化出了MVP和MVVM这两种框架。</p> <h3 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h3><p>MVP作为MVC的演化，解决了MVC不少的缺点，对于Android来说，MVP的model层相对于MVC是一样的，而activity和fragment不再是controller层，而是纯粹的view层，所有关于用户事件的转发全部交由presenter层处理。下面还是让我们看图</p> <p> <img src="http://zjutkz.net/images/选择恐惧症的福音！教你认清MVC-MVP和MVVM/mvp.png" alt="mvp"></p> <p>从图中就可以看出，最明显的差别就是view层和model层不再相互可知，完全的解耦，取而代之的presenter层充当了桥梁的作用，用于操作view层发出的事件传递到presenter层中，presenter层去操作model层，并且将数据返回给view层，整个过程中view层和model层完全没有联系。看到这里大家可能会问，虽然view层和model层解耦了，但是view层和presenter层不是耦合在一起了吗？其实不是的，对于view层和presenter层的通信，我们是可以通过接口实现的，具体的意思就是说我们的activity，fragment可以去实现实现定义好的接口，而在对应的presenter中通过接口调用方法。不仅如此，我们还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试。这就解决了MVC模式中测试，维护难的问题。</p> <p>当然，其实最好的方式是使用fragment作为view层，而activity则是用于创建view层(fragment)和presenter层(presenter)的一个控制器。</p> <h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM最早是由微软提出的</p> <p> <img src="http://zjutkz.net/images/选择恐惧症的福音！教你认清MVC-MVP和MVVM/mvvm.png" alt="mvvm"></p> <p>这里要感谢<a href="http://www.jcodecraeer.com/plus/list.php?tid=16" target="_blank" rel="external">泡在网上的日子</a>，因为前面看到的三张图我都是从它的博客中摘取的，如果有人知道不允许这样做的话请告诉我，我会从我的博客中删除的，谢谢。</p> <p>从图中看出，它和MVP的区别貌似不大，只不过是presenter层换成了viewmodel层，还有一点就是view层和viewmodel层是相互绑定的关系，这意味着当你更新viewmodel层的数据的时候，view层会相应的变动ui。</p> <p>我们很难去说MVP和MVVM这两个MVC的变种孰优孰劣，还是要具体情况具体分析。</p> <h1 id="纸上得来终觉浅，绝知此事要躬行"><a href="#纸上得来终觉浅，绝知此事要躬行" class="headerlink" title="纸上得来终觉浅，绝知此事要躬行"></a>纸上得来终觉浅，绝知此事要躬行</h1><p>对于程序员来说，空谈是最没效率的一种方式，相信大家看了我上面对于三种模式的分析，或多或少都会有点云里雾里，下面让我们结合代码来看看。</p> <p>让我们试想一下下面这个情景，用户点击一个按钮A，获取github上对应公司对应仓库中贡献排行第一的任的名字，然后我们还会有一个按钮B，用户点击按钮B，界面上排行第一的那个人的名字就会换成自己的。</p> <h3 id="MVC-1"><a href="#MVC-1" class="headerlink" title="MVC"></a>MVC</h3><p>MVC实现是最简单的。</p> <p>首先看对应view层的xml文件</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">“<a href="http://schemas.android.com/apk/res/android" target="_blank" rel="external">http://schemas.android.com/apk/res/android</a>“</span></span><br><span class="line"> <span class="attr">xmlns:tools</span>=<span class="string">“<a href="http://schemas.android.com/tools" target="_blank" rel="external">http://schemas.android.com/tools</a>“</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:id</span>=<span class="string">“@+id/container”</span></span><br><span class="line"> <span class="attr">android:orientation</span>=<span class="string">“vertical”</span></span><br><span class="line"> <span class="attr">tools:context</span>=<span class="string">“.ui.view.MainActivity”</span></span><br><span class="line"> <span class="attr">android:fitsSystemWindows</span>=<span class="string">“true”</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span></span><br><span class="line"> <span class="attr">android:text</span>=<span class="string">“get”</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“wrap_content”</span></span><br><span class="line"> <span class="attr">android:onClick</span>=<span class="string">“get”</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span></span><br><span class="line"> <span class="attr">android:text</span>=<span class="string">“change”</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“wrap_content”</span></span><br><span class="line"> <span class="attr">android:onClick</span>=<span class="string">“change”</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">TextView</span></span><br><span class="line"> <span class="attr">android:id</span>=<span class="string">“@+id/top_contributor”</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:gravity</span>=<span class="string">“center”</span></span><br><span class="line"> <span class="attr">android:textSize</span>=<span class="string">“30sp”</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure> <p>很简单，两个Button一个TextView</p> <p>接着看对应controller层的activity</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> ProcessDialog dialog;</span><br><span class="line"> <span class="keyword">private</span> Contributor contributor = <span class="keyword">new</span> Contributor();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> TextView topContributor;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> Subscriber&lt;Contributor&gt; contributorSub = <span class="keyword">new</span> Subscriber&lt;Contributor&gt;() &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> showProgress();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Contributor contributor)</span> </span>&#123;</span><br><span class="line"> MainActivity.<span class="keyword">this</span>.contributor = contributor;</span><br><span class="line"></span><br><span class="line"> topContributor.setText(contributor.login);</span><br><span class="line"></span><br><span class="line"> dismissProgress();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"> setContentView(R.layout.activity_main);</span><br><span class="line"> topContributor = (TextView)findViewById(R.id.top_contributor);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line"> getTopContributor(<span class="string">“square”</span>, <span class="string">“retrofit”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line"> contributor.login = <span class="string">“zjutkz”</span>;</span><br><span class="line"></span><br><span class="line"> topContributor.setText(contributor.login);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTopContributor</span><span class="params">(String owner,String repo)</span></span>&#123;</span><br><span class="line"> GitHubApi.getContributors(owner, repo)</span><br><span class="line"> .take(<span class="number">1</span>)</span><br><span class="line"> .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line"> .subscribeOn(Schedulers.newThread())</span><br><span class="line"> .map(<span class="keyword">new</span> Func1&lt;List&lt;Contributor&gt;, Contributor&gt;() &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Contributor <span class="title">call</span><span class="params">(List&lt;Contributor&gt; contributors)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> contributors.get(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> .subscribe(contributorSub);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showProgress</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(dialog == <span class="keyword">null</span>)&#123;</span><br><span class="line"> dialog = <span class="keyword">new</span> ProcessDialog(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> dialog.showMessage(<span class="string">“正在加载…”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dismissProgress</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(dialog == <span class="keyword">null</span>)&#123;</span><br><span class="line"> dialog = <span class="keyword">new</span> ProcessDialog(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> dialog.dismiss();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>我们看一下get()方法中调用的getTopContributor方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTopContributor</span><span class="params">(String owner,String repo)</span></span>&#123;</span><br><span class="line"> GitHubApi.getContributors(owner, repo)</span><br><span class="line"> .take(<span class="number">1</span>)</span><br><span class="line"> .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line"> .subscribeOn(Schedulers.newThread())</span><br><span class="line"> .map(<span class="keyword">new</span> Func1&lt;List&lt;Contributor&gt;, Contributor&gt;() &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Contributor <span class="title">call</span><span class="params">(List&lt;Contributor&gt; contributors)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> contributors.get(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> .subscribe(contributorSub);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>熟悉rxjava和retrofit的同学应该都明白这是啥意思，如果对这两个开源库不熟悉也没事，可以参考<a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a>和<a href="https://realm.io/cn/news/droidcon-jake-wharton-simple-http-retrofit-2/" target="_blank" rel="external">用 Retrofit 2 简化 HTTP 请求</a>这两篇文章。</p> <p>对于这里大家只要知道这段代码的意思就是去获取github上owner公司中的repo仓库里贡献排名第一的那个人。贡献者是通过Contributor这个java bean存储的。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Contributor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> String login;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">int</span> contributions;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> login + <span class="string">“, “</span> + contributions;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>很简单，login表示贡献者的名字，contributor表示贡献的次数。</p> <p>然后通过rxjava的subscriber中的onNext()函数得到这个数据。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Subscriber&lt;Contributor&gt; contributorSub = <span class="keyword">new</span> Subscriber&lt;Contributor&gt;() &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> showProgress();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Contributor contributor)</span> </span>&#123;</span><br><span class="line"> MainActivity.<span class="keyword">this</span>.contributor = contributor;</span><br><span class="line"></span><br><span class="line"> topContributor.setText(contributor.login);</span><br><span class="line"></span><br><span class="line"> dismissProgress();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> <p>至于另外那个change按钮的工作大家应该都看得懂，这里不重复了。</p> <p>好了，我们来回顾一遍整个流程。</p> <p>首先在xml中写好布局代码。</p> <p>其次，activity作为一个controller，里面的逻辑是监听用户点击按钮并作出相应的操作。比如针对get按钮，做的工作就是调用GithubApi的方法去获取数据。</p> <p>GithubApi，Contributor等类则表示MVC中的model层，里面是数据和一些具体的逻辑操作。</p> <p>说完了流程再来看看问题，还记得我们前面说的吗，MVC在Android上的应用，一个具体的问题就是activity的责任过重，既是controller又是view。这里是怎么体现的呢？看了代码大家发现其中有一个progressDialog，在加载数据的时候显示，加载完了以后取消，逻辑其实是view层的逻辑，但是这个我们没办法写到xml里面啊，包括TextView.setTextView()，这个也一样。我们只能把这些逻辑写到activity中，这就造成了activity的臃肿，这个例子可能还好，如果是一个复杂的页面呢？大家自己想象一下。</p> <h3 id="MVP-1"><a href="#MVP-1" class="headerlink" title="MVP"></a>MVP</h3><p>通过具体的代码大家知道了MVC在Android上是如何工作的，也知道了它的缺点，那MVP是如何修正的呢？</p> <p>这里先向大家推荐github上的<a href="https://github.com/sockeqwe/mosby" target="_blank" rel="external">一个第三方库</a>，通过这个库大家可以很轻松的实现MVP。好了，还是看代码吧。</p> <p>首先还是xml</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">“<a href="http://schemas.android.com/apk/res/android" target="_blank" rel="external">http://schemas.android.com/apk/res/android</a>“</span></span><br><span class="line"> <span class="attr">xmlns:tools</span>=<span class="string">“<a href="http://schemas.android.com/tools" target="_blank" rel="external">http://schemas.android.com/tools</a>“</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:id</span>=<span class="string">“@+id/container”</span></span><br><span class="line"> <span class="attr">android:orientation</span>=<span class="string">“vertical”</span></span><br><span class="line"> <span class="attr">tools:context</span>=<span class="string">“.ui.view.MainActivity”</span></span><br><span class="line"> <span class="attr">android:fitsSystemWindows</span>=<span class="string">“true”</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span></span><br><span class="line"> <span class="attr">android:text</span>=<span class="string">“get”</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“wrap_content”</span></span><br><span class="line"> <span class="attr">android:onClick</span>=<span class="string">“get”</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span></span><br><span class="line"> <span class="attr">android:text</span>=<span class="string">“change”</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“wrap_content”</span></span><br><span class="line"> <span class="attr">android:onClick</span>=<span class="string">“change”</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">TextView</span></span><br><span class="line"> <span class="attr">android:id</span>=<span class="string">“@+id/top_contributor”</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:gravity</span>=<span class="string">“center”</span></span><br><span class="line"> <span class="attr">android:textSize</span>=<span class="string">“30sp”</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure> <p>这个和MVC是一样的，毕竟界面的形式是一样的嘛。</p> <p>接下去，我们看一个接口。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ContributorView</span> <span class="keyword">extends</span> <span class="title">MvpView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">onLoadContributorStart</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">onLoadContributorComplete</span><span class="params">(Contributor topContributor)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">onChangeContributorName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>这个接口起什么作用呢？还记得我之前说的吗？MVP模式中，view层和presenter层靠的就是接口进行连接，而具体的就是上面的这个了，里面定义的三个方法，第一个是开始获取数据，第二个是获取数据成功，第三个是改名。我们的view层（activity）只要实现这个接口就可以了。</p> <p>下面看activity的代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">MvpActivity</span>&lt;<span class="title">ContributorView</span>,<span class="title">ContributorPresenter</span>&gt; <span class="keyword">implements</span> <span class="title">ContributorView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> ProcessDialog dialog;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> TextView topContributor;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"> setContentView(R.layout.activity_main);</span><br><span class="line"> topContributor = (TextView)findViewById(R.id.top_contributor);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@NonNull</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> ContributorPresenter <span class="title">createPresenter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> ContributorPresenter();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line"> getPresenter().get(<span class="string">“square”</span>, <span class="string">“retrofit”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line"> getPresenter().change();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadContributorStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> showProgress();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadContributorComplete</span><span class="params">(Contributor contributor)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> topContributor.setText(contributor.toString());</span><br><span class="line"></span><br><span class="line"> dismissProgress();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChangeContributorName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"> topContributor.setText(name);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showProgress</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(dialog == <span class="keyword">null</span>)&#123;</span><br><span class="line"> dialog = <span class="keyword">new</span> ProcessDialog(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> dialog.showMessage(<span class="string">“正在加载…”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dismissProgress</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(dialog == <span class="keyword">null</span>)&#123;</span><br><span class="line"> dialog = <span class="keyword">new</span> ProcessDialog(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> dialog.dismiss();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>它继承自MvpActivity，实现了刚才的ContributorView接口。继承的那个MvpActivity大家这里不用太关心主要是做了一些初始化和生命周期的封装。我们只要关心这个activity作为view层，到底是怎么工作的。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line"> getPresenter().get(<span class="string">“square”</span>, <span class="string">“retrofit”</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line"> getPresenter().change();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>get()和change()这两个方法是我们点击按钮以后执行的，可以看到，里面完完全全没有任何和model层逻辑相关的东西，只是简单的委托给了presenter，那我们再看看presenter层做了什么</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContributorPresenter</span> <span class="keyword">extends</span> <span class="title">MvpBasePresenter</span>&lt;<span class="title">ContributorView</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> Subscriber&lt;Contributor&gt; contributorSub = <span class="keyword">new</span> Subscriber&lt;Contributor&gt;() &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> ContributorView view = getView();</span><br><span class="line"> <span class="keyword">if</span>(view != <span class="keyword">null</span>)&#123;</span><br><span class="line"> view.onLoadContributorStart();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Contributor topContributor)</span> </span>&#123;</span><br><span class="line"> ContributorView view = getView();</span><br><span class="line"> <span class="keyword">if</span>(view != <span class="keyword">null</span>)&#123;</span><br><span class="line"> view.onLoadContributorComplete(topContributor);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String owner,String repo)</span></span>&#123;</span><br><span class="line"> GitHubApi.getContributors(owner, repo)</span><br><span class="line"> .take(<span class="number">1</span>)</span><br><span class="line"> .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line"> .subscribeOn(Schedulers.newThread())</span><br><span class="line"> .map(<span class="keyword">new</span> Func1&lt;List&lt;Contributor&gt;, Contributor&gt;() &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Contributor <span class="title">call</span><span class="params">(List&lt;Contributor&gt; contributors)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> contributors.get(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> .subscribe(contributorSub);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>&#123;</span><br><span class="line"> ContributorView view = getView();</span><br><span class="line"> <span class="keyword">if</span>(view != <span class="keyword">null</span>)&#123;</span><br><span class="line"> view.onChangeContributorName(<span class="string">“zjutkz”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>其实就是把刚才MVC中activity的那部分和model层相关的逻辑抽取了出来，并且在相应的时机调用ContributorView接口对应的方法，而我们的activity是实现了这个接口的，自然会走到对应的方法中。</p> <p>好了，我们来捋一捋。</p> <p>首先，和MVC最大的不同，MVP把activity作为了view层，通过代码也可以看到，整个activity没有任何和model层相关的逻辑代码，取而代之的是把代码放到了presenter层中，presenter获取了model层的数据之后，通过接口的形式将view层需要的数据返回给它就OK了。</p> <p>这样的好处是什么呢？首先，activity的代码逻辑减少了，其次，view层和model层完全解耦，具体来说，如果你需要测试一个http请求是否顺利，你不需要写一个activity，只需要写一个java类，实现对应的接口，presenter获取了数据自然会调用相应的方法，相应的，你也可以自己在presenter中mock数据，分发给view层，用来测试布局是否正确。</p> <h3 id="MVVM-1"><a href="#MVVM-1" class="headerlink" title="MVVM"></a>MVVM</h3><p>首先在看这段内容之前，你需要保证你对data binding框架有基础的了解。不了解的同学可以去看下<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0603/2992.html" target="_blank" rel="external">这篇文章</a>。在接下去让我们开始探索MVVM，MVVM最近在Android上可谓十分之火，最主要的原因就是谷歌推出了data binding这个框架，可以轻松的实现MVVM。但是，我在网上查阅关于Android的data binding资料的时候，发现国内有很多人都误解了，首先，我们从一篇<a href="http://www.thinksaas.cn/group/topic/379469/" target="_blank" rel="external">错误的文章</a>开始。当然我在这里引用这篇文章也是对事不对人，如果对文章的作者产生了不好的影响我这里说一声抱歉。</p> <p>上面那篇文章是一个关于data binding的使用，看起来很美好，但是，其中有一个错误可以说是非常，非常，非常严重的。</p> <p> <img src="http://zjutkz.net/images/选择恐惧症的福音！教你认清MVC-MVP和MVVM/wrong_viewmodel.png" alt="wrong_viewmodel"></p> <p>它竟然说data binding的viewmodel层是binding类，其实不止是这篇文章，其他有一些开发者写的关于data binding的文章里都犯了一样的错误。大家如果也有这样的概念，请务必纠正过来！！</p> <p>说完了错误的概念，那data binding中真正的viewmodel是什么呢？我们还是以之前MVC，MVP的那个例子做引导。</p> <p>首先是view层，这没啥好说的，和MVP一样，只不过多了数据绑定。view层就是xml和activity。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">“<a href="http://schemas.android.com/apk/res/android" target="_blank" rel="external">http://schemas.android.com/apk/res/android</a>“</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">“contributor”</span> <span class="attr">type</span>=<span class="string">“zjutkz.com.mvvm.viewmodel.Contributor”</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">LinearLayout</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:id</span>=<span class="string">“@+id/container”</span></span><br><span class="line"> <span class="attr">android:orientation</span>=<span class="string">“vertical”</span></span><br><span class="line"> <span class="attr">android:fitsSystemWindows</span>=<span class="string">“true”</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span></span><br><span class="line"> <span class="attr">android:id</span>=<span class="string">“@+id/get”</span></span><br><span class="line"> <span class="attr">android:text</span>=<span class="string">“get”</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“wrap_content”</span></span><br><span class="line"> <span class="attr">android:onClick</span>=<span class="string">“get”</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span></span><br><span class="line"> <span class="attr">android:id</span>=<span class="string">“@+id/change”</span></span><br><span class="line"> <span class="attr">android:text</span>=<span class="string">“change”</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“wrap_content”</span></span><br><span class="line"> <span class="attr">android:onClick</span>=<span class="string">“change”</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">TextView</span></span><br><span class="line"> <span class="attr">android:id</span>=<span class="string">“@+id/top_contributor”</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:gravity</span>=<span class="string">“center”</span></span><br><span class="line"> <span class="attr">android:textSize</span>=<span class="string">“30sp”</span></span><br><span class="line"> <span class="attr">android:text</span>=<span class="string">“@&#123;contributor.login&#125;”</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> Subscriber&lt;Contributor&gt; contributorSub = <span class="keyword">new</span> Subscriber&lt;Contributor&gt;() &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> showProgress();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Contributor contributor)</span> </span>&#123;</span><br><span class="line"> binding.setContributor(contributor);</span><br><span class="line"></span><br><span class="line"> dismissProgress();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> ProcessDialog dialog;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> MvvmActivityMainBinding binding;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"> binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.mvvm_activity_main);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line"> getContributors(<span class="string">“square”</span>, <span class="string">“retrofit”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(binding.getContributor() != <span class="keyword">null</span>)&#123;</span><br><span class="line"> binding.getContributor().setLogin(<span class="string">“zjutkz”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showProgress</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(dialog == <span class="keyword">null</span>)&#123;</span><br><span class="line"> dialog = <span class="keyword">new</span> ProcessDialog(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> dialog.showMessage(<span class="string">“正在加载…”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dismissProgress</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(dialog == <span class="keyword">null</span>)&#123;</span><br><span class="line"> dialog = <span class="keyword">new</span> ProcessDialog(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> dialog.dismiss();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getContributors</span><span class="params">(String owner,String repo)</span></span>&#123;</span><br><span class="line"> GitHubApi.getContributors(owner, repo)</span><br><span class="line"> .take(<span class="number">1</span>)</span><br><span class="line"> .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line"> .subscribeOn(Schedulers.newThread())</span><br><span class="line"> .map(<span class="keyword">new</span> Func1&lt;List&lt;Contributor&gt;, Contributor&gt;() &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Contributor <span class="title">call</span><span class="params">(List&lt;Contributor&gt; contributors)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> contributors.get(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> .subscribe(contributorSub);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>如果你对data binding框架是有了解的，上面的代码你能轻松的看懂。</p> <p>那model层又是什么呢？当然就是那些和数据相关的类，GithubApi等等。</p> <p>重点来了，viewmodel层呢？好吧，viewmodel层就是是Contributor类！大家不要惊讶，我慢慢的来说。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Contributor</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> String login;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> contributions;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Bindable</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> login;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Bindable</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContributions</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> contributions;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogin</span><span class="params">(String login)</span></span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.login = login;</span><br><span class="line"> notifyPropertyChanged(BR.login);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContributions</span><span class="params">(<span class="keyword">int</span> contributions)</span></span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.contributions = contributions;</span><br><span class="line"> notifyPropertyChanged(BR.contributions);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> login + <span class="string">“, “</span> + contributions;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>我们可以看到，Contributor和MVP相比，继承自了BaseObservable，有基础的同学都知道这是为了当Contributor内部的variable改变的时候ui可以同步的作出响应。</p> <p>我为什么说Contributor是一个viewmodel呢。大家还记得viewmodel的概念吗？view和viewmodel相互绑定在一起，viewmodel的改变会同步到view层，从而view层作出响应。这不就是Contributor和xml中那些组件元素的关系吗？所以，大家不要被binding类迷惑了，data binding框架中的viewmodel是自己定义的那些看似是model类的东西！比如这里的Contributor！</p> <p>话说到这里，那binding类又是什么呢？其实具体对应到之前MVVM的那张图就很好理解了，我们想一下，binding类的工作是什么？</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.mvvm_activity_main);</span><br><span class="line"></span><br><span class="line">binding.setContributor(contributor);</span><br></pre></td></tr></table></figure> <p>首先，binding要通过DataBindingUtil.setContentView()方法将xml，也就是view层设定。</p> <p>接着，通过setXXX()方法将viewmodel层注入进去。</p> <p>由于这两个工作，view层(xml的各个组件)和viewmodel层(contributor)绑定在了一起。</p> <p>好了，大家知道了吗，binding类，其实就是上图中view和viewmodel中间的那根线啊！！</p> <h1 id="真理在荒谬被证实以前，都只是暗室里的装饰"><a href="#真理在荒谬被证实以前，都只是暗室里的装饰" class="headerlink" title="真理在荒谬被证实以前，都只是暗室里的装饰"></a>真理在荒谬被证实以前，都只是暗室里的装饰</h1><p>前面讨论了MVC，MVP和MVVM具体的实现方案，大家肯定都了解了它们三者的关系和使用方式。但是，这里我想说，不要把一个框架看作万能的，其实MVP和MVVM都是有自己的缺陷的！下面我一一来说。</p> <h3 id="MVP-2"><a href="#MVP-2" class="headerlink" title="MVP"></a>MVP</h3><p>MVP的问题在于，由于我们使用了接口的方式去连接view层和presenter层，这样就导致了一个问题，如果你有一个逻辑很复杂的页面，你的接口会有很多，十几二十个都不足为奇。想象一个app中有很多个这样复杂的页面，维护接口的成本就会非常的大。</p> <p>这个问题的解决方案就是你得根据自己的业务逻辑去斟酌着写接口。你可以定义一些基类接口，把一些公共的逻辑，比如网络请求成功失败，toast等等放在里面，之后你再定义新的接口的时候可以继承自那些基类，这样会好不少。</p> <h3 id="MVVM-2"><a href="#MVVM-2" class="headerlink" title="MVVM"></a>MVVM</h3><p>MVVM的问题呢，其实和MVC有一点像。data binding框架解决了数据绑定的问题，但是view层还是会过重，大家可以看我上面那个MVVM模式下的activity</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> Subscriber&lt;Contributor&gt; contributorSub = <span class="keyword">new</span> Subscriber&lt;Contributor&gt;() &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> showProgress();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Contributor contributor)</span> </span>&#123;</span><br><span class="line"> binding.setContributor(contributor);</span><br><span class="line"></span><br><span class="line"> dismissProgress();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> ProcessDialog dialog;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> MvvmActivityMainBinding binding;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"> binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.mvvm_activity_main);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line"> getContributors(<span class="string">“square”</span>, <span class="string">“retrofit”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(binding.getContributor() != <span class="keyword">null</span>)&#123;</span><br><span class="line"> binding.getContributor().setLogin(<span class="string">“zjutkz”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showProgress</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(dialog == <span class="keyword">null</span>)&#123;</span><br><span class="line"> dialog = <span class="keyword">new</span> ProcessDialog(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> dialog.showMessage(<span class="string">“正在加载…”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dismissProgress</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(dialog == <span class="keyword">null</span>)&#123;</span><br><span class="line"> dialog = <span class="keyword">new</span> ProcessDialog(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> dialog.dismiss();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getContributors</span><span class="params">(String owner,String repo)</span></span>&#123;</span><br><span class="line"> GitHubApi.getContributors(owner, repo)</span><br><span class="line"> .take(<span class="number">1</span>)</span><br><span class="line"> .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line"> .subscribeOn(Schedulers.newThread())</span><br><span class="line"> .map(<span class="keyword">new</span> Func1&lt;List&lt;Contributor&gt;, Contributor&gt;() &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Contributor <span class="title">call</span><span class="params">(List&lt;Contributor&gt; contributors)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> contributors.get(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> .subscribe(contributorSub);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>大家有没有发现，activity在MVVM中应该是view层的，但是里面却和MVC一样写了对model的处理。有人会说你可以把对model的处理放到viewmodel层中，这样不是更符合MVVM的设计理念吗？这样确实可以，但是progressDialog的show和dismiss呢？你怎么在viewmodel层中控制？这是view层的东西啊，而且在xml中也没有，我相信会有解决的方案，但是我们有没有一种更加便捷的方式呢？</p> <h1 id="路漫漫其修远兮，吾将上下而求索"><a href="#路漫漫其修远兮，吾将上下而求索" class="headerlink" title="路漫漫其修远兮，吾将上下而求索"></a>路漫漫其修远兮，吾将上下而求索</h1><p>其实，真正的最佳实践都是人想出来的，我们为何不结合一下MVP和MVVM的特点呢？其实谷歌已经做了这样的事，大家可以看下<a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">这个</a>。没错，就是MVP+data binding，我们可以使用presenter去做和model层的通信，并且使用data binding去轻松的bind data。还是让我们看代码吧。</p> <p>首先还是view层。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">“<a href="http://schemas.android.com/apk/res/android" target="_blank" rel="external">http://schemas.android.com/apk/res/android</a>“</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">“contributor”</span> <span class="attr">type</span>=<span class="string">“zjutkz.com.mvpdatabinding.viewmodel.Contributor”</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">LinearLayout</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:id</span>=<span class="string">“@+id/container”</span></span><br><span class="line"> <span class="attr">android:orientation</span>=<span class="string">“vertical”</span></span><br><span class="line"> <span class="attr">android:fitsSystemWindows</span>=<span class="string">“true”</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span></span><br><span class="line"> <span class="attr">android:id</span>=<span class="string">“@+id/get”</span></span><br><span class="line"> <span class="attr">android:text</span>=<span class="string">“get”</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“wrap_content”</span></span><br><span class="line"> <span class="attr">android:onClick</span>=<span class="string">“get”</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span></span><br><span class="line"> <span class="attr">android:id</span>=<span class="string">“@+id/change”</span></span><br><span class="line"> <span class="attr">android:text</span>=<span class="string">“change”</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“wrap_content”</span></span><br><span class="line"> <span class="attr">android:onClick</span>=<span class="string">“change”</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">TextView</span></span><br><span class="line"> <span class="attr">android:id</span>=<span class="string">“@+id/top_contributor”</span></span><br><span class="line"> <span class="attr">android:layout_width</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:layout_height</span>=<span class="string">“match_parent”</span></span><br><span class="line"> <span class="attr">android:gravity</span>=<span class="string">“center”</span></span><br><span class="line"> <span class="attr">android:textSize</span>=<span class="string">“30sp”</span></span><br><span class="line"> <span class="attr">android:text</span>=<span class="string">“@&#123;contributor.login&#125;”</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">MvpActivity</span>&lt;<span class="title">ContributorView</span>,<span class="title">ContributorPresenter</span>&gt; <span class="keyword">implements</span> <span class="title">ContributorView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> ProcessDialog dialog;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> ActivityMainBinding binding;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"> binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@NonNull</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> ContributorPresenter <span class="title">createPresenter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> ContributorPresenter();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line"> getPresenter().get(<span class="string">“square”</span>, <span class="string">“retrofit”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(binding.getContributor() != <span class="keyword">null</span>)&#123;</span><br><span class="line"> binding.getContributor().setLogin(<span class="string">“zjutkz”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadContributorStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> showProgress();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadContributorComplete</span><span class="params">(Contributor contributor)</span> </span>&#123;</span><br><span class="line"> binding.setContributor(contributor);</span><br><span class="line"> dismissProgress();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showProgress</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(dialog == <span class="keyword">null</span>)&#123;</span><br><span class="line"> dialog = <span class="keyword">new</span> ProcessDialog(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> dialog.showMessage(<span class="string">“正在加载…”</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dismissProgress</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(dialog == <span class="keyword">null</span>)&#123;</span><br><span class="line"> dialog = <span class="keyword">new</span> ProcessDialog(<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> dialog.dismiss();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>然后是presenter层</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContributorPresenter</span> <span class="keyword">extends</span> <span class="title">MvpBasePresenter</span>&lt;<span class="title">ContributorView</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> Subscriber&lt;Contributor&gt; contributorSub = <span class="keyword">new</span> Subscriber&lt;Contributor&gt;() &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> ContributorView view = getView();</span><br><span class="line"> <span class="keyword">if</span>(view != <span class="keyword">null</span>)&#123;</span><br><span class="line"> view.onLoadContributorStart();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Contributor topContributor)</span> </span>&#123;</span><br><span class="line"> ContributorView view = getView();</span><br><span class="line"> <span class="keyword">if</span>(view != <span class="keyword">null</span>)&#123;</span><br><span class="line"> view.onLoadContributorComplete(topContributor);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String owner,String repo)</span></span>&#123;</span><br><span class="line"> GitHubApi.getContributors(owner, repo)</span><br><span class="line"> .take(<span class="number">1</span>)</span><br><span class="line"> .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line"> .subscribeOn(Schedulers.newThread())</span><br><span class="line"> .map(<span class="keyword">new</span> Func1&lt;List&lt;Contributor&gt;, Contributor&gt;() &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Contributor <span class="title">call</span><span class="params">(List&lt;Contributor&gt; contributors)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> contributors.get(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> .subscribe(contributorSub);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>model层就是GithubApi等等。</p> <p>我们使用了data binding框架去节省了类似findViewById和数据绑定的时间，又使用了presenter去将业务逻辑和view层分离。</p> <p>当然这也不是固定的，你大可以在viewmodel中实现相应的接口，presenter层的数据直接发送到viewmodel中，在viewmodel里更新，因为view和viewmodel是绑定的，这样view也会相应的作出反应。</p> <p>说到这里，我还是想重复刚才的那句话，最佳实践都是人想出来的，用这些框架根本的原因也是为了尽量低的耦合性和尽量高的可复用性。</p> <h1 id="下期预告"><a href="#下期预告" class="headerlink" title="下期预告"></a>下期预告</h1><p>还是想好下期写点啥，如果我能想到的话，see you next week.</p><br></content>

<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/24/Android/框架/选择恐惧症的福音！教你认清MVC，MVP和MVVM/">https://fengqingxiuyi.github.io/2016/07/24/Android/框架/选择恐惧症的福音！教你认清MVC，MVP和MVVM/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MVP思想复杂使用]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/24/ShowJoy/MVP/MVP%E6%80%9D%E6%83%B3%E5%A4%8D%E6%9D%82%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>由于和前文<a href="../MVP思想简单使用/index.html">MVP思想简单使用</a>类似，所以此处不做过多阐述，以情况二为例：</p>
<h1 id="情况二：打开的页面需要直接调用一个或多个接口"><a href="#情况二：打开的页面需要直接调用一个或多个接口" class="headerlink" title="情况二：打开的页面需要直接调用一个或多个接口"></a>情况二：打开的页面需要直接调用一个或多个接口</h1><p><font color="red">注意：</font>本情况最好是只调用一个接口，以<code>搜索页面</code>为例！！！</p>
<h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><p>因为需要直接调用接口，所以我们必须的先创建好实体类，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchResult</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * shareId : 26</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> shareId;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建请求类"><a href="#创建请求类" class="headerlink" title="创建请求类"></a>创建请求类</h2><p>接着就需要创建请求类了，即SearchRequest类，主要用于请求地址的拼接与请求服务器，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchRequest</span> <span class="keyword">extends</span> <span class="title">SHGetRequest</span>&lt;<span class="title">List</span>&lt;<span class="title">SearchResult</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;List&lt;SearchResult&gt;&gt; getDataClass() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> TypeReference&lt;List&lt;SearchResult&gt;&gt; getDataTypeReference() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TypeReference&lt;List&lt;SearchResult&gt;&gt;()&#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getRequestUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SHHost.getMainHost() + <span class="string">"individuation/brands"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(String id, <span class="keyword">int</span> iddd)</span> </span>&#123;</div><div class="line">        addParam(<span class="string">"id"</span>, id);</div><div class="line">        addParam(<span class="string">"iddd"</span>, iddd);</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建数据操作类"><a href="#创建数据操作类" class="headerlink" title="创建数据操作类"></a>创建数据操作类</h2><p>然后我们需要创建数据操作类，即searchPresenter类，主要用于开启请求，处理请求成功或失败后返回的数据，进行解析、处理等操作，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchPresenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">SearchViewModel</span>, <span class="title">SHResponse</span>&lt;<span class="title">List</span>&lt;<span class="title">SearchResult</span>&gt;&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    SplashRequest splashRequest;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchPresenter</span><span class="params">(SearchViewModel viewModel)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(viewModel);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BaseRequest <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        request = <span class="keyword">new</span> SearchRequest();</div><div class="line">        <span class="comment">//添加参数</span></div><div class="line">        request.addParam(<span class="string">"type"</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> request;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">responseSuccess</span><span class="params">(SHResponse&lt;List&lt;SearchResult&gt;&gt; response)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">responseError</span><span class="params">(<span class="keyword">int</span> error)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">needRequestData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startSearchRequest</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line"></div><div class="line">        splashRequest = <span class="keyword">new</span> SplashRequest();</div><div class="line">        splashRequest.addParam(<span class="string">"id"</span>, id);</div><div class="line">        splashRequest.setCallBack(<span class="keyword">new</span> IRequestCallBack&lt;SHResponse&lt;SplashResult&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponseSuccess</span><span class="params">(SHResponse&lt;SplashResult&gt; splashResultSHResponse)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        splashRequest.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建ViewModel类"><a href="#创建ViewModel类" class="headerlink" title="创建ViewModel类"></a>创建ViewModel类</h2><p>再然后我们需要创建数据展示类，即SearchViewModel类，主要用于接收searchPresenter类传递过来的数据，并进行展示，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchViewModel</span> <span class="keyword">extends</span> <span class="title">BaseViewModel</span>&lt;<span class="title">SearchPresenter</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SwipeListView searchListView;</div><div class="line">    <span class="keyword">private</span> SearchListAdapter searchListAdapter;</div><div class="line">    <span class="keyword">private</span> SHListViewFooterView listViewFootView;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchViewModel</span><span class="params">(BaseActivity activity)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        searchListView = (SwipeListView) findViewById(R.id.search_list_view);</div><div class="line">        listViewFootView = <span class="keyword">new</span> SHListViewFooterView(context);</div><div class="line">        searchListAdapter = <span class="keyword">new</span> SearchListAdapter(activity, <span class="keyword">null</span>);</div><div class="line">        searchListAdapter.setFooter(listViewFootView);</div><div class="line">        searchListView.setAdapter(searchListAdapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//TODO adapter init</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SearchPresenter <span class="title">getPresenter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SearchPresenter(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加不同函数用于界面更新</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateListView</span><span class="params">(List&lt;SearchResult&gt; results)</span> </span>&#123;</div><div class="line"></div><div class="line">        presenter.startSearchRequest(<span class="number">23</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建Activity类"><a href="#创建Activity类" class="headerlink" title="创建Activity类"></a>创建Activity类</h2><p>最后就和情况一一样了，只需要创建SearchActivity类，实现相应的方法即可，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span>&lt;<span class="title">SearchViewModel</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SearchViewModel <span class="title">getViewModel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SearchViewModel(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentViewRes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> R.layout.search_activity;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/24/ShowJoy/MVP/MVP思想复杂使用/">https://fengqingxiuyi.github.io/2016/07/24/ShowJoy/MVP/MVP思想复杂使用/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MVP思想简单使用]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/24/ShowJoy/MVP/MVP%E6%80%9D%E6%83%B3%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>由于MVC导致了Activity负担过程，而且View和Model之间耦合严重，所里本文就MVP思想简单做了以下两种情况：</p>
<h1 id="情况一：打开的页面不需要立刻调用接口"><a href="#情况一：打开的页面不需要立刻调用接口" class="headerlink" title="情况一：打开的页面不需要立刻调用接口"></a>情况一：打开的页面不需要立刻调用接口</h1><p><font color="red">注意：</font>本情况以<code>关于我们</code>页面为例！！！</p>
<h2 id="创建ViewModel类"><a href="#创建ViewModel类" class="headerlink" title="创建ViewModel类"></a>创建ViewModel类</h2><p>创建AboutViewModel类继承于BaseViewModel，并实现需要实现的方法，主要用于实现相关的业务逻辑。参考案例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AboutViewModel</span> <span class="keyword">extends</span> <span class="title">BaseViewModel</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AboutViewModel</span><span class="params">(BaseActivity activity)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startRequest</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> BaseRequest <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(SHResponse response)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建Activity类"><a href="#创建Activity类" class="headerlink" title="创建Activity类"></a>创建Activity类</h2><p>创建AboutActivity类继承于BaseActivity<aboutviewmodel>，并实现需要实现的方法即可，参考案例如下：</aboutviewmodel></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AboutActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span>&lt;<span class="title">AboutViewModel</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AboutViewModel <span class="title">getViewModel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AboutViewModel(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentViewRes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> R.layout.about_activity;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="情况二：打开的页面需要直接调用一个或多个接口"><a href="#情况二：打开的页面需要直接调用一个或多个接口" class="headerlink" title="情况二：打开的页面需要直接调用一个或多个接口"></a>情况二：打开的页面需要直接调用一个或多个接口</h1><p><font color="red">注意：</font>本情况最好是只调用一个接口，以<code>搜索页面</code>为例！！！</p>
<h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><p>因为需要直接调用接口，所以我们必须的先创建好实体类，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchResult</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * shareId : 26</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> shareId;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建请求类"><a href="#创建请求类" class="headerlink" title="创建请求类"></a>创建请求类</h2><p>然后就需要创建请求类了，即SearchRequest类，主要用于请求地址的拼接与请求服务器，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchRequest</span> <span class="keyword">extends</span> <span class="title">SHGetRequest</span>&lt;<span class="title">List</span>&lt;<span class="title">SearchResult</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;List&lt;SearchResult&gt;&gt; getDataClass() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> TypeReference&lt;List&lt;SearchResult&gt;&gt; getDataTypeReference() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TypeReference&lt;List&lt;SearchResult&gt;&gt;()&#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getRequestUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SHHost.getMainHost() + <span class="string">"individuation/brands"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(String id, <span class="keyword">int</span> iddd)</span> </span>&#123;</div><div class="line">        addParam(<span class="string">"id"</span>, id);</div><div class="line">        addParam(<span class="string">"iddd"</span>, iddd);</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建ViewModel类-1"><a href="#创建ViewModel类-1" class="headerlink" title="创建ViewModel类"></a>创建ViewModel类</h2><p>全部准备完毕之后，就需要编写SearchViewModel类了，由于不清楚服务器返回的数据类型，所以我们在接受数据的时候，必须编写相对应的数据类型，如果返回的是JSON字符串类型则只需要把List去掉即可，即：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchViewModel</span> <span class="keyword">extends</span> <span class="title">BaseViewModel</span>&lt;<span class="title">SearchRequest</span>, <span class="title">SHResponse</span>&lt;<span class="title">SearchResult</span>&gt;&gt; </span>&#123;</div><div class="line">	...</div><div class="line">&#125;；</div></pre></td></tr></table></figure>
<p>此处返回的是JSON数组类型，所以我们以集合的形式进行接收，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchViewModel</span> <span class="keyword">extends</span> <span class="title">BaseViewModel</span>&lt;<span class="title">SearchRequest</span>, <span class="title">SHResponse</span>&lt;<span class="title">List</span>&lt;<span class="title">SearchResult</span>&gt;&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    AllBrandRequest allBrandRequest;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchViewModel</span><span class="params">(BaseActivity activity)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//TODO findviewbyid , init</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//TODO adapter init</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        request.start(<span class="string">"331"</span>, <span class="number">33</span>);</div><div class="line"></div><div class="line">        <span class="comment">//TODO 其他请求，</span></div><div class="line">        allBrandRequest = <span class="keyword">new</span> AllBrandRequest();</div><div class="line">        allBrandRequest.setCallBack(<span class="keyword">new</span> IRequestCallBack&lt;SHResponse&lt;AllBrandResult&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponseSuccess</span><span class="params">(SHResponse&lt;AllBrandResult&gt; response)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        allBrandRequest.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SearchRequest <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SearchRequest();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(SHResponse&lt;List&lt;SearchResult&gt;&gt; response)</span> </span>&#123;</div><div class="line">        <span class="comment">//TODO 处理请求结果</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (allBrandRequest != <span class="keyword">null</span>) &#123;</div><div class="line">            allBrandRequest.stop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建Activity类-1"><a href="#创建Activity类-1" class="headerlink" title="创建Activity类"></a>创建Activity类</h2><p>最后就和情况一一样了，只需要创建SearchActivity类，实现相应的方法即可，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span>&lt;<span class="title">SearchViewModel</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SearchViewModel <span class="title">getViewModel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SearchViewModel(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentViewRes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> R.layout.search_activity;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/24/ShowJoy/MVP/MVP思想简单使用/">https://fengqingxiuyi.github.io/2016/07/24/ShowJoy/MVP/MVP思想简单使用/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图片拼接+布局转换为图片]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/View/%E5%9B%BE%E7%89%87%E6%8B%BC%E6%8E%A5+%E5%B8%83%E5%B1%80%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p><font color="blue">业务需求详细描述：</font>最近产品说要在分享的商品图中添加一些其他图片和文字，然后拼接为一张图片，再分享到微信朋友圈，于是我就一脸懵逼了，但是没办法还是得做额！</p>
<p>然后整理了一下思路，主要有这么两条路线：</p>
<ol>
<li>自己手动绘制。</li>
<li>将布局转换为图片。</li>
</ol>
<p>很显然第一种方式是不合适的，无论是开发前还是开发后，成本都很大，所以果断选择了第二种方式。</p>
<p>一开始的时候，我没有经过大脑思考，果断的使用了getDrawingCache这个方法来解决这个业务需求，大致流程如下：<br>（1）创建需要显示成图片的布局，代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:id=<span class="string">"@+id/picmontage_root"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    &lt;RelativeLayout</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_weight=<span class="string">"1"</span></div><div class="line">        android:background=<span class="string">"@android:color/white"</span>&gt;</div><div class="line"></div><div class="line">        &lt;ImageView</div><div class="line">            android:id=<span class="string">"@+id/img_shop"</span></div><div class="line">            android:layout_width=<span class="string">"match_parent"</span></div><div class="line">            android:layout_height=<span class="string">"match_parent"</span></div><div class="line">            android:layout_margin=<span class="string">"20dp"</span> /&gt;</div><div class="line"></div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_alignParentBottom=<span class="string">"true"</span></div><div class="line">            android:layout_centerHorizontal=<span class="string">"true"</span></div><div class="line">            android:layout_marginBottom=<span class="string">"20dp"</span>&gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id=<span class="string">"@+id/img_price"</span></div><div class="line">                android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">                android:layout_height=<span class="string">"wrap_content"</span>/&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:id=<span class="string">"@+id/txt_price"</span></div><div class="line">                android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">                android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">                android:layout_centerInParent=<span class="string">"true"</span> /&gt;</div><div class="line"></div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line"></div><div class="line">    &lt;/RelativeLayout&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:background=<span class="string">"@android:color/white"</span>&gt;</div><div class="line"></div><div class="line">        &lt;ImageView</div><div class="line">            android:id=<span class="string">"@+id/img_qrcode"</span></div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_margin=<span class="string">"20dp"</span> /&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:layout_marginBottom=<span class="string">"20dp"</span></div><div class="line">            android:layout_marginRight=<span class="string">"20dp"</span></div><div class="line">            android:layout_marginTop=<span class="string">"20dp"</span></div><div class="line">            android:orientation=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">                android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">                android:text=<span class="string">"黄老五 提子味皇式烤芙条 300g 沙琪玛 休闲办公室零食...\n"</span></div><div class="line">                android:textColor=<span class="string">"@android:color/black"</span> /&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">                android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">                android:text=<span class="string">"长按识别二维码或扫一扫购买\n"</span></div><div class="line">                android:textColor=<span class="string">"@android:color/darker_gray"</span> /&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">                android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">                android:text=<span class="string">"From 萌店"</span></div><div class="line">                android:textColor=<span class="string">"@android:color/darker_gray"</span> /&gt;</div><div class="line"></div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>（2）设置图片和文字信息，这里为了方便，直接把文字放到了布局中，设置图片的代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addLinearLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">    view = View.inflate(<span class="keyword">this</span>, R.layout.activity_picmontage, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    LinearLayout picmontageRoot = (LinearLayout) view.findViewById(R.id.picmontage_root);</div><div class="line">    ImageView shopImg = (ImageView) view.findViewById(R.id.img_shop);</div><div class="line">    ImageView priceImg = (ImageView) view.findViewById(R.id.img_price);</div><div class="line">    TextView priceTxt = (TextView) view.findViewById(R.id.txt_price);</div><div class="line">    ImageView qrcodeImg = (ImageView) view.findViewById(R.id.img_qrcode);</div><div class="line"></div><div class="line">    shopImg.setImageResource(R.mipmap.shop);</div><div class="line">    priceImg.setImageResource(R.mipmap.price);</div><div class="line">    priceTxt.setText(<span class="string">"$ 20.00"</span>);</div><div class="line">    priceTxt.setTextSize(<span class="number">20</span>);</div><div class="line">    priceTxt.setTextColor(Color.WHITE);</div><div class="line">    qrcodeImg.setImageResource(R.mipmap.qrcode);</div><div class="line"></div><div class="line">    addViewContent.addView(view);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（3）然后就可以将布局转换成图片了，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawingCacheShow</span><span class="params">()</span> </span>&#123;</div><div class="line">    Bitmap cacheBitmap = convertViewToBitmap(addViewContent);</div><div class="line">    <span class="comment">//Bitmap cacheBitmap = getMagicDrawingCache(addViewContent);</span></div><div class="line"></div><div class="line">    <span class="comment">//addViewContent.removeView(view);</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(cacheBitmap != <span class="keyword">null</span>) &#123;</div><div class="line">        Bitmap newBitmap = Bitmap.createBitmap(cacheBitmap);</div><div class="line">        <span class="keyword">if</span> (newBitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imgAddViewCache.setImageBitmap(newBitmap);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Log.i(<span class="string">"123"</span>, <span class="string">"newBitmap=null"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Log.i(<span class="string">"123"</span>, <span class="string">"cacheBitmap=null"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">convertViewToBitmap</span><span class="params">(View view)</span></span>&#123;</div><div class="line">    view.measure(</div><div class="line">            View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>, View.MeasureSpec.UNSPECIFIED),</div><div class="line">            View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>, View.MeasureSpec.UNSPECIFIED));</div><div class="line">    view.layout(<span class="number">0</span>, <span class="number">0</span>, view.getMeasuredWidth(), view.getMeasuredHeight());</div><div class="line">    view.buildDrawingCache();</div><div class="line">    Bitmap bitmap = view.getDrawingCache();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">        Bitmap.Config cfg = bitmap.getConfig();</div><div class="line">        Log.d(<span class="string">"123"</span>, <span class="string">"----------------------- cache.getConfig() = "</span> + cfg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> bitmap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（4）然后发现图片不能正确显示，经过debug之后发现原来是图片过大的缘故，一脸懵逼，虽然使用了这样的压缩算法，但总是不尽如人意：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addLinearLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">    view = View.inflate(<span class="keyword">this</span>, R.layout.activity_picmontage, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    LinearLayout picmontageRoot = (LinearLayout) view.findViewById(R.id.picmontage_root);</div><div class="line">    ImageView shopImg = (ImageView) view.findViewById(R.id.img_shop);</div><div class="line">    ImageView priceImg = (ImageView) view.findViewById(R.id.img_price);</div><div class="line">    TextView priceTxt = (TextView) view.findViewById(R.id.txt_price);</div><div class="line">    ImageView qrcodeImg = (ImageView) view.findViewById(R.id.img_qrcode);</div><div class="line"></div><div class="line">    <span class="comment">// 压缩shop</span></div><div class="line">    Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.shop);</div><div class="line">    shopImg.setImageBitmap(resizeBm(bitmap, <span class="number">600</span>));</div><div class="line">    priceImg.setImageResource(R.mipmap.price);</div><div class="line">    priceTxt.setText(<span class="string">"$ 20.00"</span>);</div><div class="line">    priceTxt.setTextSize(<span class="number">20</span>);</div><div class="line">    priceTxt.setTextColor(Color.WHITE);</div><div class="line">    qrcodeImg.setImageResource(R.mipmap.qrcode);</div><div class="line"></div><div class="line">    addViewContent.addView(view);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> Bitmap <span class="title">resizeBm</span><span class="params">(Bitmap bitmap, <span class="keyword">int</span> scaleWidth)</span> </span>&#123;</div><div class="line">    <span class="comment">// 原始宽高</span></div><div class="line">    <span class="keyword">float</span> rawWidth = bitmap.getWidth();</div><div class="line">    <span class="keyword">float</span> rawHeight = bitmap.getHeight();</div><div class="line">    <span class="comment">// 新宽高</span></div><div class="line">    <span class="keyword">float</span> newWidth = <span class="number">0</span>;</div><div class="line">    <span class="keyword">float</span> newHeight = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 将宽度缩放到scaleWidth</span></div><div class="line">    <span class="keyword">if</span>(rawWidth&gt;scaleWidth) &#123;</div><div class="line">        newWidth = scaleWidth;</div><div class="line">        newHeight = rawHeight*(scaleWidth/rawWidth);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        newWidth = rawWidth;</div><div class="line">        newHeight = rawHeight;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 计算缩放比例</span></div><div class="line">    <span class="keyword">float</span> widthScale = newWidth/rawWidth;</div><div class="line">    <span class="keyword">float</span> heightScale = newHeight/rawHeight;</div><div class="line">    Log.i(<span class="string">"123"</span>, <span class="string">"widthScale="</span>+widthScale+<span class="string">", heightScale="</span>+heightScale);</div><div class="line">    <span class="comment">// 显示</span></div><div class="line">    Matrix matrix = <span class="keyword">new</span> Matrix();</div><div class="line">    matrix.postScale(widthScale,heightScale);</div><div class="line">    Bitmap resizeBmp = Bitmap.createBitmap(bitmap,<span class="number">0</span>,<span class="number">0</span>,bitmap.getWidth(),bitmap.getHeight(),matrix,<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">return</span> resizeBmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后有了大神的帮助，终于顿悟了，发现了神奇的方法：<font color="red">view.draw(canvas)</font>。然后就很简单了：<br>这里的第1步和第2步流程与上面的1、2步流程一模一样，我们直接进入第3步，我先给出主界面中的布局：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:id=<span class="string">"@+id/main_root"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    &lt;ScrollView</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:layout_width=<span class="string">"match_parent"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:orientation=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">            &lt;Button</div><div class="line">                android:layout_width=<span class="string">"match_parent"</span></div><div class="line">                android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">                android:onClick=<span class="string">"showPic"</span></div><div class="line">                android:text=<span class="string">"显示绘制的图片"</span> /&gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id=<span class="string">"@+id/img"</span></div><div class="line">                android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">                android:layout_height=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line">            &lt;LinearLayout</div><div class="line">                android:id=<span class="string">"@+id/main_content"</span></div><div class="line">                android:visibility=<span class="string">"invisible"</span></div><div class="line">                android:layout_width=<span class="string">"match_parent"</span></div><div class="line">                android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">                android:orientation=<span class="string">"vertical"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;/ScrollView&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>（3）然后将该布局添加到主界面中，并设置为invisible，但不能设置为gone，否则不能成功渲染，同样不能生成图片了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mainContent.addView(v);</div></pre></td></tr></table></figure>
<p>（4）最后我们就可以在点击事件里面将布局生成图片了，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPic</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> width = picmontageRoot.getMeasuredWidth();</div><div class="line">    <span class="keyword">int</span> height = picmontageRoot.getMeasuredHeight();</div><div class="line">    Bitmap b = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);</div><div class="line">    Canvas canvas = <span class="keyword">new</span> Canvas(b);</div><div class="line">    picmontageRoot.draw(canvas);</div><div class="line">    img.setImageBitmap(b);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/View/图片拼接+布局转换为图片/">https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/View/图片拼接+布局转换为图片/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网络请求的使用与查找]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E6%9F%A5%E6%89%BE/</url>
      <content type="html"><![CDATA[<h1 id="情况一：网络请求的使用："><a href="#情况一：网络请求的使用：" class="headerlink" title="情况一：网络请求的使用："></a>情况一：网络请求的使用：</h1><p>由于路飞已经把网络请求封装的很好了，所以实现起来是很方便的，目前网络请求是通过volley+okhttp3+fastjson来实现的。</p>
<p>以GET请求而言，主要的继承机构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BaseRequest&lt;T&gt; -&gt; BaseGetRequest&lt;T&gt; -&gt; SHGetRequest&lt;T&gt;</div></pre></td></tr></table></figure>
<p>所以当我们有新的业务需要进行网络请求时，只需要新建一个继承于SHGetRequest<t>的子类，例如：GetShareIdRequest。然后除了要实现必要的方法外，还需要根据实际情况判断是否需要实现start方法，用于参数的拼接。例如：</t></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetShareIdRequest</span> <span class="keyword">extends</span> <span class="title">SHGetRequest</span>&lt;<span class="title">ShareID</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Class&lt;ShareID&gt; <span class="title">getDataClass</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ShareID.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> TypeReference&lt;ShareID&gt; <span class="title">getDataTypeReference</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getRequestUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SHHost.getHost() + <span class="string">"/activity/share/create"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(String outProductId, String activityId, String userId)</span> </span>&#123;</div><div class="line">        addParam(<span class="string">"outProductId"</span>, outProductId);</div><div class="line">        addParam(<span class="string">"outProductId"</span>, activityId);</div><div class="line">        addParam(<span class="string">"userId"</span>, userId);</div><div class="line">        <span class="keyword">super</span>.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后创建GetShareIdRequest的对象，并对它设置回调，实现IRequestCallBack抽象类中需要实现的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">getShareIdRequest.setCallBack(<span class="keyword">new</span> IRequestCallBack&lt;SHResponse&lt;ShareID&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponseSuccess</span><span class="params">(SHResponse&lt;ShareID&gt; response)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (response.isSuccess) &#123;</div><div class="line">            <span class="keyword">if</span> (shareUrl.contains(<span class="string">"?"</span>)) &#123;</div><div class="line">                shareUrl = shareUrl + <span class="string">"&amp;trackId="</span> + response.data.shareId;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                shareUrl = shareUrl + <span class="string">"?trackId="</span> + response.data.shareId;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        mMoreWindow = <span class="keyword">new</span> ShareWindow(activity, title, shareTxt, shareUrl, shareImg);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最后调用start方法，开启请求即可，即以下语句：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getShareIdRequest.start(<span class="string">""</span>, activityId, UserDataManager.getUserId());</div></pre></td></tr></table></figure>
<h1 id="情况二：网络请求的查找："><a href="#情况二：网络请求的查找：" class="headerlink" title="情况二：网络请求的查找："></a>情况二：网络请求的查找：</h1><p><font color="red">案例：</font>购给利商品详情页点击分享按钮时无法弹出分享弹框，提示“网络错误，请重试”。</p>
<p>为了知道哪里出了问题，所以我们首先需要查找到它真正的URL地址究竟是什么，在哪里。</p>
<h2 id="查找URL地址过程："><a href="#查找URL地址过程：" class="headerlink" title="查找URL地址过程："></a>查找URL地址过程：</h2><p>（1）首页我们找到点击分享按钮这个点击事件的触发位置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showShareDialog</span><span class="params">(<span class="keyword">final</span> View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == shareDialog) &#123;</div><div class="line">        <span class="keyword">final</span> String shareUrl = SHHost.getMobileUrl() + <span class="string">"/product/"</span> + outProductId + <span class="string">".html"</span>;</div><div class="line">        <span class="keyword">if</span> (UserDataManager.isLogin()) &#123;</div><div class="line">            getShareIdRequest = <span class="keyword">new</span> GetShareIdRequest();</div><div class="line">            ...</div><div class="line">            getShareIdRequest.start(outProductId, activityId, UserDataManager.getUserId());</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            shareDialog = <span class="keyword">new</span> ShareWindow(activity, skuVo.getName(), skuVo.description, shareUrl, skuVo.getImage());</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        shareDialog.show(view);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以发现在<font color="red">第5行</font>创建了一个GetShareIdRequest请求，然后点进去看看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NonNull</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getRequestUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> SHHost.getHost() + <span class="string">"/activity/share/create"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(String outProductId, String activityId, String userId)</span> </span>&#123;</div><div class="line">    addParam(<span class="string">"outProductId"</span>, outProductId);</div><div class="line">    addParam(<span class="string">"outProductId"</span>, activityId);</div><div class="line">    addParam(<span class="string">"userId"</span>, userId);</div><div class="line">    <span class="keyword">super</span>.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现只是进行请求地址和参数的拼接，并没有我们需要的部分，所以继续查找其父类SHGetRequest：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> SHResponse <span class="title">parseResponse</span><span class="params">(SHResponse response)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != response.data &amp;&amp; response.data <span class="keyword">instanceof</span> JSON) &#123;</div><div class="line">        Class dataClazz = <span class="keyword">this</span>.getDataClass();</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != dataClazz) &#123;</div><div class="line">            response.data = JSON.toJavaObject((JSON)response.data, dataClazz);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            TypeReference typeReference = <span class="keyword">this</span>.getDataTypeReference();</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> != typeReference) &#123;</div><div class="line">                response.data = JSON.parseObject(((JSON)response.data).toJSONString(), typeReference, <span class="keyword">new</span> Feature[<span class="number">0</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现最重要的代码只是一个解析响应数据的方法，仍然与我们的需求不一致，所以依然继续查找其父类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BaseGetRequest：</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseGetRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getRequestMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现只有这两个方法，所以不多说了，继续前进吧，看看它的父类BaseRequest，终于不再继承了，辛苦额，答案肯定就在其中了：</p>
<p>代码还是比较多的，那么我们怎么查找呢，因为开始第一步的时候我们只看了它创建对象的过程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getShareIdRequest = <span class="keyword">new</span> GetShareIdRequest();</div></pre></td></tr></table></figure>
<p>所以我们首先得找到一个创建请求的方法，即createRequest：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Request <span class="title">createRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">    String url = <span class="keyword">this</span>.getRequestUrl();</div><div class="line">    <span class="keyword">if</span>(TextUtils.isEmpty(url)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> method = <span class="keyword">this</span>.getRequestMethod();</div><div class="line">        Listener listener = <span class="keyword">new</span> Listener() &#123;</div><div class="line">            ...</div><div class="line">        &#125;;</div><div class="line">        ErrorListener errorListener = <span class="keyword">new</span> ErrorListener() &#123;</div><div class="line">            ...</div><div class="line">        &#125;;</div><div class="line">        Object params = <span class="keyword">this</span>.getParams();</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == params) &#123;</div><div class="line">            params = <span class="keyword">new</span> HashMap();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        SHNetworkLog.d(<span class="string">"request:"</span>, url);</div><div class="line">        SHNetworkLog.d(<span class="string">"request params:"</span>, params.toString());</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span> == method?<span class="keyword">new</span> FastJsonRequest(method, <span class="keyword">this</span>.getRealUrl(url, (Map)params), <span class="keyword">this</span>.getTypeReference(), listener, errorListener):(<span class="keyword">this</span>.multipartRequestParams.hasFile()?<span class="keyword">new</span> FastJsonRequest(method, url, <span class="keyword">this</span>.multipartRequestParams, <span class="keyword">this</span>.getTypeReference(), listener, errorListener):<span class="keyword">new</span> FastJsonRequest(method, url, (Map)params, <span class="keyword">this</span>.getTypeReference(), listener, errorListener));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为我们的最终目的是查找URL地址，所以Listener监听器与我们无关，此处省略，最后发现了return语句，其中包含了URL地址，但是调用的是哪个方法呢？这个时候就需要我们使用<code>debug</code>技术来进行判断了！debug之后发现它调用的是前一个函数，我们点进去看看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FastJsonRequest</span><span class="params">(<span class="keyword">int</span> method, String url, TypeReference&lt;T&gt; typeReference, Listener&lt;T&gt; listener, ErrorListener errorListener)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(method, url, (Map)(<span class="keyword">new</span> HashMap()), typeReference, listener, errorListener);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现它接收五个参数，分别是请求方法类型（GET或POST）、请求地址，引用类型、监听器，至此我们终于发现了请求地址的存在，然后返回，继续在BaseGetRequest类中查看，发现主要代码是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.getRealUrl(url, (Map)params)</div></pre></td></tr></table></figure>
<p>再进入这个方法看看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getRealUrl</span><span class="params">(String url, Map&lt;String, String&gt; mParams)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == mParams) &#123;</div><div class="line">        <span class="keyword">return</span> url;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Uri uri = Uri.parse(url);</div><div class="line">        Builder builder = uri.buildUpon();</div><div class="line">        Iterator realUrl = mParams.entrySet().iterator();</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(realUrl.hasNext()) &#123;</div><div class="line">            Entry entry = (Entry)realUrl.next();</div><div class="line">            builder.appendQueryParameter((String)entry.getKey(), (String)entry.getValue());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String realUrl1 = builder.build().toString();</div><div class="line">        SHNetworkLog.d(<span class="string">"RealUrl:"</span>, realUrl1);</div><div class="line">        <span class="keyword">return</span> realUrl1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原来这是将URL和参数进行拼接的方法，最后的realUrl1即真正的请求地址。</p>
<h1 id="情况二：操作流程图"><a href="#情况二：操作流程图" class="headerlink" title="情况二：操作流程图"></a>情况二：操作流程图</h1><p><img src="../../../../../../images/ShowJoy/网络请求/网络请求的使用与查找-情况二.gif" alt="网络请求的使用与查找-情况二"></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/网络请求/网络请求的使用与查找/">https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/网络请求/网络请求的使用与查找/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intent统一跳转协议]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/Intent/Intent%E7%BB%9F%E4%B8%80%E8%B7%B3%E8%BD%AC%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>Intent统一跳转协议就是为了解决模块之间的耦合而存在的，不再以</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, OtherActivity.class));</div></pre></td></tr></table></figure>
<p>的方式进行页面跳转，而是以路径的形式进行跳转，去除了模块之间的引用，从而解决了模块之间的耦合问题。</p>
<p>其中路径形式一般是以下形式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">跳转Uri：scheme://host/path</div></pre></td></tr></table></figure>
<p>但是因为这样形式的路径都是在Androidmanifset.xml文件中进行定义的，根据业务的需要，不一定会完整定义跳转Uri，所以有以下两种情况。</p>
<h1 id="情况一：定义完整"><a href="#情况一：定义完整" class="headerlink" title="情况一：定义完整"></a>情况一：定义完整</h1><p>情况一：在清单文件中已经定义完整了data中的scheme、host和path后，一般不需要在Activity中接收处理，除非含有其他参数，例如<code>gougeli://page.sh/detail?userId=123456</code>。</p>
<p>Intent统一跳转协议分为以下几步：</p>
<p>（1）在Androidmanifest.xml文件中配置intent-filter，例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">    android:name=<span class="string">".module.detail.DetailActivity"</span></div><div class="line">    android:exported=<span class="string">"true"</span></div><div class="line">    android:screenOrientation=<span class="string">"portrait"</span> &gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name=<span class="string">"android.intent.action.VIEW"</span>/&gt;</div><div class="line">        &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</div><div class="line">        &lt;category android:name=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</div><div class="line">        &lt;data android:scheme=<span class="string">"gougeili"</span></div><div class="line">            android:host=<span class="string">"page.sh"</span></div><div class="line">            android:path=<span class="string">"/detail"</span>/&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure>
<p>（2）新建一个枚举类型的文件ActivityType，定义名称为Androidmanifest.xml文件中的intent-filter字段下的data字段下的<font color="red">android:path</font>的值，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  ActivityType &#123;</div><div class="line">    </div><div class="line">    DETAIL(<span class="string">"detail"</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String text;</div><div class="line">    </div><div class="line">    ActivityType(<span class="keyword">final</span> String text) &#123;</div><div class="line">        <span class="keyword">this</span>.text = text;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> text;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（3）编写SHIntent类，获取统一跳转所需的intent意图，通过之前设置的ActivityType实现路径的拼接，具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String SCHEME = <span class="string">"gougeili://"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">"page.sh/"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">getIntent</span><span class="params">(ActivityType activityType)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(getUrl(activityType.toString())));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> String <span class="title">getUrl</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder(SCHEME);</div><div class="line">    builder.append(HOST);</div><div class="line">    builder.append(type);</div><div class="line">    <span class="keyword">return</span> builder.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（4）到此我们就设置好了接收方，接下来就是设置发送方了。我们可以设置一个SHJump类，编写跳转到detail的方法，参数可填写bean类，用于数据的传递。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">goToDetail</span><span class="params">(Activity activity, SkuVo skuVo)</span> </span>&#123;</div><div class="line">    Intent intent = SHIntent.getIntent(ActivityType.DETAIL);</div><div class="line">    intent.putExtra(DetailConstants.EXTRA_ID, skuVo.outProductId);</div><div class="line">    intent.putExtra(DetailConstants.EXTRA_PRICE, skuVo.price);</div><div class="line">    intent.putExtra(DetailConstants.EXTRA_IMAGE, skuVo.skuPicture);</div><div class="line">    intent.putExtra(DetailConstants.EXTRA_TITLE, skuVo.name);</div><div class="line">    activity.startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然也可以是其他的参数类型，但是你也应该发现了，如果在SHJump类中写好了，也意味着写死了，如果需要灵活的实现数据的传递，可以通过SHIntent实现，其实是一样的，只不过不封装在SHJump类中了，因为SHJump类中存放的是通用方法。</p>
<h2 id="情况一：操作流程图"><a href="#情况一：操作流程图" class="headerlink" title="情况一：操作流程图"></a>情况一：操作流程图</h2><p><img src="../../../../../../images/ShowJoy/Intent/Intent统一跳转协议-情况一.gif" alt="Intent统一跳转协议-情况一"></p>
<h1 id="情况二：未定义完整"><a href="#情况二：未定义完整" class="headerlink" title="情况二：未定义完整"></a>情况二：未定义完整</h1><p>情况二：在清单文件中未定义完整data中的参数，例如只定义了scheme，那么就需要在该Activity中进行接收处理，例如：<code>gglapp://2836482321</code>。</p>
<p>Intent统一跳转协议分为以下几步：</p>
<p>（1）在Androidmanifest.xml文件中配置intent-filter，例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">    android:name=<span class="string">".module.splash.StartActivity"</span></div><div class="line">    android:exported=<span class="string">"true"</span></div><div class="line">    android:theme=<span class="string">"@style/Theme.Activity.Start"</span></div><div class="line">    android:screenOrientation=<span class="string">"portrait"</span> &gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name=<span class="string">"android.intent.action.MAIN"</span> /&gt;</div><div class="line"></div><div class="line">        &lt;category android:name=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">     &lt;intent-filter&gt;  </div><div class="line">        &lt;action android:name=<span class="string">"android.intent.action.VIEW"</span>/&gt;     </div><div class="line">        &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;               </div><div class="line">        &lt;category android:name=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;  </div><div class="line">        &lt;data android:scheme=<span class="string">"gglapp"</span>/&gt;</div><div class="line">    &lt;/intent-filter&gt;   </div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure>
<p>（2）此处并未使用统一跳转协议，所以以详细情况为例：</p>
<p><font color="red">问：</font>将购给利中的商品分享到微信后，用浏览器打开该链接，再点击其中的某个商品，只是跳转到客户端的首页，不能够跳转到购给利的商品详情页？</p>
<p><font color="blue">答：</font>使用intent接收并传递数据时，使用的intent对象出现错误，导致uri为空。</p>
<p><font color="purple">代码解析：</font>因为从外部浏览器跳转到内部Activity，必然有一个Uri地址，再由上述清单文件中只是定义了scheme，最后根据问题得知最终目的是跳转到商品详情页，所以StartActivity必然有通过getIntent方法接收Uri地址的代码，通过搜索getIntent发现如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">skip</span><span class="params">()</span> </span>&#123;</div><div class="line">    Intent intent = getIntent();</div><div class="line">    Uri uri = intent.getData();</div><div class="line"></div><div class="line">    Intent mainIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class);</div><div class="line">    Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line"></div><div class="line">    mainIntent.putExtra(AppConstants.EXTRA_URI, uri);</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    startActivity(mainIntent);</div><div class="line">    finish();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码表示从浏览器接收到了<code>Uri地址</code>之后，并将其传递到了MainActivity这个类中。</p>
<p>（3）然后我们可以在MainActivity中查找相关代码，这样比较复杂，我们可以将光标移动到EXTRA_URI处，然后按option+F7，即可迅速定位到相关代码位置，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);	</div><div class="line">	...</div><div class="line"></div><div class="line">	Uri uri = getIntent().getParcelableExtra(AppConstants.EXTRA_URI);</div><div class="line">	UriHandler.handle(<span class="keyword">this</span>, uri);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>于是我们发现它将Uri交给了UriHandler进行处理，再到UriHandler类中进行查看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">handle</span><span class="params">(Activity activity, Uri uri)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == uri) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LogUtils.d(<span class="string">"uri:"</span>, uri.toString());</div><div class="line"></div><div class="line">    String host = uri.getHost();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(host)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (host.equals(<span class="string">"gglappFulishe"</span>)) &#123;</div><div class="line">        activity.startActivity(<span class="keyword">new</span> Intent(activity, AddressActivity.class));</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Set&lt;String&gt; params = uri.getQueryParameterNames();</div><div class="line">        Intent intent = SHIntent.getIntent(ActivityType.DETAIL);</div><div class="line">        intent.putExtra(DetailConstants.EXTRA_ID, host);</div><div class="line">        <span class="keyword">for</span> (String param : params) &#123;</div><div class="line">            intent.putExtra(param, uri.getQueryParameter(param));</div><div class="line">        &#125;</div><div class="line">        activity.startActivity(intent);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终发现了处理Uri的详细操作，原来它是通过匹配host来进行区分处理的。</p>
<h2 id="情况二：操作流程图"><a href="#情况二：操作流程图" class="headerlink" title="情况二：操作流程图"></a>情况二：操作流程图</h2><p><img src="../../../../../../images/ShowJoy/Intent/Intent统一跳转协议-情况二.gif" alt="Intent统一跳转协议-情况二"></p>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>另外还需要注意的是，我们定义这样形式的路径只是定义了接收方而已，而发送方是谁都可以进行发送的。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/Intent/Intent统一跳转协议/">https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/Intent/Intent统一跳转协议/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jenkins项目构建过程详解]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/19/ShowJoy/Jenkins/Jenkins%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="首页网址："><a href="#首页网址：" class="headerlink" title="首页网址："></a>首页网址：</h1><p>网站首页地址如下所示：<a href="http://192.168.0.62:8080/" target="_blank" rel="external">http://192.168.0.62:8080/</a></p>
<h1 id="构建项目过程："><a href="#构建项目过程：" class="headerlink" title="构建项目过程："></a>构建项目过程：</h1><ol>
<li>在网页右侧选择需要进行项目构建的项目选项，如<code>尚妆</code>、<code>购给利</code>等，网址如：<a href="http://192.168.0.62:8080/view/购给利/" target="_blank" rel="external">http://192.168.0.62:8080/view/购给利/</a></li>
<li>点击网页左侧第一栏：新建，进行构建项目所需要的配置信息，如：<br>Enter an item name：gougeli-1.5.3<br>类别：构建一个自由风格的软件项目<br>Copy from：输入字符就会自动列出可能需要的结果，如：gougeili-1.5.2</li>
<li><p>输入完毕后点击OK会进入详细的配置信息页面，网址如：<a href="http://192.168.0.62:8080/view/购给利/job/gougeili-1.5.3/configure" target="_blank" rel="external">http://192.168.0.62:8080/view/购给利/job/gougeili-1.5.3/configure</a><br>一般需要修改的地方如下：描述、Branches to build -&gt; Branch Specifier (blank for ‘any’)中的分支名、Execute shell -&gt; Command中的分支名，其他的地方慎重处理，最后点击Apply或者保存按钮进行保存。</p>
<p> <font color="red"><strong><em>注意：</em></strong></font>点击Apply不会关闭本页面，点击保存会关闭页面，并跳转到：<a href="http://192.168.0.62:8080/view/购给利/job/gougeili-1.5.3/" target="_blank" rel="external">http://192.168.0.62:8080/view/购给利/job/gougeili-1.5.3/</a>。</p>
</li>
<li>然后点击左侧<code>立即构建</code>按钮，就会开始构建，构建完成或失败后可以在左侧最下面的<code>构建历史</code>中详细查看相对应的信息。</li>
<li>具体操作流程请查看“项目构建GIF操作流程图”</li>
</ol>
<h1 id="操作流程图"><a href="#操作流程图" class="headerlink" title="操作流程图"></a>操作流程图</h1><p><img src="../../../../../../images/ShowJoy/Jenkins/Jenkins项目构建.gif" alt="Jenkins项目构建过程详解"></p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/19/ShowJoy/Jenkins/Jenkins项目构建过程详解/">https://fengqingxiuyi.github.io/2016/07/19/ShowJoy/Jenkins/Jenkins项目构建过程详解/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac+GitHub+Hexo+NexT（五）偏好设置+Markdown]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/18/MGHN/Mac+GitHub+Hexo+NexT%EF%BC%88%E4%BA%94%EF%BC%89%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE+Markdown/</url>
      <content type="html"><![CDATA[<p>上文主要讲述了NexT的偏好设置，接下来就让我们开始Hexo的偏好设置吧。</p>
<p>首先进行相关重要说明，请仔细阅读：</p>
<ol>
<li>本人是在Mac搭建博客的，所以不会包含和Windows相关的内容，操作系统参数如下：<code>MacBook Pro OS X EI Capitan 10.11.5</code>。</li>
<li>因为搭建博客的过程中会经常输命令，所以：<ol>
<li>如果文中代码区块是以<code>$</code>开头的话，代表的是终端默认目录，如：<code>QingFengdeMacBook-Pro:~ qingfeng$</code>。</li>
<li>如果文中代码区块是以<code>Blog $</code>开头的话，代表的是<font color="blue">站点根目录</font>，如：<code>QingFengdeMacBook-Pro:Blog qingfeng$</code>。</li>
<li>如果文中代码区块是以<code>next $</code>开头的话，代表的是<font color="purple">主题根目录</font>，如：<code>QingFengdeMacBook-Pro:next qingfeng$</code>。</li>
</ol>
</li>
<li>所有输出类文字或者是提示性文字或者是重点文字都会有自带背景色。</li>
<li>需要掌握vim的基本知识和用法。</li>
</ol>
<h1 id="网站基本设置"><a href="#网站基本设置" class="headerlink" title="网站基本设置"></a>网站基本设置</h1><p>网站基本设置主要包括：标题、个性签名、用户名、语言和头像，即以下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Site</div><div class="line">title:	# 网站标题</div><div class="line">subtitle:	# 网站副标题</div><div class="line">description:	# 个人描述即个性签名</div><div class="line">author:	# 用户名</div><div class="line">language: # 网站语言，如：zh-Hans即为简体中文</div><div class="line">timezone:	# 网站时区</div><div class="line"># 头像</div><div class="line">avatar: /images/avatar.png</div></pre></td></tr></table></figure>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p>搜索功能对于每个网站都是很重要的，它可以帮助我们快速查找需要查找的内容，本网站也不例外，官网所推荐的搜索服务是<code>Swiftype</code>，但是效果不是太好，所以我们使用<code>本地搜索</code>功能。</p>
<p>首先我们需要安装search插件，在<font color="blue">站点根目录</font>下执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
<p>然后我们打开<font color="blue">站配置文件</font>，在其中新增search字段，具体填写内容如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div></pre></td></tr></table></figure>
<p>最后我们需要修改网站的<code>url</code>，具体修改内容如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class="line">url: https://fengqingxiuyi.github.io/</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div></pre></td></tr></table></figure>
<p>其实就是把其中<code>url</code>对应的默认值修改为你的网站域名。</p>
<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><p>Hexo博客是基于Markdown来进行编写的，由于相关的编辑器也有很多，所以这里就不做太多阐述了，大家有兴趣可以去<a href="https://linux.cn/article-2994-1.html" target="_blank" rel="external">这里</a>看看。</p>
<p>Mac下主要是用<a href="http://25.io/mou/" target="_blank" rel="external">Mou</a>编辑器进行编写的。界面效果如下所示：</p>
<p><img src="../../../../../images/MGHN/Mou.png" alt="Mou"></p>
<p>并附上教程地址：<a href="https://wizardforcel.gitbooks.io/markdown-simple-world/content/hexo-tutor-1.html" target="_blank" rel="external">Markdown简单的世界</a></p>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>最后推荐几篇个人认为<code>Hexo博客搭建</code>写的比较好的文章（包括官方教程）：</p>
<ol>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo中文官方教程</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT开始使用教程</a>，注意：右上角还有其他方面的教程</li>
<li><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">不蒜子-搞定你的网站计数</a></li>
<li><a href="https://wizardforcel.gitbooks.io/markdown-simple-world/content/hexo-tutor-1.html" target="_blank" rel="external">Markdown简单的世界</a></li>
<li><a href="http://blog.csdn.net/u014595668/article/details/51854259" target="_blank" rel="external">在github上搭建blog(基于Node.js的Hexo+next)</a></li>
<li><a href="http://www.jianshu.com/p/f66103553c45" target="_blank" rel="external">使用Hexo + Next搭建静态博客</a></li>
<li><a href="http://www.tuicool.com/articles/aQriym3" target="_blank" rel="external">Hexo+Next搭建Github个人静态博客</a></li>
<li><a href="http://zhiho.github.io/2015/09/21/start-hexo/" target="_blank" rel="external">Hexo搭建GitHub博客（一）- 环境搭建</a>，注意：还有第二、三部分哦！</li>
<li><a href="http://ezlippi.com/blog/2016/02/jekyll-to-hexo.html" target="_blank" rel="external">Jekyll迁移到Hexo搭建个人博客</a></li>
</ol>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/18/MGHN/Mac+GitHub+Hexo+NexT（五）偏好设置+Markdown/">https://fengqingxiuyi.github.io/2016/07/18/MGHN/Mac+GitHub+Hexo+NexT（五）偏好设置+Markdown/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac+GitHub+Hexo+NexT（四）NexT]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/18/MGHN/Mac+GitHub+Hexo+NexT%EF%BC%88%E5%9B%9B%EF%BC%89NexT/</url>
      <content type="html"><![CDATA[<p>博客框架我们已经全部搭建完成了，但是大部分人都不喜欢默认的landscape主题，因此，在本文中我就讲解一下很热门的NexT主题。</p>
<p>首先进行相关重要说明，请仔细阅读：</p>
<ol>
<li>本人是在Mac搭建博客的，所以不会包含和Windows相关的内容，操作系统参数如下：<code>MacBook Pro OS X EI Capitan 10.11.5</code>。</li>
<li>因为搭建博客的过程中会经常输命令，所以：<ol>
<li>如果文中代码区块是以<code>$</code>开头的话，代表的是终端默认目录，如：<code>QingFengdeMacBook-Pro:~ qingfeng$</code>。</li>
<li>如果文中代码区块是以<code>Blog $</code>开头的话，代表的是<font color="blue">站点根目录</font>，如：<code>QingFengdeMacBook-Pro:Blog qingfeng$</code>。</li>
<li>如果文中代码区块是以<code>next $</code>开头的话，代表的是<font color="purple">主题根目录</font>，如：<code>QingFengdeMacBook-Pro:next qingfeng$</code>。</li>
</ol>
</li>
<li>所有输出类文字或者是提示性文字或者是重点文字都会有自带背景色。</li>
<li>需要掌握vim的基本知识和用法。</li>
</ol>
<p>关于NexT主题的下载安装与使用，在<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">官方文档</a>中已经描述的十分详细了，所以这里我就讲一些个人认为比较重要的部分。</p>
<h1 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Put your favicon.ico into `hexo-site/source/` directory.</div><div class="line">favicon: /images/favicon.ico</div></pre></td></tr></table></figure>
<p>显而易见，favicon的起始目录就是source下，所以对我而言：favicon的完整目录就是<code>/Blog/source/images/favicon.ico</code>。</p>
<h1 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Set rss to false to disable feed link.</div><div class="line"># Leave rss as empty to use site&apos;s feed link.</div><div class="line"># Set rss to specific value if you have burned your feed already.</div><div class="line">rss:</div></pre></td></tr></table></figure>
<p>有需要的可以设置一下，这里我就简要阐述一下：</p>
<ol>
<li><p>在<font color="blue">站点根目录</font>下，新建一个字段<code>plugins</code>，然后进行如下配置：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plugins:</div><div class="line">- hexo-generator-feed # 插件名</div></pre></td></tr></table></figure>
</li>
<li><p>然后再配置显示你站点的RSS，文件路径<code>\atom.xml</code>，即：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Set rss to false to disable feed link.</div><div class="line"># Leave rss as empty to use site&apos;s feed link.</div><div class="line"># Set rss to specific value if you have burned your 	feed already.</div><div class="line">rss: \atom.xml</div></pre></td></tr></table></figure>
</li>
<li><p>最后你可以使用RSS作为迁移工具，用如下命令读取其他位置的RSS：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo migrate rss &lt;source&gt; # source是本地或网络文件路径</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="网站创建日期"><a href="#网站创建日期" class="headerlink" title="网站创建日期"></a>网站创建日期</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Specify the date when the site was setup</div><div class="line">since: 2016</div></pre></td></tr></table></figure>
<p>一般显示在网页最底部</p>
<h1 id="菜单栏设置"><a href="#菜单栏设置" class="headerlink" title="菜单栏设置"></a>菜单栏设置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)</div><div class="line">menu:</div><div class="line">  home: /			# 主页</div><div class="line">  categories: /categories	# 分类页（需手动创建）</div><div class="line">  #about: /about		# 关于页面（需手动创建）</div><div class="line">  archives: /archives		# 归档页</div><div class="line">  tags: /tags			# 标签页（需手动创建）</div><div class="line">  #commonweal: /404.html	# 404页面（需手动创建）</div></pre></td></tr></table></figure>
<p>在这里我们直接将<code>categories</code>和<code>tags</code>前面的<code>#</code>去掉，如果你想在首页显示<code>关于页面</code>和<code>404页面</code>的话，同样也可以将前面的<code>#</code>去掉。但是这样还不能让去掉<code>#</code>的页面正常显示，需要我们进行一些操作，请这里只介绍<code>分类页</code>和<code>标签页</code>修改。</p>
<h2 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h2><p>我们回到<font color="blue">站点根目录</font>下，然后输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo new page &quot;categories&quot;</div></pre></td></tr></table></figure>
<p>会在source目录下新建一个<code>categories</code>文件夹，里面包含一个<code>index.md</code>文件，然后用文本编辑器打开该文件，并将其头文件修改成一下格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: categories</div><div class="line">date: 2016-07-14 18:35:46</div><div class="line">type: &quot;categories&quot;</div><div class="line">---</div></pre></td></tr></table></figure>
<h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><p>修改完<code>分类页</code>后，继续输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo new page &quot;tags&quot;</div></pre></td></tr></table></figure>
<p>会在source目录下新建一个<code>tags</code>文件夹，里面包含一个<code>index.md</code>文件，同样的用文本编辑器打开该文件，并将其头文件修改成一下格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: tags</div><div class="line">date: 2016-07-14 18:31:07</div><div class="line">type: &quot;tags&quot;</div><div class="line">---</div></pre></td></tr></table></figure>
<h1 id="主题样式"><a href="#主题样式" class="headerlink" title="主题样式"></a>主题样式</h1><p>NexT主题一共有一下三种样式，分别有不同的显示效果，具体功能显示如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------------------------------------</div><div class="line"># Scheme Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Schemes</div><div class="line">#scheme: Muse	# 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</div><div class="line">scheme: Mist	# Muse 的紧凑版本，整洁有序的单栏外观</div><div class="line">#scheme: Pisces	# 双栏 Scheme，小家碧玉似的清新</div></pre></td></tr></table></figure>
<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p>字体的设置就看个人兴趣了，以下是我的字体设置，有兴趣的可以看一下，默认配置与我的配置只有一个不同点：它们很多都没有设置<code>family</code>的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------------------------------------</div><div class="line"># Font Settings</div><div class="line"># - Find fonts on Google Fonts (https://www.google.com/fonts)</div><div class="line"># - All fonts set here will have the following styles:</div><div class="line">#     light, light italic, normal, normal intalic, bold, bold italic</div><div class="line"># - Be aware that setting too much fonts will cause site running slowly</div><div class="line"># - Introduce in 5.0.1</div><div class="line"># ---------------------------------------------------------------</div><div class="line">font:</div><div class="line">  enable: true</div><div class="line">  </div><div class="line">  # Uri of fonts host. E.g. //fonts.googleapis.com (Default)</div><div class="line">  host:</div><div class="line"></div><div class="line">  # Global font settings used on &lt;body&gt; element.</div><div class="line">  global:</div><div class="line">    # external: true will load this font family from host.</div><div class="line">    external: true</div><div class="line">    family: Monda</div><div class="line"></div><div class="line">  # Font settings for Headlines (h1, h2, h3, h4, h5, h6)</div><div class="line">  # Fallback to `global` font settings.</div><div class="line">  headings:</div><div class="line">    external: true</div><div class="line">    family: Roboto Slab</div><div class="line"></div><div class="line">  # Font settings for posts</div><div class="line">  # Fallback to `global` font settings.</div><div class="line">  posts:</div><div class="line">    external: true</div><div class="line">    family:</div><div class="line"></div><div class="line">  # Font settings for Logo</div><div class="line">  # Fallback to `global` font settings.</div><div class="line">  # The `size` option use `px` as unit</div><div class="line">  logo:</div><div class="line">    external: true</div><div class="line">    family: Lobster Two</div><div class="line">    size: 24</div><div class="line">    </div><div class="line">  # Font settings for &lt;code&gt; and code blocks.</div><div class="line">  codes:</div><div class="line">    external: true</div><div class="line">    family: PT Monos</div></pre></td></tr></table></figure>
<h1 id="Social-Links"><a href="#Social-Links" class="headerlink" title="Social Links"></a>Social Links</h1><p>这里没有写中文标题的原因是：直接翻译过来总感觉不合适，在我看来，这边一般都是存放和自己有直接关联的地址，如：自己的博客地址，微博地址等，像我的就是这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Social Links</div><div class="line"># Key is the link label showing to end users.</div><div class="line"># Value is the target link (E.g. GitHub: https://github.com/iissnan)</div><div class="line">social:</div><div class="line">  #LinkLabel: Link</div><div class="line">  GitHub: https://github.com/fengqingxiuyi</div><div class="line">  CSDN: http://blog.csdn.net/u012505400</div><div class="line">  新浪微博: http://weibo.com/sd323</div><div class="line">  # 等等</div></pre></td></tr></table></figure>
<h1 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h1><p>不多说了，直接上我的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Blogrolls</div><div class="line">links_title: 友情链接</div><div class="line">#links_layout: block</div><div class="line">#links_layout: inline</div><div class="line">links:</div><div class="line">  #Title: http://example.com/</div><div class="line">  Cribug: http://notes.cribug.com/</div><div class="line">  郭朝的博客: http://blog.csdn.net/smartbetter/</div><div class="line">  郭霖的专栏: http://blog.csdn.net/guolin_blog/</div></pre></td></tr></table></figure>
<h1 id="代码高亮主题"><a href="#代码高亮主题" class="headerlink" title="代码高亮主题"></a>代码高亮主题</h1><p>顾名思义，适用于将代码块区域高亮显示的，当然不同语言的代码块区域高亮规则是不一样的，它的默认主题是<code>normal</code>，一般有以下几个主题，我这边选择了<code>night bright</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Code Highlight theme</div><div class="line"># Available value:</div><div class="line">#    normal | night | night eighties | night blue | night bright</div><div class="line"># https://github.com/chriskempson/tomorrow-theme</div><div class="line">highlight_theme: night bright</div></pre></td></tr></table></figure>
<h1 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h1><p>关于<a href="http://duoshuo.com/" target="_blank" rel="external">多说评论</a>和<a href="https://leancloud.cn/" target="_blank" rel="external">LeanCloud</a>，这里就不做过多阐述了，大家看官方文档就可以了，点击超链接即可进入他们各自的官方网站。</p>
<p>这里我们主要讲述以下另外一种<font color="red">站点访问计数</font>方法，即<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">不蒜子</a>，在这里我要对博主<code>zhiho</code>表示感谢，<a href="http://zhiho.github.io/2015/09/29/hexo-next/" target="_blank" rel="external">文中第6章</a>对于此<font color="red">站点访问计数</font>方法写的十分详细，虽然看起来有点小复杂，但是只要细心就不会出现奇葩问题的，所以我也就不做阐述了。</p>
<p>如果你有兴趣的话，你也可以看看<a href="http://zhiho.github.io/2015/09/29/hexo-next/" target="_blank" rel="external">这篇文章</a>中对于<code>sitemap</code>插件，也是有很大帮助的。</p>
<h1 id="网站背景"><a href="#网站背景" class="headerlink" title="网站背景"></a>网站背景</h1><p>如果你想要给自己的网站加一个背景图片也很简单，你只需要一下两步就行了：</p>
<ol>
<li><p>首先将背景图片存放到该目录下：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ cd themes/next/source/images/</div></pre></td></tr></table></figure>
</li>
<li><p>接着打开你的scheme所在的目录，比如我的scheme是Mist，然后编辑index.styl文件，即以下两条命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Blog $ cd themes/next/source/css/_schemes/Mist(Pisces和Muse也行)/</div><div class="line">Blog $ vim index.styl</div></pre></td></tr></table></figure>
</li>
</ol>
<p>打开index.styl文件之后，在<code>Components</code>上面新增设置背景图片的代码，具体内容如下所示：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">@import &quot;sidebar/sidebar-blogroll&quot;;</div><div class="line"></div><div class="line">body &#123; background:url(/images/back.png);&#125;</div><div class="line"></div><div class="line">// Components</div><div class="line">...</div></pre></td></tr></table></figure>
</code></pre><ol>
<li>最后重新部署就可以了！</li>
</ol>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>至此，我们已经讲解完了NexT主题的使用，如果你有其他个性化设置，欢迎留言；相信在前面讲解Hexo的时候，大家早就迫不及待的修改了一些Hexo中的个性化配置了吧，接下来我们来详细的配置一下。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/18/MGHN/Mac+GitHub+Hexo+NexT（四）NexT/">https://fengqingxiuyi.github.io/2016/07/18/MGHN/Mac+GitHub+Hexo+NexT（四）NexT/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac+GitHub+Hexo+NexT（三）Hexo]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/17/MGHN/Mac+GitHub+Hexo+NexT%EF%BC%88%E4%B8%89%EF%BC%89Hexo/</url>
      <content type="html"><![CDATA[<p>上文我们学会了如何安装Git和Node.js，接下来我们就需要开始真正的搭建Hexo博客框架了</p>
<p>首先进行相关重要说明，请仔细阅读：</p>
<ol>
<li>本人是在Mac搭建博客的，所以不会包含和Windows相关的内容，操作系统参数如下：<code>MacBook Pro OS X EI Capitan 10.11.5</code>。</li>
<li>因为搭建博客的过程中会经常输命令，所以：<ol>
<li>如果文中代码区块是以<code>$</code>开头的话，代表的是终端默认目录，如：<code>QingFengdeMacBook-Pro:~ qingfeng$</code>。</li>
</ol>
</li>
<li>所有输出类文字或者是提示性文字或者是重点文字都会有自带背景色。</li>
<li>需要掌握vim的基本知识和用法。</li>
</ol>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><h2 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h2><p>安装Hexo需要使用npm插件，由于我使用的Mac电脑，所以一般都是自带npm 的，如果你没有的话，请自行下载安装，此处不做阐述。</p>
<h2 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>打开终端后，直接输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>如果出现权限不足之类的错误，可以使用sudo提升权限，则新命令如下： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install hexo-cli -g</div></pre></td></tr></table></figure>
<h3 id="校检安装"><a href="#校检安装" class="headerlink" title="校检安装"></a>校检安装</h3><p>Hexo安装完成之后，也需要判断是否安装成功，继续输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo -v</div></pre></td></tr></table></figure>
<p>会出现一系列信息，如果每一行都显示正确的版本号信息，则表明安装正确，如下图所示：</p>
<p><img src="../../../../../images/MGHN/查看hexo版本.png" alt="查看hexo版本"></p>
<h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><p>首先选择一个目录用于存放和博客相关的文件，如果没有中意的目录，可以创建，比如我创建的名为<code>Blog</code>的文件夹，然后进入该目录下，输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo init</div></pre></td></tr></table></figure>
<p>用于初始化Hexo。全部完成以后会出现一些文件或文件夹，目录结构如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">根目录</div><div class="line"> |----_config.yml	# 全局配置文件</div><div class="line"> |----node_modules	# 插件安装位置</div><div class="line"> |----package.json	# Hexo框架参数</div><div class="line"> |----scaffolds		# 包含新建文章的文件头模板</div><div class="line"> |----scripts		# 脚本目录，JavaScript文件会自动执行</div><div class="line"> |----source		# 保存新建的文章及相关资源</div><div class="line">   |----_drafts		# 保存临时文件</div><div class="line">   |----_posts		# 保存新建的文章，md文件会被编译成html文件</div><div class="line"> |----themes		# 网站主题</div></pre></td></tr></table></figure>
<h2 id="预览博客"><a href="#预览博客" class="headerlink" title="预览博客"></a>预览博客</h2><p>继续输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo server</div></pre></td></tr></table></figure>
<p>当出现<code>Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code>这样的提示消息时，我们就可以在浏览器中打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>，用于访问自己的博客了。按Ctrl+C即可停止server服务。</p>
<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>预览好博客之后，我们来写一篇文章吧！那么，怎么写呢？很简单，我们按Ctrl+C停止了Hexo的server服务后，接着输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo new &quot;Hello World&quot;</div></pre></td></tr></table></figure>
<p>于是我们就创建了一篇名为Hello World的文章，并且终端也会告诉我们它的存储位置，如：<code>INFO  Created: /Volumes/MAIN/qingfeng/Blog/source/_posts/Hello-World.md</code>。</p>
<p>然后我们用文本编辑器打开该文件之后，会发现其中包含着这样一个文件头信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hello World	# 文章标题即文件名</div><div class="line">date: 2016-07-17 11:36:39	# 日期</div><div class="line">tags:	# 标签，值为[value1, value2, ...]的格式</div><div class="line">---</div><div class="line"># 正文，需要用MarkDown语言编写</div></pre></td></tr></table></figure>
<h2 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h2><p>继续输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo generate</div></pre></td></tr></table></figure>
<p>即可生成静态网页。</p>
<h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><h3 id="安装自动部署插件"><a href="#安装自动部署插件" class="headerlink" title="安装自动部署插件"></a>安装自动部署插件</h3><p>部署到GitHub即意味着将本地文件上传到GitHub网站中，所以显然是需要工具来实现的。在这里就介绍一下自动部署到GitHub上的插件，我们只需要输入一下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>即可实现下载安装，有些博客中该命令是没有最后的<code>--save</code>这一部分的，我这里这样写主要是为了防止出现一些不必要的错误。</p>
<h3 id="编辑全局配置文件"><a href="#编辑全局配置文件" class="headerlink" title="编辑全局配置文件"></a>编辑全局配置文件</h3><h4 id="打开全局配置文件"><a href="#打开全局配置文件" class="headerlink" title="打开全局配置文件"></a>打开全局配置文件</h4><p>下载安装成功之后，我们需要修改一下全局配置文件，输入一下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ vim _config.yml</div></pre></td></tr></table></figure>
<p>即可编辑该文件，目前我们将</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type:</div></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git # 因为Hexo版本大于3.0，所以填git；否则填github</div><div class="line">  repository: # 你的仓库地址</div><div class="line">  branch: # 你工程的分支名</div></pre></td></tr></table></figure>
<p>例如下图所示：</p>
<p><img src="../../../../../images/MGHN/设置仓库地址.png" alt="设置仓库地址"></p>
<h4 id="查看仓库地址"><a href="#查看仓库地址" class="headerlink" title="查看仓库地址"></a>查看仓库地址</h4><p>进入你的GitHub官网即可查看，如<a href="https://github.com/fengqingxiuyi/fengqingxiuyi.github.io" target="_blank" rel="external">我的GitHub地址</a>，打开后，点击页面右边中部的绿色按钮，名称为<code>Clone or download</code>，即可复制仓库地址，HTTPS和SSH两者皆可。</p>
<p>如果仓库地址填写为SSH地址，则必须要先配置好SSH key，可以在<a href="https://fengqingxiuyi.github.io/2016/07/17/Mac-GitHub-Hexo-NexT-——-GitHub/">Mac+GitHub+Hexo+NexT —— GitHub</a>一文中学习如何配置。</p>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a><font color="red">注意点</font></h4><ol>
<li>type、repository、branch必须并列对齐，切前面只能有两个空格符。<br></li>
<li>每个冒号后面都必须要有一个空格符（链接地址中的冒号除外）。</li>
</ol>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo deploy</div></pre></td></tr></table></figure>
<p>即可进行部署操作，如果输出内容为<code>ERROR Deployer not found: git</code>，则表明你的全局配置文件填写错误，或者是之前安装自动化部署插件时，所用的命令后面没有添加<code>-- save</code>，或者是其他原因，需要仔细排查。</p>
<h3 id="浏览查看"><a href="#浏览查看" class="headerlink" title="浏览查看"></a>浏览查看</h3><p>如果成功部署到了GitHub之上，我们就可以在浏览器中查看我们自己的博客了，在浏览器中输入你的GitHub仓库名即可查看，如：<a href="https://fengqingxiuyi.github.io/">https://fengqingxiuyi.github.io/</a>，如果显示正确，并且与你在本地预览时的别效果一模一样，则表明部署成功！</p>
<h1 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a>命令简写</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo n == hexo new</div><div class="line">hexo g == hexo generate</div><div class="line">hexo s == hexo server</div><div class="line">hexo d == hexo deploy</div></pre></td></tr></table></figure>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>至此，我们已经学会了博客的搭建与使用，接下来我们将要讲解如何使用NexT主题，美化我们的博客，当然你也可以使用其他主题美化，<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">这里列举了一些好看的Hexo主题</a>。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/17/MGHN/Mac+GitHub+Hexo+NexT（三）Hexo/">https://fengqingxiuyi.github.io/2016/07/17/MGHN/Mac+GitHub+Hexo+NexT（三）Hexo/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac+GitHub+Hexo+NexT（二）Git+Node.js]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/17/MGHN/Mac+GitHub+Hexo+NexT%EF%BC%88%E4%BA%8C%EF%BC%89Git+Node.js/</url>
      <content type="html"><![CDATA[<p>上文我们主要讲了如何创建GitHub账号和配置SSH，接下我们就来学习一下怎么安装Git和Node.js吧！</p>
<p>首先还是进行相关重要说明，请仔细阅读：</p>
<ol>
<li>本人是在Mac搭建博客的，所以不会包含和Windows相关的内容，操作系统参数如下：<code>MacBook Pro OS X EI Capitan 10.11.5</code>。</li>
<li>因为搭建博客的过程中会经常输命令，所以：<ol>
<li>如果文中代码区块是以<code>$</code>开头的话，代表的是终端默认目录，如：<code>QingFengdeMacBook-Pro:~ qingfeng$</code>。</li>
</ol>
</li>
<li>所有输出类文字或者是提示性文字或者是重点文字都会有自带背景色。</li>
</ol>
<p>接下来开始正文阐述：</p>
<h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h2><p>我们每安装一个软件都应该了解它是什么，能干什么。这里简要阐述一下：</p>
<ol>
<li>Git是目前世界上最先进的分布式版本控制系统（没有之一）。</li>
<li>Git有什么特点？简单来说就是：高端大气上档次！</li>
<li>附上廖雪峰的Git经典入门教程：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git入门教程</a></li>
</ol>
<h2 id="安装途径与过程"><a href="#安装途径与过程" class="headerlink" title="安装途径与过程"></a>安装途径与过程</h2><p>安装Git的方式有很多种，我们即可以从<a href="http://git-scm.com/downloads" target="_blank" rel="external">官网</a>下载，也可以使用其他方式安装，这里我们使用<a href="https://github.com/Homebrew" target="_blank" rel="external">Homebrew</a>来进行安装。</p>
<h3 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h3><p>安装Homebrew十分简单，我们只需要在打开终端之后，直接输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”</div></pre></td></tr></table></figure>
<p>然后等待它下载安装即可。</p>
<h3 id="安装Git-1"><a href="#安装Git-1" class="headerlink" title="安装Git"></a>安装Git</h3><p>Homebrew安装完成之后，继续输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install git</div></pre></td></tr></table></figure>
<p>就会自动下载最新的Git进行安装。</p>
<h3 id="安装校检"><a href="#安装校检" class="headerlink" title="安装校检"></a>安装校检</h3><p>安装完成之后，如何知道Git是否安装成功了呢？很简单，我们继续输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git --verison</div></pre></td></tr></table></figure>
<p>如果正确输出版本号信息，则表明Git安装正确，反之则表明安装失败，如果操作无误的话，请尝试其他途径。</p>
<h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>进入Node.js的<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a>，然后下载需要的版本就可以了，如<a href="https://nodejs.org/dist/v4.4.7/node-v4.4.7.pkg" target="_blank" rel="external">官方推荐版本</a>。下载完成之后，双击安装包一步一步进行傻瓜式安装即可。</p>
<h2 id="安装校检-1"><a href="#安装校检-1" class="headerlink" title="安装校检"></a>安装校检</h2><p>跟安装Git一样，我们也需要判断Node.js是否安装正确，同样十分简单，在终端输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node -v</div></pre></td></tr></table></figure>
<p>如果正确输出版本号信息，则表明Node.js安装正确。</p>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>至此，想必大家已经学会怎么安装Git和Node.js了吧，接下来让我们开始Hexo的正式征途吧。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/17/MGHN/Mac+GitHub+Hexo+NexT（二）Git+Node.js/">https://fengqingxiuyi.github.io/2016/07/17/MGHN/Mac+GitHub+Hexo+NexT（二）Git+Node.js/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac+GitHub+Hexo+NexT（一）GitHub]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/17/MGHN/Mac+GitHub+Hexo+NexT%EF%BC%88%E4%B8%80%EF%BC%89GitHub/</url>
      <content type="html"><![CDATA[<p>无意中发现了一篇博客，感觉好高大上的样纸，然后发现大家都在用这个搭建博客，我也算是out了，于是自己搭着也玩了玩。网上的搭建教程各式各样，不一定有适合自己的，或多或少都需要改动，下面就讲解一下我的博客搭建之旅。</p>
<p>首先进行相关重要说明，请仔细阅读：</p>
<ol>
<li>本人是在Mac搭建博客的，所以不会包含和Windows相关的内容，操作系统参数如下：<code>MacBook Pro OS X EI Capitan 10.11.5</code>。</li>
<li>因为搭建博客的过程中会经常输命令，所以：<ol>
<li>如果文中代码区块是以<code>$</code>开头的话，代表的是终端默认目录，如：<code>QingFengdeMacBook-Pro:~ qingfeng$</code>。</li>
</ol>
</li>
<li>所有输出类文字或者是提示性文字或者是重点文字都会有自带背景色。</li>
</ol>
<p>由于内容比较多，在这里我就分章节进行讲解，本文将要讲解的是GitHub的创建和SSH的配置。</p>
<h1 id="GitHub的创建"><a href="#GitHub的创建" class="headerlink" title="GitHub的创建"></a>GitHub的创建</h1><h2 id="创建GitHub账号"><a href="#创建GitHub账号" class="headerlink" title="创建GitHub账号"></a>创建GitHub账号</h2><h3 id="Step1-Set-up-a-personal-account"><a href="#Step1-Set-up-a-personal-account" class="headerlink" title="Step1 Set up a personal account"></a>Step1 Set up a personal account</h3><p>首先在浏览器中输入网址：<a href="https://github.com/join?source=header-home" target="_blank" rel="external">https://github.com/join?source=header-home</a>，然后填写用户名、邮箱、密码，<code>注意：该邮箱地址在之后的SSH配置中有重要作用</code>，最后点击<code>Create an account</code>按钮，界面如下图所示：</p>
<p><img src="../../../../../images/MGHN/注册github步骤1.png" alt="注册github步骤1"></p>
<h3 id="Step2-Choose-your-plan"><a href="#Step2-Choose-your-plan" class="headerlink" title="Step2 Choose your plan"></a>Step2 Choose your plan</h3><p>默认选择即可，直接点击<code>Continue</code>按钮，进入下一步进行邮箱验证，界面如下图所示：</p>
<p><img src="../../../../../images/MGHN/注册github步骤2.png" alt="注册github步骤2"></p>
<h3 id="Step3-Tailor-your-experinece"><a href="#Step3-Tailor-your-experinece" class="headerlink" title="Step3 Tailor your experinece"></a>Step3 Tailor your experinece</h3><p>登录自己设置的邮箱，点击<code>验证邮箱</code>之类的按钮后会进入<a href="https://github.com/" target="_blank" rel="external">该网页</a>，如果在其左上角有<code>Your email was verified.</code>这样的文案表明邮箱验证成功。</p>
<h2 id="配置GitHub相关信息"><a href="#配置GitHub相关信息" class="headerlink" title="配置GitHub相关信息"></a>配置GitHub相关信息</h2><p>接下来就可以进行创建工程、偏好设置等工作了：</p>
<h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>如图所示：</p>
<p><img src="../../../../../images/MGHN/配置相关信息.png" alt="配置相关信息"></p>
<p>如果你从未使用过GitHub，可以点击<a href="https://guides.github.com/activities/hello-world/" target="_blank" rel="external">Read the guide</a>按钮学习如何创建工程并使用。</p>
<p>如果你知道如何创建GitHub工程的话，那就简单了，我们直接点击<code>Start a project</code>按钮就可以开始工程的创建，当然也可以从<a href="https://github.com/new" target="_blank" rel="external">该网页</a>进入。依次填写仓库名、描述信息、初始化README文件，最后点击<code>Create repository</code>按钮，就成功创建一个工程了。但是因为该工程是为了给我们搭建博客用的，所以有以下几个注意点：</p>
<ol>
<li>仓库名必须为<strong>name.github.io</strong>这样的格式，其中<strong>name</strong>可以自定义，但其他部分不可变化，必须一模一样！！！据说后面的<strong>io</strong>也可以是<strong>com</strong>，这个我就不清楚了，有兴趣的可以尝试一下。</li>
<li>描述信息和是否初始化README文件完全看个人兴趣，但是我的建议是需要的，因为这样能直截了当的明白这个工程是干嘛用的。</li>
</ol>
<p>例如下图所示：</p>
<p><img src="../../../../../images/MGHN/创建仓库.png" alt="创建仓库"></p>
<h3 id="偏好设置"><a href="#偏好设置" class="headerlink" title="偏好设置"></a>偏好设置</h3><p>如果你熟悉GitHub，则可以进行一些偏好设置，即个性化设置，如上传头像。这些都是非常简单的，所示就不做阐述了，我们直接进入正题——配置SSH。</p>
<h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><ol>
<li><p>打开终端，输入命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<p> 如果输出内容是<code>Permission denied (publickey).</code>，则表明我们尚未在GitHub中正确配置SSH，反之则表明配置成功，直接跳过这一部分即可。</p>
</li>
<li><p>继续输入命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -C &quot;Your primary GitHub email address”</div></pre></td></tr></table></figure>
<p> 切记必须修改命令中的邮箱地址，该邮箱地址即为你注册GitHub时所填写的邮箱地址。输入成功之后会依行出现如下图所示提示：</p>
<p> <img src="../../../../../images/MGHN/设置SSH-key.png" alt="设置SSH-key"></p>
<p> 分别表示为文件名、密码和确认密码，输入正确后会给出重要的配置信息。</p>
</li>
<li><p>继续输入命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.ssh/key&apos;s filename.pub | pbcopy</div></pre></td></tr></table></figure>
<p> 该命令中pub文件的文件名即为上一步中设置的文件名，由于该命令中包含pbcopy关键字，所以该命令可以将pub文件中的内容直接复制到剪切板中，以防之后再网页中配置SSH信息时发生不必要的错误。</p>
</li>
<li><p>打开<a href="https://github.com/settings/keys" target="_blank" rel="external">配置SSH</a>的网页，点击右上角的<code>New SSH key</code>按钮，如下图所示：</p>
<p> <img src="../../../../../images/MGHN/设置SSH-key.png" alt="设置SSH-key"></p>
<p> 然后将pub文件中的内容粘贴到Key表示的文本框中，然后在Title表示的文本框中随便命名一个名字，最后点击<code>Add SSH key</code>按钮即可添加SSH key。</p>
</li>
<li><p>虽然已经成功添加了SSH key，但是这并不代表着SSH配置成功了，我们继续在终端输入命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<p> 如果输出内容包含<code>You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>则表明SSH配置成功；如果出现错误信息，可以继续输入该命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -Tv git@github.com</div></pre></td></tr></table></figure>
<p> 进行诊断与调试。</p>
</li>
<li>最后附上配置SSH的<a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="external">官方教程</a>，还是很详细的。</li>
</ol>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>至此，我们已经完成了GitHub的创建和SSH的配置，接下来就让我们来学习一下怎么安装Git和Node.js吧。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"></a><br>本网站如未注明转载，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a rel="external" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/17/MGHN/Mac+GitHub+Hexo+NexT（一）GitHub/">https://fengqingxiuyi.github.io/2016/07/17/MGHN/Mac+GitHub+Hexo+NexT（一）GitHub/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mou]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/16/MarkDown/Mou/</url>
      <content type="html"><![CDATA[<h1 id="Mou"><a href="#Mou" class="headerlink" title="Mou"></a>Mou</h1><p><img src="http://25.io/mou/Mou_128.png" alt="Mou icon"></p>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><strong>Mou</strong>, the missing Markdown editor for <em>web developers</em>.</p>
<h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><h4 id="Strong-and-Emphasize"><a href="#Strong-and-Emphasize" class="headerlink" title="Strong and Emphasize"></a>Strong and Emphasize</h4><p><strong>strong</strong> or <strong>strong</strong> ( Cmd + B )</p>
<p><em>emphasize</em> or <em>emphasize</em> ( Cmd + I )</p>
<p><strong>Sometimes I want a lot of text to be bold.<br>Like, seriously, a <em>LOT</em> of text</strong></p>
<h4 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h4><blockquote>
<p>Right angle brackets &gt; are used for block quotes.</p>
</blockquote>
<h4 id="Links-and-Email"><a href="#Links-and-Email" class="headerlink" title="Links and Email"></a>Links and Email</h4><p>An email <a href="&#109;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#64;&#101;&#120;&#97;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;">&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#64;&#101;&#120;&#97;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;</a> link.</p>
<p>Simple inline link <a href="http://chenluois.com" target="_blank" rel="external">http://chenluois.com</a>, another inline link <a href="http://25.io/smaller/" target="_blank" rel="external">Smaller</a>, one more inline link with title <a href="http://resizesafari.com" title="a Safari extension" target="_blank" rel="external">Resize</a>.</p>
<p>A <a href="http://25.io/mou/" title="Markdown editor on Mac OS X" target="_blank" rel="external">reference style</a> link. Input id, then anywhere in the doc, define the link with corresponding id:</p>
<p>Titles ( or called tool tips ) in the links are optional.</p>
<h4 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h4><p>An inline image <img src="http://25.io/smaller/favicon.ico" alt="Smaller icon" title="Title here">, title is optional.</p>
<p>A <img src="http://resizesafari.com/favicon.ico" alt="Resize icon" title="Title"> reference style image.</p>
<h4 id="Inline-code-and-Block-code"><a href="#Inline-code-and-Block-code" class="headerlink" title="Inline code and Block code"></a>Inline code and Block code</h4><p>Inline code are surround by <code>backtick</code> key. To create a block code:</p>
<pre><code>Indent each line by at least 1 tab, or 4 spaces.
var Mou = exactlyTheAppIwant; 
</code></pre><h4 id="Ordered-Lists"><a href="#Ordered-Lists" class="headerlink" title="Ordered Lists"></a>Ordered Lists</h4><p>Ordered lists are created using “1.” + Space:</p>
<ol>
<li>Ordered list item</li>
<li>Ordered list item</li>
<li>Ordered list item</li>
</ol>
<h4 id="Unordered-Lists"><a href="#Unordered-Lists" class="headerlink" title="Unordered Lists"></a>Unordered Lists</h4><p>Unordered list are created using “*” + Space:</p>
<ul>
<li>Unordered list item</li>
<li>Unordered list item</li>
<li>Unordered list item </li>
</ul>
<p>Or using “-“ + Space:</p>
<ul>
<li>Unordered list item</li>
<li>Unordered list item</li>
<li>Unordered list item</li>
</ul>
<h4 id="Hard-Linebreak"><a href="#Hard-Linebreak" class="headerlink" title="Hard Linebreak"></a>Hard Linebreak</h4><p>End a line with two or more spaces will create a hard linebreak, called <code>&lt;br /&gt;</code> in HTML. ( Control + Return )<br>Above line ended with 2 spaces.</p>
<h4 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h4><p>Three or more asterisks or dashes:</p>
<hr>
<hr>
<hr>
<h4 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h4><p>Setext-style:</p>
<h1 id="This-is-H1"><a href="#This-is-H1" class="headerlink" title="This is H1"></a>This is H1</h1><h2 id="This-is-H2"><a href="#This-is-H2" class="headerlink" title="This is H2"></a>This is H2</h2><p>atx-style:</p>
<h1 id="This-is-H1-1"><a href="#This-is-H1-1" class="headerlink" title="This is H1"></a>This is H1</h1><h2 id="This-is-H2-1"><a href="#This-is-H2-1" class="headerlink" title="This is H2"></a>This is H2</h2><h3 id="This-is-H3"><a href="#This-is-H3" class="headerlink" title="This is H3"></a>This is H3</h3><h4 id="This-is-H4"><a href="#This-is-H4" class="headerlink" title="This is H4"></a>This is H4</h4><h5 id="This-is-H5"><a href="#This-is-H5" class="headerlink" title="This is H5"></a>This is H5</h5><h6 id="This-is-H6"><a href="#This-is-H6" class="headerlink" title="This is H6"></a>This is H6</h6><h3 id="Extra-Syntax"><a href="#Extra-Syntax" class="headerlink" title="Extra Syntax"></a>Extra Syntax</h3><h4 id="Footnotes"><a href="#Footnotes" class="headerlink" title="Footnotes"></a>Footnotes</h4><p>Footnotes work mostly like reference-style links. A footnote is made of two things: a marker in the text that will become a superscript number; a footnote definition that will be placed in a list of footnotes at the end of the document. A footnote looks like this:</p>
<p>That’s some text with a footnote.[^1]</p>
<p>[^1]: And that’s the footnote.</p>
<h4 id="Strikethrough"><a href="#Strikethrough" class="headerlink" title="Strikethrough"></a>Strikethrough</h4><p>Wrap with 2 tilde characters:</p>
<p><del>Strikethrough</del></p>
<h4 id="Fenced-Code-Blocks"><a href="#Fenced-Code-Blocks" class="headerlink" title="Fenced Code Blocks"></a>Fenced Code Blocks</h4><p>Start with a line containing 3 or more backticks, and ends with the first line with the same number of backticks:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Fenced code blocks are like Stardard Markdown’s regular code</div><div class="line">blocks, except that they’re not indented and instead rely on</div><div class="line">a start and end fence lines to delimit the code block.</div></pre></td></tr></table></figure>
<h4 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h4><p>A simple table looks like this:</p>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
<th>Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody>
</table>
<p>If you wish, you can add a leading and tailing pipe to each line of the table:</p>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
<th>Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody>
</table>
<p>Specify alignment for each column by adding colons to separator lines:</p>
<table>
<thead>
<tr>
<th style="text-align:left">First Header</th>
<th style="text-align:center">Second Header</th>
<th style="text-align:right">Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
<tr>
<td style="text-align:left">Left</td>
<td style="text-align:center">Center</td>
<td style="text-align:right">Right</td>
</tr>
</tbody>
</table>
<h3 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h3><h4 id="View"><a href="#View" class="headerlink" title="View"></a>View</h4><ul>
<li>Toggle live preview: Shift + Cmd + I</li>
<li>Toggle Words Counter: Shift + Cmd + W</li>
<li>Toggle Transparent: Shift + Cmd + T</li>
<li>Toggle Floating: Shift + Cmd + F</li>
<li>Left/Right = 1/1: Cmd + 0</li>
<li>Left/Right = 3/1: Cmd + +</li>
<li>Left/Right = 1/3: Cmd + -</li>
<li>Toggle Writing orientation: Cmd + L</li>
<li>Toggle fullscreen: Control + Cmd + F</li>
</ul>
<h4 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h4><ul>
<li>Copy HTML: Option + Cmd + C</li>
<li>Strong: Select text, Cmd + B</li>
<li>Emphasize: Select text, Cmd + I</li>
<li>Inline Code: Select text, Cmd + K</li>
<li>Strikethrough: Select text, Cmd + U</li>
<li>Link: Select text, Control + Shift + L</li>
<li>Image: Select text, Control + Shift + I</li>
<li>Select Word: Control + Option + W</li>
<li>Select Line: Shift + Cmd + L</li>
<li>Select All: Cmd + A</li>
<li>Deselect All: Cmd + D</li>
<li>Convert to Uppercase: Select text, Control + U</li>
<li>Convert to Lowercase: Select text, Control + Shift + U</li>
<li>Convert to Titlecase: Select text, Control + Option + U</li>
<li>Convert to List: Select lines, Control + L</li>
<li>Convert to Blockquote: Select lines, Control + Q</li>
<li>Convert to H1: Cmd + 1</li>
<li>Convert to H2: Cmd + 2</li>
<li>Convert to H3: Cmd + 3</li>
<li>Convert to H4: Cmd + 4</li>
<li>Convert to H5: Cmd + 5</li>
<li>Convert to H6: Cmd + 6</li>
<li>Convert Spaces to Tabs: Control + [</li>
<li>Convert Tabs to Spaces: Control + ]</li>
<li>Insert Current Date: Control + Shift + 1</li>
<li>Insert Current Time: Control + Shift + 2</li>
<li>Insert entity &lt;: Control + Shift + ,</li>
<li>Insert entity &gt;: Control + Shift + .</li>
<li>Insert entity &amp;: Control + Shift + 7</li>
<li>Insert entity Space: Control + Shift + Space</li>
<li>Insert Scriptogr.am Header: Control + Shift + G</li>
<li>Shift Line Left: Select lines, Cmd + [</li>
<li>Shift Line Right: Select lines, Cmd + ]</li>
<li>New Line: Cmd + Return</li>
<li>Comment: Cmd + /</li>
<li>Hard Linebreak: Control + Return</li>
</ul>
<h4 id="Edit"><a href="#Edit" class="headerlink" title="Edit"></a>Edit</h4><ul>
<li>Auto complete current word: Esc</li>
<li>Find: Cmd + F</li>
<li>Close find bar: Esc</li>
</ul>
<h4 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h4><ul>
<li>Post on Scriptogr.am: Control + Shift + S</li>
<li>Post on Tumblr: Control + Shift + T</li>
</ul>
<h4 id="Export"><a href="#Export" class="headerlink" title="Export"></a>Export</h4><ul>
<li>Export HTML: Option + Cmd + E</li>
<li>Export PDF:  Option + Cmd + P</li>
</ul>
<h3 id="And-more"><a href="#And-more" class="headerlink" title="And more?"></a>And more?</h3><p>Don’t forget to check Preferences, lots of useful options are there.</p>
<p>Follow <a href="https://twitter.com/mou" target="_blank" rel="external">@Mou</a> on Twitter for the latest news.</p>
<p>For feedback, use the menu <code>Help</code> - <code>Send Feedback</code></p>
]]></content>
    </entry>
    
  
  
</search>
