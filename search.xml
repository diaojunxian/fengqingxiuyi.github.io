<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[MVP思想复杂使用]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/24/ShowJoy/MVP%E6%80%9D%E6%83%B3%E5%A4%8D%E6%9D%82%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>由于和前文<a href="../MVP思想简单使用/index.html">MVP思想简单使用</a>类似，所以此处不做过多阐述，以情况二为例：</p>
<h1 id="情况二：打开的页面需要直接调用一个或多个接口"><a href="#情况二：打开的页面需要直接调用一个或多个接口" class="headerlink" title="情况二：打开的页面需要直接调用一个或多个接口"></a>情况二：打开的页面需要直接调用一个或多个接口</h1><p><font color="red">注意：</font>本情况最好是只调用一个接口，以<code>搜索页面</code>为例！！！</p>
<h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><p>因为需要直接调用接口，所以我们必须的先创建好实体类，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchResult</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * shareId : 26</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> shareId;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建请求类"><a href="#创建请求类" class="headerlink" title="创建请求类"></a>创建请求类</h2><p>接着就需要创建请求类了，即SearchRequest类，主要用于请求地址的拼接与请求服务器，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchRequest</span> <span class="keyword">extends</span> <span class="title">SHGetRequest</span>&lt;<span class="title">List</span>&lt;<span class="title">SearchResult</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;List&lt;SearchResult&gt;&gt; getDataClass() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> TypeReference&lt;List&lt;SearchResult&gt;&gt; getDataTypeReference() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TypeReference&lt;List&lt;SearchResult&gt;&gt;()&#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getRequestUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SHHost.getMainHost() + <span class="string">"individuation/brands"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(String id, <span class="keyword">int</span> iddd)</span> </span>&#123;</div><div class="line">        addParam(<span class="string">"id"</span>, id);</div><div class="line">        addParam(<span class="string">"iddd"</span>, iddd);</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建数据操作类"><a href="#创建数据操作类" class="headerlink" title="创建数据操作类"></a>创建数据操作类</h2><p>然后我们需要创建数据操作类，即searchPresenter类，主要用于开启请求，处理请求成功或失败后返回的数据，进行解析、处理等操作，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchPresenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">SearchViewModel</span>, <span class="title">SHResponse</span>&lt;<span class="title">List</span>&lt;<span class="title">SearchResult</span>&gt;&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    SplashRequest splashRequest;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchPresenter</span><span class="params">(SearchViewModel viewModel)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(viewModel);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BaseRequest <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        request = <span class="keyword">new</span> SearchRequest();</div><div class="line">        <span class="comment">//添加参数</span></div><div class="line">        request.addParam(<span class="string">"type"</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> request;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">responseSuccess</span><span class="params">(SHResponse&lt;List&lt;SearchResult&gt;&gt; response)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">responseError</span><span class="params">(<span class="keyword">int</span> error)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">needRequestData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startSearchRequest</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line"></div><div class="line">        splashRequest = <span class="keyword">new</span> SplashRequest();</div><div class="line">        splashRequest.addParam(<span class="string">"id"</span>, id);</div><div class="line">        splashRequest.setCallBack(<span class="keyword">new</span> IRequestCallBack&lt;SHResponse&lt;SplashResult&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponseSuccess</span><span class="params">(SHResponse&lt;SplashResult&gt; splashResultSHResponse)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        splashRequest.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建ViewModel类"><a href="#创建ViewModel类" class="headerlink" title="创建ViewModel类"></a>创建ViewModel类</h2><p>再然后我们需要创建数据展示类，即SearchViewModel类，主要用于接收searchPresenter类传递过来的数据，并进行展示，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchViewModel</span> <span class="keyword">extends</span> <span class="title">BaseViewModel</span>&lt;<span class="title">SearchPresenter</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SwipeListView searchListView;</div><div class="line">    <span class="keyword">private</span> SearchListAdapter searchListAdapter;</div><div class="line">    <span class="keyword">private</span> SHListViewFooterView listViewFootView;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchViewModel</span><span class="params">(BaseActivity activity)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        searchListView = (SwipeListView) findViewById(R.id.search_list_view);</div><div class="line">        listViewFootView = <span class="keyword">new</span> SHListViewFooterView(context);</div><div class="line">        searchListAdapter = <span class="keyword">new</span> SearchListAdapter(activity, <span class="keyword">null</span>);</div><div class="line">        searchListAdapter.setFooter(listViewFootView);</div><div class="line">        searchListView.setAdapter(searchListAdapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//TODO adapter init</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SearchPresenter <span class="title">getPresenter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SearchPresenter(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加不同函数用于界面更新</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateListView</span><span class="params">(List&lt;SearchResult&gt; results)</span> </span>&#123;</div><div class="line"></div><div class="line">        presenter.startSearchRequest(<span class="number">23</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建Activity类"><a href="#创建Activity类" class="headerlink" title="创建Activity类"></a>创建Activity类</h2><p>最后就和情况一一样了，只需要创建SearchActivity类，实现相应的方法即可，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span>&lt;<span class="title">SearchViewModel</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SearchViewModel <span class="title">getViewModel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SearchViewModel(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentViewRes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> R.layout.search_activity;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p>本网站如未注明，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名(BY)-非商业性使用(NC)-相同方式共享(SA)4.0国际协议</a>授权。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/24/ShowJoy/MVP思想复杂使用/">https://fengqingxiuyi.github.io/2016/07/24/ShowJoy/MVP思想复杂使用/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MVP思想简单使用]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/24/ShowJoy/MVP%E6%80%9D%E6%83%B3%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>由于MVC导致了Activity负担过程，而且View和Model之间耦合严重，所里本文就MVP思想简单做了以下两种情况：</p>
<h1 id="情况一：打开的页面不需要立刻调用接口"><a href="#情况一：打开的页面不需要立刻调用接口" class="headerlink" title="情况一：打开的页面不需要立刻调用接口"></a>情况一：打开的页面不需要立刻调用接口</h1><p><font color="red">注意：</font>本情况以<code>关于我们</code>页面为例！！！</p>
<h2 id="创建ViewModel类"><a href="#创建ViewModel类" class="headerlink" title="创建ViewModel类"></a>创建ViewModel类</h2><p>创建AboutViewModel类继承于BaseViewModel，并实现需要实现的方法，主要用于实现相关的业务逻辑。参考案例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AboutViewModel</span> <span class="keyword">extends</span> <span class="title">BaseViewModel</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AboutViewModel</span><span class="params">(BaseActivity activity)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startRequest</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> BaseRequest <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(SHResponse response)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建Activity类"><a href="#创建Activity类" class="headerlink" title="创建Activity类"></a>创建Activity类</h2><p>创建AboutActivity类继承于BaseActivity<aboutviewmodel>，并实现需要实现的方法即可，参考案例如下：</aboutviewmodel></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AboutActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span>&lt;<span class="title">AboutViewModel</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AboutViewModel <span class="title">getViewModel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AboutViewModel(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentViewRes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> R.layout.about_activity;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="情况二：打开的页面需要直接调用一个或多个接口"><a href="#情况二：打开的页面需要直接调用一个或多个接口" class="headerlink" title="情况二：打开的页面需要直接调用一个或多个接口"></a>情况二：打开的页面需要直接调用一个或多个接口</h1><p><font color="red">注意：</font>本情况最好是只调用一个接口，以<code>搜索页面</code>为例！！！</p>
<h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><p>因为需要直接调用接口，所以我们必须的先创建好实体类，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchResult</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * shareId : 26</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> shareId;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建请求类"><a href="#创建请求类" class="headerlink" title="创建请求类"></a>创建请求类</h2><p>然后就需要创建请求类了，即SearchRequest类，主要用于请求地址的拼接与请求服务器，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchRequest</span> <span class="keyword">extends</span> <span class="title">SHGetRequest</span>&lt;<span class="title">List</span>&lt;<span class="title">SearchResult</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;List&lt;SearchResult&gt;&gt; getDataClass() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> TypeReference&lt;List&lt;SearchResult&gt;&gt; getDataTypeReference() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TypeReference&lt;List&lt;SearchResult&gt;&gt;()&#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getRequestUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SHHost.getMainHost() + <span class="string">"individuation/brands"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(String id, <span class="keyword">int</span> iddd)</span> </span>&#123;</div><div class="line">        addParam(<span class="string">"id"</span>, id);</div><div class="line">        addParam(<span class="string">"iddd"</span>, iddd);</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建ViewModel类-1"><a href="#创建ViewModel类-1" class="headerlink" title="创建ViewModel类"></a>创建ViewModel类</h2><p>全部准备完毕之后，就需要编写SearchViewModel类了，由于不清楚服务器返回的数据类型，所以我们在接受数据的时候，必须编写相对应的数据类型，如果返回的是JSON字符串类型则只需要把List去掉即可，即：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchViewModel</span> <span class="keyword">extends</span> <span class="title">BaseViewModel</span>&lt;<span class="title">SearchRequest</span>, <span class="title">SHResponse</span>&lt;<span class="title">SearchResult</span>&gt;&gt; </span>&#123;</div><div class="line">	...</div><div class="line">&#125;；</div></pre></td></tr></table></figure>
<p>此处返回的是JSON数组类型，所以我们以集合的形式进行接收，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchViewModel</span> <span class="keyword">extends</span> <span class="title">BaseViewModel</span>&lt;<span class="title">SearchRequest</span>, <span class="title">SHResponse</span>&lt;<span class="title">List</span>&lt;<span class="title">SearchResult</span>&gt;&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    AllBrandRequest allBrandRequest;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchViewModel</span><span class="params">(BaseActivity activity)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//TODO findviewbyid , init</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//TODO adapter init</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        request.start(<span class="string">"331"</span>, <span class="number">33</span>);</div><div class="line"></div><div class="line">        <span class="comment">//TODO 其他请求，</span></div><div class="line">        allBrandRequest = <span class="keyword">new</span> AllBrandRequest();</div><div class="line">        allBrandRequest.setCallBack(<span class="keyword">new</span> IRequestCallBack&lt;SHResponse&lt;AllBrandResult&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponseSuccess</span><span class="params">(SHResponse&lt;AllBrandResult&gt; response)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        allBrandRequest.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> SearchRequest <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SearchRequest();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(SHResponse&lt;List&lt;SearchResult&gt;&gt; response)</span> </span>&#123;</div><div class="line">        <span class="comment">//TODO 处理请求结果</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (allBrandRequest != <span class="keyword">null</span>) &#123;</div><div class="line">            allBrandRequest.stop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建Activity类-1"><a href="#创建Activity类-1" class="headerlink" title="创建Activity类"></a>创建Activity类</h2><p>最后就和情况一一样了，只需要创建SearchActivity类，实现相应的方法即可，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span>&lt;<span class="title">SearchViewModel</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SearchViewModel <span class="title">getViewModel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SearchViewModel(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentViewRes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> R.layout.search_activity;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p>本网站如未注明，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名(BY)-非商业性使用(NC)-相同方式共享(SA)4.0国际协议</a>授权。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/24/ShowJoy/MVP思想简单使用/">https://fengqingxiuyi.github.io/2016/07/24/ShowJoy/MVP思想简单使用/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图片携带其他图片和文字后转换为图片]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/%E5%9B%BE%E7%89%87%E6%90%BA%E5%B8%A6%E5%85%B6%E4%BB%96%E5%9B%BE%E7%89%87%E5%92%8C%E6%96%87%E5%AD%97%E5%90%8E%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p><font color="blue">业务需求详细描述：</font>最近产品说要在分享的商品图中添加一些其他图片和文字，然后拼接为一张图片，再分享到微信朋友圈，于是我就一脸懵逼了，但是没办法还是得做额！</p>
<p>然后整理了一下思路，主要有这么两条路线：</p>
<ol>
<li>自己手动绘制。</li>
<li>将布局转换为图片。</li>
</ol>
<p>很显然第一种方式是不合适的，无论是开发前还是开发后，成本都很大，所以果断选择了第二种方式。</p>
<p>一开始的时候，我没有经过大脑思考，果断的使用了getDrawingCache这个方法来解决这个业务需求，大致流程如下：<br>（1）创建需要显示成图片的布局，代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:id="@+id/picmontage_root"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:orientation="vertical"&gt;</div><div class="line"></div><div class="line">    &lt;RelativeLayout</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:layout_weight="1"</div><div class="line">        android:background="@android:color/white"&gt;</div><div class="line"></div><div class="line">        &lt;ImageView</div><div class="line">            android:id="@+id/img_shop"</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="match_parent"</div><div class="line">            android:layout_margin="20dp" /&gt;</div><div class="line"></div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_alignParentBottom="true"</div><div class="line">            android:layout_centerHorizontal="true"</div><div class="line">            android:layout_marginBottom="20dp"&gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/img_price"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"/&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:id="@+id/txt_price"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_centerInParent="true" /&gt;</div><div class="line"></div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line"></div><div class="line">    &lt;/RelativeLayout&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:background="@android:color/white"&gt;</div><div class="line"></div><div class="line">        &lt;ImageView</div><div class="line">            android:id="@+id/img_qrcode"</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_margin="20dp" /&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_marginBottom="20dp"</div><div class="line">            android:layout_marginRight="20dp"</div><div class="line">            android:layout_marginTop="20dp"</div><div class="line">            android:orientation="vertical"&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:text="黄老五 提子味皇式烤芙条 300g 沙琪玛 休闲办公室零食...\n"</div><div class="line">                android:textColor="@android:color/black" /&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:text="长按识别二维码或扫一扫购买\n"</div><div class="line">                android:textColor="@android:color/darker_gray" /&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:text="From 萌店"</div><div class="line">                android:textColor="@android:color/darker_gray" /&gt;</div><div class="line"></div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>（2）设置图片和文字信息，这里为了方便，直接把文字放到了布局中，设置图片的代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addLinearLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">    view = View.inflate(<span class="keyword">this</span>, R.layout.activity_picmontage, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    LinearLayout picmontageRoot = (LinearLayout) view.findViewById(R.id.picmontage_root);</div><div class="line">    ImageView shopImg = (ImageView) view.findViewById(R.id.img_shop);</div><div class="line">    ImageView priceImg = (ImageView) view.findViewById(R.id.img_price);</div><div class="line">    TextView priceTxt = (TextView) view.findViewById(R.id.txt_price);</div><div class="line">    ImageView qrcodeImg = (ImageView) view.findViewById(R.id.img_qrcode);</div><div class="line"></div><div class="line">    shopImg.setImageResource(R.mipmap.shop);</div><div class="line">    priceImg.setImageResource(R.mipmap.price);</div><div class="line">    priceTxt.setText(<span class="string">"$ 20.00"</span>);</div><div class="line">    priceTxt.setTextSize(<span class="number">20</span>);</div><div class="line">    priceTxt.setTextColor(Color.WHITE);</div><div class="line">    qrcodeImg.setImageResource(R.mipmap.qrcode);</div><div class="line"></div><div class="line">    addViewContent.addView(view);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（3）然后就可以将布局转换成图片了，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawingCacheShow</span><span class="params">()</span> </span>&#123;</div><div class="line">    Bitmap cacheBitmap = convertViewToBitmap(addViewContent);</div><div class="line">    <span class="comment">//Bitmap cacheBitmap = getMagicDrawingCache(addViewContent);</span></div><div class="line"></div><div class="line">    <span class="comment">//addViewContent.removeView(view);</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(cacheBitmap != <span class="keyword">null</span>) &#123;</div><div class="line">        Bitmap newBitmap = Bitmap.createBitmap(cacheBitmap);</div><div class="line">        <span class="keyword">if</span> (newBitmap != <span class="keyword">null</span>) &#123;</div><div class="line">            imgAddViewCache.setImageBitmap(newBitmap);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Log.i(<span class="string">"123"</span>, <span class="string">"newBitmap=null"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Log.i(<span class="string">"123"</span>, <span class="string">"cacheBitmap=null"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">convertViewToBitmap</span><span class="params">(View view)</span></span>&#123;</div><div class="line">    view.measure(</div><div class="line">            View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>, View.MeasureSpec.UNSPECIFIED),</div><div class="line">            View.MeasureSpec.makeMeasureSpec(<span class="number">0</span>, View.MeasureSpec.UNSPECIFIED));</div><div class="line">    view.layout(<span class="number">0</span>, <span class="number">0</span>, view.getMeasuredWidth(), view.getMeasuredHeight());</div><div class="line">    view.buildDrawingCache();</div><div class="line">    Bitmap bitmap = view.getDrawingCache();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">        Bitmap.Config cfg = bitmap.getConfig();</div><div class="line">        Log.d(<span class="string">"123"</span>, <span class="string">"----------------------- cache.getConfig() = "</span> + cfg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> bitmap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（4）然后发现图片不能正确显示，经过debug之后发现原来是图片过大的缘故，一脸懵逼，虽然使用了这样的压缩算法，但总是不尽如人意：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addLinearLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">    view = View.inflate(<span class="keyword">this</span>, R.layout.activity_picmontage, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    LinearLayout picmontageRoot = (LinearLayout) view.findViewById(R.id.picmontage_root);</div><div class="line">    ImageView shopImg = (ImageView) view.findViewById(R.id.img_shop);</div><div class="line">    ImageView priceImg = (ImageView) view.findViewById(R.id.img_price);</div><div class="line">    TextView priceTxt = (TextView) view.findViewById(R.id.txt_price);</div><div class="line">    ImageView qrcodeImg = (ImageView) view.findViewById(R.id.img_qrcode);</div><div class="line"></div><div class="line">    <span class="comment">// 压缩shop</span></div><div class="line">    Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.shop);</div><div class="line">    shopImg.setImageBitmap(resizeBm(bitmap, <span class="number">600</span>));</div><div class="line">    priceImg.setImageResource(R.mipmap.price);</div><div class="line">    priceTxt.setText(<span class="string">"$ 20.00"</span>);</div><div class="line">    priceTxt.setTextSize(<span class="number">20</span>);</div><div class="line">    priceTxt.setTextColor(Color.WHITE);</div><div class="line">    qrcodeImg.setImageResource(R.mipmap.qrcode);</div><div class="line"></div><div class="line">    addViewContent.addView(view);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> Bitmap <span class="title">resizeBm</span><span class="params">(Bitmap bitmap, <span class="keyword">int</span> scaleWidth)</span> </span>&#123;</div><div class="line">    <span class="comment">// 原始宽高</span></div><div class="line">    <span class="keyword">float</span> rawWidth = bitmap.getWidth();</div><div class="line">    <span class="keyword">float</span> rawHeight = bitmap.getHeight();</div><div class="line">    <span class="comment">// 新宽高</span></div><div class="line">    <span class="keyword">float</span> newWidth = <span class="number">0</span>;</div><div class="line">    <span class="keyword">float</span> newHeight = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 将宽度缩放到scaleWidth</span></div><div class="line">    <span class="keyword">if</span>(rawWidth&gt;scaleWidth) &#123;</div><div class="line">        newWidth = scaleWidth;</div><div class="line">        newHeight = rawHeight*(scaleWidth/rawWidth);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        newWidth = rawWidth;</div><div class="line">        newHeight = rawHeight;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 计算缩放比例</span></div><div class="line">    <span class="keyword">float</span> widthScale = newWidth/rawWidth;</div><div class="line">    <span class="keyword">float</span> heightScale = newHeight/rawHeight;</div><div class="line">    Log.i(<span class="string">"123"</span>, <span class="string">"widthScale="</span>+widthScale+<span class="string">", heightScale="</span>+heightScale);</div><div class="line">    <span class="comment">// 显示</span></div><div class="line">    Matrix matrix = <span class="keyword">new</span> Matrix();</div><div class="line">    matrix.postScale(widthScale,heightScale);</div><div class="line">    Bitmap resizeBmp = Bitmap.createBitmap(bitmap,<span class="number">0</span>,<span class="number">0</span>,bitmap.getWidth(),bitmap.getHeight(),matrix,<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">return</span> resizeBmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后有了大神的帮助，终于顿悟了，发现了神奇的方法：<font color="red">view.draw(canvas)</font>。然后就很简单了：<br>这里的第1步和第2步流程与上面的1、2步流程一模一样，我们直接进入第3步，我先给出主界面中的布局：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:id="@+id/main_root"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:orientation="vertical"&gt;</div><div class="line"></div><div class="line">    &lt;ScrollView</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:orientation="vertical"&gt;</div><div class="line"></div><div class="line">            &lt;Button</div><div class="line">                android:layout_width="match_parent"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:onClick="showPic"</div><div class="line">                android:text="显示绘制的图片" /&gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/img"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content" /&gt;</div><div class="line"></div><div class="line">            &lt;LinearLayout</div><div class="line">                android:id="@+id/main_content"</div><div class="line">                android:visibility="invisible"</div><div class="line">                android:layout_width="match_parent"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:orientation="vertical"/&gt;</div><div class="line"></div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;/ScrollView&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>（3）然后将该布局添加到主界面中，并设置为invisible，但不能设置为gone，否则不能成功渲染，同样不能生成图片了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mainContent.addView(v);</div></pre></td></tr></table></figure>
<p>（4）最后我们就可以在点击事件里面将布局生成图片了，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPic</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> width = picmontageRoot.getMeasuredWidth();</div><div class="line">    <span class="keyword">int</span> height = picmontageRoot.getMeasuredHeight();</div><div class="line">    Bitmap b = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);</div><div class="line">    Canvas canvas = <span class="keyword">new</span> Canvas(b);</div><div class="line">    picmontageRoot.draw(canvas);</div><div class="line">    img.setImageBitmap(b);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>版权声明</strong></p>
<p>本网站如未注明，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名(BY)-非商业性使用(NC)-相同方式共享(SA)4.0国际协议</a>授权。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/图片携带其他图片和文字后转换为图片/">https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/图片携带其他图片和文字后转换为图片/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网络请求的使用与查找]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E6%9F%A5%E6%89%BE/</url>
      <content type="html"><![CDATA[<h1 id="情况一：网络请求的使用："><a href="#情况一：网络请求的使用：" class="headerlink" title="情况一：网络请求的使用："></a>情况一：网络请求的使用：</h1><p>由于路飞已经把网络请求封装的很好了，所以实现起来是很方便的，目前网络请求是通过volley+okhttp3+fastjson来实现的。</p>
<p>以GET请求而言，主要的继承机构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BaseRequest&lt;T&gt; -&gt; BaseGetRequest&lt;T&gt; -&gt; SHGetRequest&lt;T&gt;</div></pre></td></tr></table></figure>
<p>所以当我们有新的业务需要进行网络请求时，只需要新建一个继承于SHGetRequest<t>的子类，例如：GetShareIdRequest。然后除了要实现必要的方法外，还需要根据实际情况判断是否需要实现start方法，用于参数的拼接。例如：</t></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetShareIdRequest</span> <span class="keyword">extends</span> <span class="title">SHGetRequest</span>&lt;<span class="title">ShareID</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Class&lt;ShareID&gt; <span class="title">getDataClass</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ShareID.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> TypeReference&lt;ShareID&gt; <span class="title">getDataTypeReference</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getRequestUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SHHost.getHost() + <span class="string">"/activity/share/create"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(String outProductId, String activityId, String userId)</span> </span>&#123;</div><div class="line">        addParam(<span class="string">"outProductId"</span>, outProductId);</div><div class="line">        addParam(<span class="string">"outProductId"</span>, activityId);</div><div class="line">        addParam(<span class="string">"userId"</span>, userId);</div><div class="line">        <span class="keyword">super</span>.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后创建GetShareIdRequest的对象，并对它设置回调，实现IRequestCallBack抽象类中需要实现的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">getShareIdRequest.setCallBack(<span class="keyword">new</span> IRequestCallBack&lt;SHResponse&lt;ShareID&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponseSuccess</span><span class="params">(SHResponse&lt;ShareID&gt; response)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (response.isSuccess) &#123;</div><div class="line">            <span class="keyword">if</span> (shareUrl.contains(<span class="string">"?"</span>)) &#123;</div><div class="line">                shareUrl = shareUrl + <span class="string">"&amp;trackId="</span> + response.data.shareId;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                shareUrl = shareUrl + <span class="string">"?trackId="</span> + response.data.shareId;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        mMoreWindow = <span class="keyword">new</span> ShareWindow(activity, title, shareTxt, shareUrl, shareImg);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最后调用start方法，开启请求即可，即以下语句：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getShareIdRequest.start(<span class="string">""</span>, activityId, UserDataManager.getUserId());</div></pre></td></tr></table></figure>
<h1 id="情况二：网络请求的查找："><a href="#情况二：网络请求的查找：" class="headerlink" title="情况二：网络请求的查找："></a>情况二：网络请求的查找：</h1><p><font color="red">案例：</font>购给利商品详情页点击分享按钮时无法弹出分享弹框，提示“网络错误，请重试”。</p>
<p>为了知道哪里出了问题，所以我们首先需要查找到它真正的URL地址究竟是什么，在哪里。</p>
<h2 id="查找URL地址过程："><a href="#查找URL地址过程：" class="headerlink" title="查找URL地址过程："></a>查找URL地址过程：</h2><p>（1）首页我们找到点击分享按钮这个点击事件的触发位置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showShareDialog</span><span class="params">(<span class="keyword">final</span> View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == shareDialog) &#123;</div><div class="line">        <span class="keyword">final</span> String shareUrl = SHHost.getMobileUrl() + <span class="string">"/product/"</span> + outProductId + <span class="string">".html"</span>;</div><div class="line">        <span class="keyword">if</span> (UserDataManager.isLogin()) &#123;</div><div class="line">            getShareIdRequest = <span class="keyword">new</span> GetShareIdRequest();</div><div class="line">            ...</div><div class="line">            getShareIdRequest.start(outProductId, activityId, UserDataManager.getUserId());</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            shareDialog = <span class="keyword">new</span> ShareWindow(activity, skuVo.getName(), skuVo.description, shareUrl, skuVo.getImage());</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        shareDialog.show(view);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以发现在<font color="red">第5行</font>创建了一个GetShareIdRequest请求，然后点进去看看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NonNull</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getRequestUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> SHHost.getHost() + <span class="string">"/activity/share/create"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(String outProductId, String activityId, String userId)</span> </span>&#123;</div><div class="line">    addParam(<span class="string">"outProductId"</span>, outProductId);</div><div class="line">    addParam(<span class="string">"outProductId"</span>, activityId);</div><div class="line">    addParam(<span class="string">"userId"</span>, userId);</div><div class="line">    <span class="keyword">super</span>.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现只是进行请求地址和参数的拼接，并没有我们需要的部分，所以继续查找其父类SHGetRequest：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> SHResponse <span class="title">parseResponse</span><span class="params">(SHResponse response)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != response.data &amp;&amp; response.data <span class="keyword">instanceof</span> JSON) &#123;</div><div class="line">        Class dataClazz = <span class="keyword">this</span>.getDataClass();</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != dataClazz) &#123;</div><div class="line">            response.data = JSON.toJavaObject((JSON)response.data, dataClazz);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            TypeReference typeReference = <span class="keyword">this</span>.getDataTypeReference();</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> != typeReference) &#123;</div><div class="line">                response.data = JSON.parseObject(((JSON)response.data).toJSONString(), typeReference, <span class="keyword">new</span> Feature[<span class="number">0</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现最重要的代码只是一个解析响应数据的方法，仍然与我们的需求不一致，所以依然继续查找其父类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BaseGetRequest：</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseGetRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getRequestMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现只有这两个方法，所以不多说了，继续前进吧，看看它的父类BaseRequest，终于不再继承了，辛苦额，答案肯定就在其中了：</p>
<p>代码还是比较多的，那么我们怎么查找呢，因为开始第一步的时候我们只看了它创建对象的过程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getShareIdRequest = <span class="keyword">new</span> GetShareIdRequest();</div></pre></td></tr></table></figure>
<p>所以我们首先得找到一个创建请求的方法，即createRequest：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Request <span class="title">createRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">    String url = <span class="keyword">this</span>.getRequestUrl();</div><div class="line">    <span class="keyword">if</span>(TextUtils.isEmpty(url)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> method = <span class="keyword">this</span>.getRequestMethod();</div><div class="line">        Listener listener = <span class="keyword">new</span> Listener() &#123;</div><div class="line">            ...</div><div class="line">        &#125;;</div><div class="line">        ErrorListener errorListener = <span class="keyword">new</span> ErrorListener() &#123;</div><div class="line">            ...</div><div class="line">        &#125;;</div><div class="line">        Object params = <span class="keyword">this</span>.getParams();</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == params) &#123;</div><div class="line">            params = <span class="keyword">new</span> HashMap();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        SHNetworkLog.d(<span class="string">"request:"</span>, url);</div><div class="line">        SHNetworkLog.d(<span class="string">"request params:"</span>, params.toString());</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span> == method?<span class="keyword">new</span> FastJsonRequest(method, <span class="keyword">this</span>.getRealUrl(url, (Map)params), <span class="keyword">this</span>.getTypeReference(), listener, errorListener):(<span class="keyword">this</span>.multipartRequestParams.hasFile()?<span class="keyword">new</span> FastJsonRequest(method, url, <span class="keyword">this</span>.multipartRequestParams, <span class="keyword">this</span>.getTypeReference(), listener, errorListener):<span class="keyword">new</span> FastJsonRequest(method, url, (Map)params, <span class="keyword">this</span>.getTypeReference(), listener, errorListener));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为我们的最终目的是查找URL地址，所以Listener监听器与我们无关，此处省略，最后发现了return语句，其中包含了URL地址，但是调用的是哪个方法呢？这个时候就需要我们使用<code>debug</code>技术来进行判断了！debug之后发现它调用的是前一个函数，我们点进去看看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FastJsonRequest</span><span class="params">(<span class="keyword">int</span> method, String url, TypeReference&lt;T&gt; typeReference, Listener&lt;T&gt; listener, ErrorListener errorListener)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(method, url, (Map)(<span class="keyword">new</span> HashMap()), typeReference, listener, errorListener);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现它接收五个参数，分别是请求方法类型（GET或POST）、请求地址，引用类型、监听器，至此我们终于发现了请求地址的存在，然后返回，继续在BaseGetRequest类中查看，发现主要代码是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.getRealUrl(url, (Map)params)</div></pre></td></tr></table></figure>
<p>再进入这个方法看看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getRealUrl</span><span class="params">(String url, Map&lt;String, String&gt; mParams)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == mParams) &#123;</div><div class="line">        <span class="keyword">return</span> url;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Uri uri = Uri.parse(url);</div><div class="line">        Builder builder = uri.buildUpon();</div><div class="line">        Iterator realUrl = mParams.entrySet().iterator();</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(realUrl.hasNext()) &#123;</div><div class="line">            Entry entry = (Entry)realUrl.next();</div><div class="line">            builder.appendQueryParameter((String)entry.getKey(), (String)entry.getValue());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String realUrl1 = builder.build().toString();</div><div class="line">        SHNetworkLog.d(<span class="string">"RealUrl:"</span>, realUrl1);</div><div class="line">        <span class="keyword">return</span> realUrl1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原来这是将URL和参数进行拼接的方法，最后的realUrl1即真正的请求地址。</p>
<h1 id="情况二：操作流程图"><a href="#情况二：操作流程图" class="headerlink" title="情况二：操作流程图"></a>情况二：操作流程图</h1><p><img src="../../../../../images/ShowJoy/网络请求的使用与查找-情况二.gif" alt="网络请求的使用与查找-情况二"></p>
<hr>
<p><strong>版权声明</strong></p>
<p>本网站如未注明，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名(BY)-非商业性使用(NC)-相同方式共享(SA)4.0国际协议</a>授权。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/网络请求的使用与查找/">https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/网络请求的使用与查找/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Intent统一跳转协议]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/Intent%E7%BB%9F%E4%B8%80%E8%B7%B3%E8%BD%AC%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>Intent统一跳转协议就是为了解决模块之间的耦合而存在的，不再以</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, OtherActivity.class));</div></pre></td></tr></table></figure>
<p>的方式进行页面跳转，而是以路径的形式进行跳转，去除了模块之间的引用，从而解决了模块之间的耦合问题。</p>
<p>其中路径形式一般是以下形式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">跳转Uri：scheme://host/path</div></pre></td></tr></table></figure>
<p>但是因为这样形式的路径都是在Androidmanifset.xml文件中进行定义的，根据业务的需要，不一定会完整定义跳转Uri，所以有以下两种情况。</p>
<h1 id="情况一：定义完整"><a href="#情况一：定义完整" class="headerlink" title="情况一：定义完整"></a>情况一：定义完整</h1><p>情况一：在清单文件中已经定义完整了data中的scheme、host和path后，一般不需要在Activity中接收处理，除非含有其他参数，例如<code>gougeli://page.sh/detail?userId=123456</code>。</p>
<p>Intent统一跳转协议分为以下几步：</p>
<p>（1）在Androidmanifest.xml文件中配置intent-filter，例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">    android:name=".module.detail.DetailActivity"</div><div class="line">    android:exported="true"</div><div class="line">    android:screenOrientation="portrait" &gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name="android.intent.action.VIEW"/&gt;</div><div class="line">        &lt;category android:name="android.intent.category.DEFAULT"/&gt;</div><div class="line">        &lt;category android:name="android.intent.category.BROWSABLE"/&gt;</div><div class="line">        &lt;data android:scheme="gougeili"</div><div class="line">            android:host="page.sh"</div><div class="line">            android:path="/detail"/&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure>
<p>（2）新建一个枚举类型的文件ActivityType，定义名称为Androidmanifest.xml文件中的intent-filter字段下的data字段下的<font color="red">android:path</font>的值，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  ActivityType &#123;</div><div class="line">    </div><div class="line">    DETAIL(<span class="string">"detail"</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String text;</div><div class="line">    </div><div class="line">    ActivityType(<span class="keyword">final</span> String text) &#123;</div><div class="line">        <span class="keyword">this</span>.text = text;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> text;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（3）编写SHIntent类，获取统一跳转所需的intent意图，通过之前设置的ActivityType实现路径的拼接，具体实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String SCHEME = <span class="string">"gougeili://"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">"page.sh/"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">getIntent</span><span class="params">(ActivityType activityType)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(getUrl(activityType.toString())));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> String <span class="title">getUrl</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder(SCHEME);</div><div class="line">    builder.append(HOST);</div><div class="line">    builder.append(type);</div><div class="line">    <span class="keyword">return</span> builder.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（4）到此我们就设置好了接收方，接下来就是设置发送方了。我们可以设置一个SHJump类，编写跳转到detail的方法，参数可填写bean类，用于数据的传递。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">goToDetail</span><span class="params">(Activity activity, SkuVo skuVo)</span> </span>&#123;</div><div class="line">    Intent intent = SHIntent.getIntent(ActivityType.DETAIL);</div><div class="line">    intent.putExtra(DetailConstants.EXTRA_ID, skuVo.outProductId);</div><div class="line">    intent.putExtra(DetailConstants.EXTRA_PRICE, skuVo.price);</div><div class="line">    intent.putExtra(DetailConstants.EXTRA_IMAGE, skuVo.skuPicture);</div><div class="line">    intent.putExtra(DetailConstants.EXTRA_TITLE, skuVo.name);</div><div class="line">    activity.startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然也可以是其他的参数类型，但是你也应该发现了，如果在SHJump类中写好了，也意味着写死了，如果需要灵活的实现数据的传递，可以通过SHIntent实现，其实是一样的，只不过不封装在SHJump类中了，因为SHJump类中存放的是通用方法。</p>
<h2 id="情况一：操作流程图"><a href="#情况一：操作流程图" class="headerlink" title="情况一：操作流程图"></a>情况一：操作流程图</h2><p><img src="../../../../../images/ShowJoy/Intent统一跳转协议-情况一.gif" alt="Intent统一跳转协议-情况一"></p>
<h1 id="情况二：未定义完整"><a href="#情况二：未定义完整" class="headerlink" title="情况二：未定义完整"></a>情况二：未定义完整</h1><p>情况二：在清单文件中未定义完整data中的参数，例如只定义了scheme，那么就需要在该Activity中进行接收处理，例如：<code>gglapp://2836482321</code>。</p>
<p>Intent统一跳转协议分为以下几步：</p>
<p>（1）在Androidmanifest.xml文件中配置intent-filter，例如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">    android:name=".module.splash.StartActivity"</div><div class="line">    android:exported="true"</div><div class="line">    android:theme="@style/Theme.Activity.Start"</div><div class="line">    android:screenOrientation="portrait" &gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name="android.intent.action.MAIN" /&gt;</div><div class="line"></div><div class="line">        &lt;category android:name="android.intent.category.LAUNCHER" /&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">     &lt;intent-filter&gt;  </div><div class="line">        &lt;action android:name="android.intent.action.VIEW"/&gt;     </div><div class="line">        &lt;category android:name="android.intent.category.DEFAULT"/&gt;               </div><div class="line">        &lt;category android:name="android.intent.category.BROWSABLE"/&gt;  </div><div class="line">        &lt;data android:scheme="gglapp"/&gt;</div><div class="line">    &lt;/intent-filter&gt;   </div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure>
<p>（2）此处并未使用统一跳转协议，所以以详细情况为例：</p>
<p><font color="red">问：</font>将购给利中的商品分享到微信后，用浏览器打开该链接，再点击其中的某个商品，只是跳转到客户端的首页，不能够跳转到购给利的商品详情页？</p>
<p><font color="blue">答：</font>使用intent接收并传递数据时，使用的intent对象出现错误，导致uri为空。</p>
<p><font color="purple">代码解析：</font>因为从外部浏览器跳转到内部Activity，必然有一个Uri地址，再由上述清单文件中只是定义了scheme，最后根据问题得知最终目的是跳转到商品详情页，所以StartActivity必然有通过getIntent方法接收Uri地址的代码，通过搜索getIntent发现如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">skip</span><span class="params">()</span> </span>&#123;</div><div class="line">    Intent intent = getIntent();</div><div class="line">    Uri uri = intent.getData();</div><div class="line"></div><div class="line">    Intent mainIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class);</div><div class="line">    Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line"></div><div class="line">    mainIntent.putExtra(AppConstants.EXTRA_URI, uri);</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    startActivity(mainIntent);</div><div class="line">    finish();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码表示从浏览器接收到了<code>Uri地址</code>之后，并将其传递到了MainActivity这个类中。</p>
<p>（3）然后我们可以在MainActivity中查找相关代码，这样比较复杂，我们可以将光标移动到EXTRA_URI处，然后按option+F7，即可迅速定位到相关代码位置，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);	</div><div class="line">	...</div><div class="line"></div><div class="line">	Uri uri = getIntent().getParcelableExtra(AppConstants.EXTRA_URI);</div><div class="line">	UriHandler.handle(<span class="keyword">this</span>, uri);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>于是我们发现它将Uri交给了UriHandler进行处理，再到UriHandler类中进行查看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">handle</span><span class="params">(Activity activity, Uri uri)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == uri) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LogUtils.d(<span class="string">"uri:"</span>, uri.toString());</div><div class="line"></div><div class="line">    String host = uri.getHost();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(host)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (host.equals(<span class="string">"gglappFulishe"</span>)) &#123;</div><div class="line">        activity.startActivity(<span class="keyword">new</span> Intent(activity, AddressActivity.class));</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Set&lt;String&gt; params = uri.getQueryParameterNames();</div><div class="line">        Intent intent = SHIntent.getIntent(ActivityType.DETAIL);</div><div class="line">        intent.putExtra(DetailConstants.EXTRA_ID, host);</div><div class="line">        <span class="keyword">for</span> (String param : params) &#123;</div><div class="line">            intent.putExtra(param, uri.getQueryParameter(param));</div><div class="line">        &#125;</div><div class="line">        activity.startActivity(intent);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终发现了处理Uri的详细操作，原来它是通过匹配host来进行区分处理的。</p>
<h2 id="情况二：操作流程图"><a href="#情况二：操作流程图" class="headerlink" title="情况二：操作流程图"></a>情况二：操作流程图</h2><p><img src="../../../../../images/ShowJoy/Intent统一跳转协议-情况二.gif" alt="Intent统一跳转协议-情况二"></p>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>另外还需要注意的是，我们定义这样形式的路径只是定义了接收方而已，而发送方是谁都可以进行发送的。</p>
<hr>
<p><strong>版权声明</strong></p>
<p>本网站如未注明，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名(BY)-非商业性使用(NC)-相同方式共享(SA)4.0国际协议</a>授权。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/Intent统一跳转协议/">https://fengqingxiuyi.github.io/2016/07/23/ShowJoy/Intent统一跳转协议/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jenkins项目构建过程详解]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/19/ShowJoy/Jenkins%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="首页网址："><a href="#首页网址：" class="headerlink" title="首页网址："></a>首页网址：</h1><p>网站首页地址如下所示：<a href="http://192.168.0.62:8080/" target="_blank" rel="external">http://192.168.0.62:8080/</a></p>
<h1 id="构建项目过程："><a href="#构建项目过程：" class="headerlink" title="构建项目过程："></a>构建项目过程：</h1><ol>
<li>在网页右侧选择需要进行项目构建的项目选项，如<code>尚妆</code>、<code>购给利</code>等，网址如：<a href="http://192.168.0.62:8080/view/购给利/" target="_blank" rel="external">http://192.168.0.62:8080/view/购给利/</a></li>
<li>点击网页左侧第一栏：新建，进行构建项目所需要的配置信息，如：<br>Enter an item name：gougeli-1.5.3<br>类别：构建一个自由风格的软件项目<br>Copy from：输入字符就会自动列出可能需要的结果，如：gougeili-1.5.2</li>
<li><p>输入完毕后点击OK会进入详细的配置信息页面，网址如：<a href="http://192.168.0.62:8080/view/购给利/job/gougeili-1.5.3/configure" target="_blank" rel="external">http://192.168.0.62:8080/view/购给利/job/gougeili-1.5.3/configure</a><br>一般需要修改的地方如下：描述、Branches to build -&gt; Branch Specifier (blank for ‘any’)中的分支名、Execute shell -&gt; Command中的分支名，其他的地方慎重处理，最后点击Apply或者保存按钮进行保存。</p>
<p> <font color="red"><strong><em>注意：</em></strong></font>点击Apply不会关闭本页面，点击保存会关闭页面，并跳转到：<a href="http://192.168.0.62:8080/view/购给利/job/gougeili-1.5.3/" target="_blank" rel="external">http://192.168.0.62:8080/view/购给利/job/gougeili-1.5.3/</a>。</p>
</li>
<li>然后点击左侧<code>立即构建</code>按钮，就会开始构建，构建完成或失败后可以在左侧最下面的<code>构建历史</code>中详细查看相对应的信息。</li>
<li>具体操作流程请查看“项目构建GIF操作流程图”</li>
</ol>
<h1 id="操作流程图"><a href="#操作流程图" class="headerlink" title="操作流程图"></a>操作流程图</h1><p><img src="../../../../../images/ShowJoy/Jenkins项目构建.gif" alt="Jenkins项目构建过程详解"></p>
<hr>
<p><strong>版权声明</strong></p>
<p>本网站如未注明，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名(BY)-非商业性使用(NC)-相同方式共享(SA)4.0国际协议</a>授权。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/19/ShowJoy/Jenkins项目构建过程详解/">https://fengqingxiuyi.github.io/2016/07/19/ShowJoy/Jenkins项目构建过程详解/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac+GitHub+Hexo+NexT（五）偏好设置+Markdown]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/18/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT%EF%BC%88%E4%BA%94%EF%BC%89%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE+Markdown/</url>
      <content type="html"><![CDATA[<p>上文主要讲述了NexT的偏好设置，接下来就让我们开始Hexo的偏好设置吧。</p>
<p>首先进行相关重要说明，请仔细阅读：</p>
<ol>
<li>本人是在Mac搭建博客的，所以不会包含和Windows相关的内容，操作系统参数如下：<code>MacBook Pro OS X EI Capitan 10.11.5</code>。</li>
<li>因为搭建博客的过程中会经常输命令，所以：<ol>
<li>如果文中代码区块是以<code>$</code>开头的话，代表的是终端默认目录，如：<code>QingFengdeMacBook-Pro:~ qingfeng$</code>。</li>
<li>如果文中代码区块是以<code>Blog $</code>开头的话，代表的是<font color="blue">站点根目录</font>，如：<code>QingFengdeMacBook-Pro:Blog qingfeng$</code>。</li>
<li>如果文中代码区块是以<code>next $</code>开头的话，代表的是<font color="purple">主题根目录</font>，如：<code>QingFengdeMacBook-Pro:next qingfeng$</code>。</li>
</ol>
</li>
<li>所有输出类文字或者是提示性文字或者是重点文字都会有自带背景色。</li>
<li>需要掌握vim的基本知识和用法。</li>
</ol>
<h1 id="网站基本设置"><a href="#网站基本设置" class="headerlink" title="网站基本设置"></a>网站基本设置</h1><p>网站基本设置主要包括：标题、个性签名、用户名、语言和头像，即以下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Site</div><div class="line">title:	# 网站标题</div><div class="line">subtitle:	# 网站副标题</div><div class="line">description:	# 个人描述即个性签名</div><div class="line">author:	# 用户名</div><div class="line">language: # 网站语言，如：zh-Hans即为简体中文</div><div class="line">timezone:	# 网站时区</div><div class="line"># 头像</div><div class="line">avatar: /images/avatar.png</div></pre></td></tr></table></figure>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p>搜索功能对于每个网站都是很重要的，它可以帮助我们快速查找需要查找的内容，本网站也不例外，官网所推荐的搜索服务是<code>Swiftype</code>，但是效果不是太好，所以我们使用<code>本地搜索</code>功能。</p>
<p>首先我们需要安装search插件，在<font color="blue">站点根目录</font>下执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
<p>然后我们打开<font color="blue">站配置文件</font>，在其中新增search字段，具体填写内容如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div></pre></td></tr></table></figure>
<p>最后我们需要修改网站的<code>url</code>，具体修改内容如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class="line">url: https://fengqingxiuyi.github.io/</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div></pre></td></tr></table></figure>
<p>其实就是把其中<code>url</code>对应的默认值修改为你的网站域名。</p>
<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><p>Hexo博客是基于Markdown来进行编写的，由于相关的编辑器也有很多，所以这里就不做太多阐述了，大家有兴趣可以去<a href="https://linux.cn/article-2994-1.html" target="_blank" rel="external">这里</a>看看。</p>
<p>Mac下主要是用<a href="http://25.io/mou/" target="_blank" rel="external">Mou</a>编辑器进行编写的。界面效果如下所示：</p>
<p><img src="../../../../../images/Mac-GitHub-Hexo-NexT/Mou.png" alt="Mou"></p>
<p>并附上教程地址：<a href="https://wizardforcel.gitbooks.io/markdown-simple-world/content/hexo-tutor-1.html" target="_blank" rel="external">Markdown简单的世界</a></p>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>最后推荐几篇个人认为<code>Hexo博客搭建</code>写的比较好的文章（包括官方教程）：</p>
<ol>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo中文官方教程</a></li>
<li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT开始使用教程</a>，注意：右上角还有其他方面的教程</li>
<li><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">不蒜子-搞定你的网站计数</a></li>
<li><a href="https://wizardforcel.gitbooks.io/markdown-simple-world/content/hexo-tutor-1.html" target="_blank" rel="external">Markdown简单的世界</a></li>
<li><a href="http://blog.csdn.net/u014595668/article/details/51854259" target="_blank" rel="external">在github上搭建blog(基于Node.js的Hexo+next)</a></li>
<li><a href="http://www.jianshu.com/p/f66103553c45" target="_blank" rel="external">使用Hexo + Next搭建静态博客</a></li>
<li><a href="http://www.tuicool.com/articles/aQriym3" target="_blank" rel="external">Hexo+Next搭建Github个人静态博客</a></li>
<li><a href="http://zhiho.github.io/2015/09/21/start-hexo/" target="_blank" rel="external">Hexo搭建GitHub博客（一）- 环境搭建</a>，注意：还有第二、三部分哦！</li>
<li><a href="http://ezlippi.com/blog/2016/02/jekyll-to-hexo.html" target="_blank" rel="external">Jekyll迁移到Hexo搭建个人博客</a></li>
</ol>
<hr>
<p><strong>版权声明</strong></p>
<p>本网站如未注明，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名(BY)-非商业性使用(NC)-相同方式共享(SA)4.0国际协议</a>授权。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/18/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT（五）偏好设置+Markdown/">https://fengqingxiuyi.github.io/2016/07/18/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT（五）偏好设置+Markdown/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac+GitHub+Hexo+NexT（四）NexT]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/18/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT%EF%BC%88%E5%9B%9B%EF%BC%89NexT/</url>
      <content type="html"><![CDATA[<p>博客框架我们已经全部搭建完成了，但是大部分人都不喜欢默认的landscape主题，因此，在本文中我就讲解一下很热门的NexT主题。</p>
<p>首先进行相关重要说明，请仔细阅读：</p>
<ol>
<li>本人是在Mac搭建博客的，所以不会包含和Windows相关的内容，操作系统参数如下：<code>MacBook Pro OS X EI Capitan 10.11.5</code>。</li>
<li>因为搭建博客的过程中会经常输命令，所以：<ol>
<li>如果文中代码区块是以<code>$</code>开头的话，代表的是终端默认目录，如：<code>QingFengdeMacBook-Pro:~ qingfeng$</code>。</li>
<li>如果文中代码区块是以<code>Blog $</code>开头的话，代表的是<font color="blue">站点根目录</font>，如：<code>QingFengdeMacBook-Pro:Blog qingfeng$</code>。</li>
<li>如果文中代码区块是以<code>next $</code>开头的话，代表的是<font color="purple">主题根目录</font>，如：<code>QingFengdeMacBook-Pro:next qingfeng$</code>。</li>
</ol>
</li>
<li>所有输出类文字或者是提示性文字或者是重点文字都会有自带背景色。</li>
<li>需要掌握vim的基本知识和用法。</li>
</ol>
<p>关于NexT主题的下载安装与使用，在<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">官方文档</a>中已经描述的十分详细了，所以这里我就讲一些个人认为比较重要的部分。</p>
<h1 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Put your favicon.ico into `hexo-site/source/` directory.</div><div class="line">favicon: /images/favicon.ico</div></pre></td></tr></table></figure>
<p>显而易见，favicon的起始目录就是source下，所以对我而言：favicon的完整目录就是<code>/Blog/source/images/favicon.ico</code>。</p>
<h1 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Set rss to false to disable feed link.</div><div class="line"># Leave rss as empty to use site&apos;s feed link.</div><div class="line"># Set rss to specific value if you have burned your feed already.</div><div class="line">rss:</div></pre></td></tr></table></figure>
<p>有需要的可以设置一下，这里我就简要阐述一下：</p>
<ol>
<li><p>在<font color="blue">站点根目录</font>下，新建一个字段<code>plugins</code>，然后进行如下配置：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plugins:</div><div class="line">- hexo-generator-feed # 插件名</div></pre></td></tr></table></figure>
</li>
<li><p>然后再配置显示你站点的RSS，文件路径<code>\atom.xml</code>，即：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Set rss to false to disable feed link.</div><div class="line"># Leave rss as empty to use site&apos;s feed link.</div><div class="line"># Set rss to specific value if you have burned your 	feed already.</div><div class="line">rss: \atom.xml</div></pre></td></tr></table></figure>
</li>
<li><p>最后你可以使用RSS作为迁移工具，用如下命令读取其他位置的RSS：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo migrate rss &lt;source&gt; # source是本地或网络文件路径</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="网站创建日期"><a href="#网站创建日期" class="headerlink" title="网站创建日期"></a>网站创建日期</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Specify the date when the site was setup</div><div class="line">since: 2016</div></pre></td></tr></table></figure>
<p>一般显示在网页最底部</p>
<h1 id="菜单栏设置"><a href="#菜单栏设置" class="headerlink" title="菜单栏设置"></a>菜单栏设置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)</div><div class="line">menu:</div><div class="line">  home: /			# 主页</div><div class="line">  categories: /categories	# 分类页（需手动创建）</div><div class="line">  #about: /about		# 关于页面（需手动创建）</div><div class="line">  archives: /archives		# 归档页</div><div class="line">  tags: /tags			# 标签页（需手动创建）</div><div class="line">  #commonweal: /404.html	# 404页面（需手动创建）</div></pre></td></tr></table></figure>
<p>在这里我们直接将<code>categories</code>和<code>tags</code>前面的<code>#</code>去掉，如果你想在首页显示<code>关于页面</code>和<code>404页面</code>的话，同样也可以将前面的<code>#</code>去掉。但是这样还不能让去掉<code>#</code>的页面正常显示，需要我们进行一些操作，请这里只介绍<code>分类页</code>和<code>标签页</code>修改。</p>
<h2 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h2><p>我们回到<font color="blue">站点根目录</font>下，然后输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo new page &quot;categories&quot;</div></pre></td></tr></table></figure>
<p>会在source目录下新建一个<code>categories</code>文件夹，里面包含一个<code>index.md</code>文件，然后用文本编辑器打开该文件，并将其头文件修改成一下格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: categories</div><div class="line">date: 2016-07-14 18:35:46</div><div class="line">type: &quot;categories&quot;</div><div class="line">---</div></pre></td></tr></table></figure>
<h2 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h2><p>修改完<code>分类页</code>后，继续输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo new page &quot;tags&quot;</div></pre></td></tr></table></figure>
<p>会在source目录下新建一个<code>tags</code>文件夹，里面包含一个<code>index.md</code>文件，同样的用文本编辑器打开该文件，并将其头文件修改成一下格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: tags</div><div class="line">date: 2016-07-14 18:31:07</div><div class="line">type: &quot;tags&quot;</div><div class="line">---</div></pre></td></tr></table></figure>
<h1 id="主题样式"><a href="#主题样式" class="headerlink" title="主题样式"></a>主题样式</h1><p>NexT主题一共有一下三种样式，分别有不同的显示效果，具体功能显示如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------------------------------------</div><div class="line"># Scheme Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Schemes</div><div class="line">#scheme: Muse	# 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</div><div class="line">scheme: Mist	# Muse 的紧凑版本，整洁有序的单栏外观</div><div class="line">#scheme: Pisces	# 双栏 Scheme，小家碧玉似的清新</div></pre></td></tr></table></figure>
<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p>字体的设置就看个人兴趣了，以下是我的字体设置，有兴趣的可以看一下，默认配置与我的配置只有一个不同点：它们很多都没有设置<code>family</code>的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------------------------------------</div><div class="line"># Font Settings</div><div class="line"># - Find fonts on Google Fonts (https://www.google.com/fonts)</div><div class="line"># - All fonts set here will have the following styles:</div><div class="line">#     light, light italic, normal, normal intalic, bold, bold italic</div><div class="line"># - Be aware that setting too much fonts will cause site running slowly</div><div class="line"># - Introduce in 5.0.1</div><div class="line"># ---------------------------------------------------------------</div><div class="line">font:</div><div class="line">  enable: true</div><div class="line">  </div><div class="line">  # Uri of fonts host. E.g. //fonts.googleapis.com (Default)</div><div class="line">  host:</div><div class="line"></div><div class="line">  # Global font settings used on &lt;body&gt; element.</div><div class="line">  global:</div><div class="line">    # external: true will load this font family from host.</div><div class="line">    external: true</div><div class="line">    family: Monda</div><div class="line"></div><div class="line">  # Font settings for Headlines (h1, h2, h3, h4, h5, h6)</div><div class="line">  # Fallback to `global` font settings.</div><div class="line">  headings:</div><div class="line">    external: true</div><div class="line">    family: Roboto Slab</div><div class="line"></div><div class="line">  # Font settings for posts</div><div class="line">  # Fallback to `global` font settings.</div><div class="line">  posts:</div><div class="line">    external: true</div><div class="line">    family:</div><div class="line"></div><div class="line">  # Font settings for Logo</div><div class="line">  # Fallback to `global` font settings.</div><div class="line">  # The `size` option use `px` as unit</div><div class="line">  logo:</div><div class="line">    external: true</div><div class="line">    family: Lobster Two</div><div class="line">    size: 24</div><div class="line">    </div><div class="line">  # Font settings for &lt;code&gt; and code blocks.</div><div class="line">  codes:</div><div class="line">    external: true</div><div class="line">    family: PT Monos</div></pre></td></tr></table></figure>
<h1 id="Social-Links"><a href="#Social-Links" class="headerlink" title="Social Links"></a>Social Links</h1><p>这里没有写中文标题的原因是：直接翻译过来总感觉不合适，在我看来，这边一般都是存放和自己有直接关联的地址，如：自己的博客地址，微博地址等，像我的就是这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Social Links</div><div class="line"># Key is the link label showing to end users.</div><div class="line"># Value is the target link (E.g. GitHub: https://github.com/iissnan)</div><div class="line">social:</div><div class="line">  #LinkLabel: Link</div><div class="line">  GitHub: https://github.com/fengqingxiuyi</div><div class="line">  CSDN: http://blog.csdn.net/u012505400</div><div class="line">  新浪微博: http://weibo.com/sd323</div><div class="line">  # 等等</div></pre></td></tr></table></figure>
<h1 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h1><p>不多说了，直接上我的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Blogrolls</div><div class="line">links_title: 友情链接</div><div class="line">#links_layout: block</div><div class="line">#links_layout: inline</div><div class="line">links:</div><div class="line">  #Title: http://example.com/</div><div class="line">  Cribug: http://notes.cribug.com/</div><div class="line">  郭朝的博客: http://blog.csdn.net/smartbetter/</div><div class="line">  郭霖的专栏: http://blog.csdn.net/guolin_blog/</div></pre></td></tr></table></figure>
<h1 id="代码高亮主题"><a href="#代码高亮主题" class="headerlink" title="代码高亮主题"></a>代码高亮主题</h1><p>顾名思义，适用于将代码块区域高亮显示的，当然不同语言的代码块区域高亮规则是不一样的，它的默认主题是<code>normal</code>，一般有以下几个主题，我这边选择了<code>night bright</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Code Highlight theme</div><div class="line"># Available value:</div><div class="line">#    normal | night | night eighties | night blue | night bright</div><div class="line"># https://github.com/chriskempson/tomorrow-theme</div><div class="line">highlight_theme: night bright</div></pre></td></tr></table></figure>
<h1 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h1><p>关于<a href="http://duoshuo.com/" target="_blank" rel="external">多说评论</a>和<a href="https://leancloud.cn/" target="_blank" rel="external">LeanCloud</a>，这里就不做过多阐述了，大家看官方文档就可以了，点击超链接即可进入他们各自的官方网站。</p>
<p>这里我们主要讲述以下另外一种<font color="red">站点访问计数</font>方法，即<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">不蒜子</a>，在这里我要对博主<code>zhiho</code>表示感谢，<a href="http://zhiho.github.io/2015/09/29/hexo-next/" target="_blank" rel="external">文中第6章</a>对于此<font color="red">站点访问计数</font>方法写的十分详细，虽然看起来有点小复杂，但是只要细心就不会出现奇葩问题的，所以我也就不做阐述了。</p>
<p>如果你有兴趣的话，你也可以看看<a href="http://zhiho.github.io/2015/09/29/hexo-next/" target="_blank" rel="external">这篇文章</a>中对于<code>sitemap</code>插件，也是有很大帮助的。</p>
<h1 id="网站背景"><a href="#网站背景" class="headerlink" title="网站背景"></a>网站背景</h1><p>如果你想要给自己的网站加一个背景图片也很简单，你只需要一下两步就行了：</p>
<ol>
<li><p>首先将背景图片存放到该目录下：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ cd themes/next/source/images/</div></pre></td></tr></table></figure>
</li>
<li><p>接着打开你的scheme所在的目录，比如我的scheme是Mist，然后编辑index.styl文件，即以下两条命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Blog $ cd themes/next/source/css/_schemes/Mist(Pisces和Muse也行)/</div><div class="line">Blog $ vim index.styl</div></pre></td></tr></table></figure>
</li>
</ol>
<p>打开index.styl文件之后，在<code>Components</code>上面新增设置背景图片的代码，具体内容如下所示：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">@import &quot;sidebar/sidebar-blogroll&quot;;</div><div class="line"></div><div class="line">body &#123; background:url(/images/back.png);&#125;</div><div class="line"></div><div class="line">// Components</div><div class="line">...</div></pre></td></tr></table></figure>
</code></pre><ol>
<li>最后重新部署就可以了！</li>
</ol>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>至此，我们已经讲解完了NexT主题的使用，如果你有其他个性化设置，欢迎留言；相信在前面讲解Hexo的时候，大家早就迫不及待的修改了一些Hexo中的个性化配置了吧，接下来我们来详细的配置一下。</p>
<hr>
<p><strong>版权声明</strong></p>
<p>本网站如未注明，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名(BY)-非商业性使用(NC)-相同方式共享(SA)4.0国际协议</a>授权。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/18/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT（四）NexT/">https://fengqingxiuyi.github.io/2016/07/18/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT（四）NexT/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac+GitHub+Hexo+NexT（三）Hexo]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/17/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT%EF%BC%88%E4%B8%89%EF%BC%89Hexo/</url>
      <content type="html"><![CDATA[<p>上文我们学会了如何安装Git和Node.js，接下来我们就需要开始真正的搭建Hexo博客框架了</p>
<p>首先进行相关重要说明，请仔细阅读：</p>
<ol>
<li>本人是在Mac搭建博客的，所以不会包含和Windows相关的内容，操作系统参数如下：<code>MacBook Pro OS X EI Capitan 10.11.5</code>。</li>
<li>因为搭建博客的过程中会经常输命令，所以：<ol>
<li>如果文中代码区块是以<code>$</code>开头的话，代表的是终端默认目录，如：<code>QingFengdeMacBook-Pro:~ qingfeng$</code>。</li>
</ol>
</li>
<li>所有输出类文字或者是提示性文字或者是重点文字都会有自带背景色。</li>
<li>需要掌握vim的基本知识和用法。</li>
</ol>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><h2 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h2><p>安装Hexo需要使用npm插件，由于我使用的Mac电脑，所以一般都是自带npm 的，如果你没有的话，请自行下载安装，此处不做阐述。</p>
<h2 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>打开终端后，直接输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>如果出现权限不足之类的错误，可以使用sudo提升权限，则新命令如下： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install hexo-cli -g</div></pre></td></tr></table></figure>
<h3 id="校检安装"><a href="#校检安装" class="headerlink" title="校检安装"></a>校检安装</h3><p>Hexo安装完成之后，也需要判断是否安装成功，继续输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo -v</div></pre></td></tr></table></figure>
<p>会出现一系列信息，如果每一行都显示正确的版本号信息，则表明安装正确，如下图所示：</p>
<p><img src="../../../../../images/Mac-GitHub-Hexo-NexT/查看hexo版本.png" alt="查看hexo版本"></p>
<h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><p>首先选择一个目录用于存放和博客相关的文件，如果没有中意的目录，可以创建，比如我创建的名为<code>Blog</code>的文件夹，然后进入该目录下，输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo init</div></pre></td></tr></table></figure>
<p>用于初始化Hexo。全部完成以后会出现一些文件或文件夹，目录结构如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">根目录</div><div class="line"> |----_config.yml	# 全局配置文件</div><div class="line"> |----node_modules	# 插件安装位置</div><div class="line"> |----package.json	# Hexo框架参数</div><div class="line"> |----scaffolds		# 包含新建文章的文件头模板</div><div class="line"> |----scripts		# 脚本目录，JavaScript文件会自动执行</div><div class="line"> |----source		# 保存新建的文章及相关资源</div><div class="line">   |----_drafts		# 保存临时文件</div><div class="line">   |----_posts		# 保存新建的文章，md文件会被编译成html文件</div><div class="line"> |----themes		# 网站主题</div></pre></td></tr></table></figure>
<h2 id="预览博客"><a href="#预览博客" class="headerlink" title="预览博客"></a>预览博客</h2><p>继续输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo server</div></pre></td></tr></table></figure>
<p>当出现<code>Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code>这样的提示消息时，我们就可以在浏览器中打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>，用于访问自己的博客了。按Ctrl+C即可停止server服务。</p>
<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>预览好博客之后，我们来写一篇文章吧！那么，怎么写呢？很简单，我们按Ctrl+C停止了Hexo的server服务后，接着输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo new &quot;Hello World&quot;</div></pre></td></tr></table></figure>
<p>于是我们就创建了一篇名为Hello World的文章，并且终端也会告诉我们它的存储位置，如：<code>INFO  Created: /Volumes/MAIN/qingfeng/Blog/source/_posts/Hello-World.md</code>。</p>
<p>然后我们用文本编辑器打开该文件之后，会发现其中包含着这样一个文件头信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hello World	# 文章标题即文件名</div><div class="line">date: 2016-07-17 11:36:39	# 日期</div><div class="line">tags:	# 标签，值为[value1, value2, ...]的格式</div><div class="line">---</div><div class="line"># 正文，需要用MarkDown语言编写</div></pre></td></tr></table></figure>
<h2 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h2><p>继续输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo generate</div></pre></td></tr></table></figure>
<p>即可生成静态网页。</p>
<h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><h3 id="安装自动部署插件"><a href="#安装自动部署插件" class="headerlink" title="安装自动部署插件"></a>安装自动部署插件</h3><p>部署到GitHub即意味着将本地文件上传到GitHub网站中，所以显然是需要工具来实现的。在这里就介绍一下自动部署到GitHub上的插件，我们只需要输入一下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>即可实现下载安装，有些博客中该命令是没有最后的<code>--save</code>这一部分的，我这里这样写主要是为了防止出现一些不必要的错误。</p>
<h3 id="编辑全局配置文件"><a href="#编辑全局配置文件" class="headerlink" title="编辑全局配置文件"></a>编辑全局配置文件</h3><h4 id="打开全局配置文件"><a href="#打开全局配置文件" class="headerlink" title="打开全局配置文件"></a>打开全局配置文件</h4><p>下载安装成功之后，我们需要修改一下全局配置文件，输入一下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ vim _config.yml</div></pre></td></tr></table></figure>
<p>即可编辑该文件，目前我们将</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type:</div></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git # 因为Hexo版本大于3.0，所以填git；否则填github</div><div class="line">  repository: # 你的仓库地址</div><div class="line">  branch: # 你工程的分支名</div></pre></td></tr></table></figure>
<p>例如下图所示：</p>
<p><img src="../../../../../images/Mac-GitHub-Hexo-NexT/设置仓库地址.png" alt="设置仓库地址"></p>
<h4 id="查看仓库地址"><a href="#查看仓库地址" class="headerlink" title="查看仓库地址"></a>查看仓库地址</h4><p>进入你的GitHub官网即可查看，如<a href="https://github.com/fengqingxiuyi/fengqingxiuyi.github.io" target="_blank" rel="external">我的GitHub地址</a>，打开后，点击页面右边中部的绿色按钮，名称为<code>Clone or download</code>，即可复制仓库地址，HTTPS和SSH两者皆可。</p>
<p>如果仓库地址填写为SSH地址，则必须要先配置好SSH key，可以在<a href="https://fengqingxiuyi.github.io/2016/07/17/Mac-GitHub-Hexo-NexT-——-GitHub/">Mac+GitHub+Hexo+NexT —— GitHub</a>一文中学习如何配置。</p>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a><font color="red">注意点</font></h4><ol>
<li>type、repository、branch必须并列对齐，切前面只能有两个空格符。<br></li>
<li>每个冒号后面都必须要有一个空格符（链接地址中的冒号除外）。</li>
</ol>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog $ hexo deploy</div></pre></td></tr></table></figure>
<p>即可进行部署操作，如果输出内容为<code>ERROR Deployer not found: git</code>，则表明你的全局配置文件填写错误，或者是之前安装自动化部署插件时，所用的命令后面没有添加<code>-- save</code>，或者是其他原因，需要仔细排查。</p>
<h3 id="浏览查看"><a href="#浏览查看" class="headerlink" title="浏览查看"></a>浏览查看</h3><p>如果成功部署到了GitHub之上，我们就可以在浏览器中查看我们自己的博客了，在浏览器中输入你的GitHub仓库名即可查看，如：<a href="https://fengqingxiuyi.github.io/">https://fengqingxiuyi.github.io/</a>，如果显示正确，并且与你在本地预览时的别效果一模一样，则表明部署成功！</p>
<h1 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a>命令简写</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo n == hexo new</div><div class="line">hexo g == hexo generate</div><div class="line">hexo s == hexo server</div><div class="line">hexo d == hexo deploy</div></pre></td></tr></table></figure>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>至此，我们已经学会了博客的搭建与使用，接下来我们将要讲解如何使用NexT主题，美化我们的博客，当然你也可以使用其他主题美化，<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">这里列举了一些好看的Hexo主题</a>。</p>
<hr>
<p><strong>版权声明</strong></p>
<p>本网站如未注明，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名(BY)-非商业性使用(NC)-相同方式共享(SA)4.0国际协议</a>授权。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/17/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT（三）Hexo/">https://fengqingxiuyi.github.io/2016/07/17/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT（三）Hexo/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac+GitHub+Hexo+NexT（二）Git+Node.js]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/17/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT%EF%BC%88%E4%BA%8C%EF%BC%89Git+Node.js/</url>
      <content type="html"><![CDATA[<p>上文我们主要讲了如何创建GitHub账号和配置SSH，接下我们就来学习一下怎么安装Git和Node.js吧！</p>
<p>首先还是进行相关重要说明，请仔细阅读：</p>
<ol>
<li>本人是在Mac搭建博客的，所以不会包含和Windows相关的内容，操作系统参数如下：<code>MacBook Pro OS X EI Capitan 10.11.5</code>。</li>
<li>因为搭建博客的过程中会经常输命令，所以：<ol>
<li>如果文中代码区块是以<code>$</code>开头的话，代表的是终端默认目录，如：<code>QingFengdeMacBook-Pro:~ qingfeng$</code>。</li>
</ol>
</li>
<li>所有输出类文字或者是提示性文字或者是重点文字都会有自带背景色。</li>
</ol>
<p>接下来开始正文阐述：</p>
<h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h2><p>我们每安装一个软件都应该了解它是什么，能干什么。这里简要阐述一下：</p>
<ol>
<li>Git是目前世界上最先进的分布式版本控制系统（没有之一）。</li>
<li>Git有什么特点？简单来说就是：高端大气上档次！</li>
<li>附上廖雪峰的Git经典入门教程：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git入门教程</a></li>
</ol>
<h2 id="安装途径与过程"><a href="#安装途径与过程" class="headerlink" title="安装途径与过程"></a>安装途径与过程</h2><p>安装Git的方式有很多种，我们即可以从<a href="http://git-scm.com/downloads" target="_blank" rel="external">官网</a>下载，也可以使用其他方式安装，这里我们使用<a href="https://github.com/Homebrew" target="_blank" rel="external">Homebrew</a>来进行安装。</p>
<h3 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h3><p>安装Homebrew十分简单，我们只需要在打开终端之后，直接输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”</div></pre></td></tr></table></figure>
<p>然后等待它下载安装即可。</p>
<h3 id="安装Git-1"><a href="#安装Git-1" class="headerlink" title="安装Git"></a>安装Git</h3><p>Homebrew安装完成之后，继续输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install git</div></pre></td></tr></table></figure>
<p>就会自动下载最新的Git进行安装。</p>
<h3 id="安装校检"><a href="#安装校检" class="headerlink" title="安装校检"></a>安装校检</h3><p>安装完成之后，如何知道Git是否安装成功了呢？很简单，我们继续输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git --verison</div></pre></td></tr></table></figure>
<p>如果正确输出版本号信息，则表明Git安装正确，反之则表明安装失败，如果操作无误的话，请尝试其他途径。</p>
<h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>进入Node.js的<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a>，然后下载需要的版本就可以了，如<a href="https://nodejs.org/dist/v4.4.7/node-v4.4.7.pkg" target="_blank" rel="external">官方推荐版本</a>。下载完成之后，双击安装包一步一步进行傻瓜式安装即可。</p>
<h2 id="安装校检-1"><a href="#安装校检-1" class="headerlink" title="安装校检"></a>安装校检</h2><p>跟安装Git一样，我们也需要判断Node.js是否安装正确，同样十分简单，在终端输入命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node -v</div></pre></td></tr></table></figure>
<p>如果正确输出版本号信息，则表明Node.js安装正确。</p>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>至此，想必大家已经学会怎么安装Git和Node.js了吧，接下来让我们开始Hexo的正式征途吧。</p>
<hr>
<p><strong>版权声明</strong></p>
<p>本网站如未注明，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名(BY)-非商业性使用(NC)-相同方式共享(SA)4.0国际协议</a>授权。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/17/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT（二）Git+Node.js/">https://fengqingxiuyi.github.io/2016/07/17/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT（二）Git+Node.js/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac+GitHub+Hexo+NexT（一）GitHub]]></title>
      <url>https://fengqingxiuyi.github.io/2016/07/17/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT%EF%BC%88%E4%B8%80%EF%BC%89GitHub/</url>
      <content type="html"><![CDATA[<p>无意中发现了一篇博客，感觉好高大上的样纸，然后发现大家都在用这个搭建博客，我也算是out了，于是自己搭着也玩了玩。网上的搭建教程各式各样，不一定有适合自己的，或多或少都需要改动，下面就讲解一下我的博客搭建之旅。</p>
<p>首先进行相关重要说明，请仔细阅读：</p>
<ol>
<li>本人是在Mac搭建博客的，所以不会包含和Windows相关的内容，操作系统参数如下：<code>MacBook Pro OS X EI Capitan 10.11.5</code>。</li>
<li>因为搭建博客的过程中会经常输命令，所以：<ol>
<li>如果文中代码区块是以<code>$</code>开头的话，代表的是终端默认目录，如：<code>QingFengdeMacBook-Pro:~ qingfeng$</code>。</li>
</ol>
</li>
<li>所有输出类文字或者是提示性文字或者是重点文字都会有自带背景色。</li>
</ol>
<p>由于内容比较多，在这里我就分章节进行讲解，本文将要讲解的是GitHub的创建和SSH的配置。</p>
<h1 id="GitHub的创建"><a href="#GitHub的创建" class="headerlink" title="GitHub的创建"></a>GitHub的创建</h1><h2 id="创建GitHub账号"><a href="#创建GitHub账号" class="headerlink" title="创建GitHub账号"></a>创建GitHub账号</h2><h3 id="Step1-Set-up-a-personal-account"><a href="#Step1-Set-up-a-personal-account" class="headerlink" title="Step1 Set up a personal account"></a>Step1 Set up a personal account</h3><p>首先在浏览器中输入网址：<a href="https://github.com/join?source=header-home" target="_blank" rel="external">https://github.com/join?source=header-home</a>，然后填写用户名、邮箱、密码，<code>注意：该邮箱地址在之后的SSH配置中有重要作用</code>，最后点击<code>Create an account</code>按钮，界面如下图所示：</p>
<p><img src="../../../../../images/Mac-GitHub-Hexo-NexT/注册github步骤1.png" alt="注册github步骤1"></p>
<h3 id="Step2-Choose-your-plan"><a href="#Step2-Choose-your-plan" class="headerlink" title="Step2 Choose your plan"></a>Step2 Choose your plan</h3><p>默认选择即可，直接点击<code>Continue</code>按钮，进入下一步进行邮箱验证，界面如下图所示：</p>
<p><img src="../../../../../images/Mac-GitHub-Hexo-NexT/注册github步骤2.png" alt="注册github步骤2"></p>
<h3 id="Step3-Tailor-your-experinece"><a href="#Step3-Tailor-your-experinece" class="headerlink" title="Step3 Tailor your experinece"></a>Step3 Tailor your experinece</h3><p>登录自己设置的邮箱，点击<code>验证邮箱</code>之类的按钮后会进入<a href="https://github.com/" target="_blank" rel="external">该网页</a>，如果在其左上角有<code>Your email was verified.</code>这样的文案表明邮箱验证成功。</p>
<h2 id="配置GitHub相关信息"><a href="#配置GitHub相关信息" class="headerlink" title="配置GitHub相关信息"></a>配置GitHub相关信息</h2><p>接下来就可以进行创建工程、偏好设置等工作了：</p>
<h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>如图所示：</p>
<p><img src="../../../../../images/Mac-GitHub-Hexo-NexT/配置相关信息.png" alt="配置相关信息"></p>
<p>如果你从未使用过GitHub，可以点击<a href="https://guides.github.com/activities/hello-world/" target="_blank" rel="external">Read the guide</a>按钮学习如何创建工程并使用。</p>
<p>如果你知道如何创建GitHub工程的话，那就简单了，我们直接点击<code>Start a project</code>按钮就可以开始工程的创建，当然也可以从<a href="https://github.com/new" target="_blank" rel="external">该网页</a>进入。依次填写仓库名、描述信息、初始化README文件，最后点击<code>Create repository</code>按钮，就成功创建一个工程了。但是因为该工程是为了给我们搭建博客用的，所以有以下几个注意点：</p>
<ol>
<li>仓库名必须为<strong>name.github.io</strong>这样的格式，其中<strong>name</strong>可以自定义，但其他部分不可变化，必须一模一样！！！据说后面的<strong>io</strong>也可以是<strong>com</strong>，这个我就不清楚了，有兴趣的可以尝试一下。</li>
<li>描述信息和是否初始化README文件完全看个人兴趣，但是我的建议是需要的，因为这样能直截了当的明白这个工程是干嘛用的。</li>
</ol>
<p>例如下图所示：</p>
<p><img src="../../../../../images/Mac-GitHub-Hexo-NexT/创建仓库.png" alt="创建仓库"></p>
<h3 id="偏好设置"><a href="#偏好设置" class="headerlink" title="偏好设置"></a>偏好设置</h3><p>如果你熟悉GitHub，则可以进行一些偏好设置，即个性化设置，如上传头像。这些都是非常简单的，所示就不做阐述了，我们直接进入正题——配置SSH。</p>
<h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><ol>
<li><p>打开终端，输入命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<p> 如果输出内容是<code>Permission denied (publickey).</code>，则表明我们尚未在GitHub中正确配置SSH，反之则表明配置成功，直接跳过这一部分即可。</p>
</li>
<li><p>继续输入命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -C &quot;Your primary GitHub email address”</div></pre></td></tr></table></figure>
<p> 切记必须修改命令中的邮箱地址，该邮箱地址即为你注册GitHub时所填写的邮箱地址。输入成功之后会依行出现如下图所示提示：</p>
<p> <img src="../../../../../images/Mac-GitHub-Hexo-NexT/设置SSH-key.png" alt="设置SSH-key"></p>
<p> 分别表示为文件名、密码和确认密码，输入正确后会给出重要的配置信息。</p>
</li>
<li><p>继续输入命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.ssh/key&apos;s filename.pub | pbcopy</div></pre></td></tr></table></figure>
<p> 该命令中pub文件的文件名即为上一步中设置的文件名，由于该命令中包含pbcopy关键字，所以该命令可以将pub文件中的内容直接复制到剪切板中，以防之后再网页中配置SSH信息时发生不必要的错误。</p>
</li>
<li><p>打开<a href="https://github.com/settings/keys" target="_blank" rel="external">配置SSH</a>的网页，点击右上角的<code>New SSH key</code>按钮，如下图所示：</p>
<p> <img src="../../../../../images/Mac-GitHub-Hexo-NexT/设置SSH-key.png" alt="设置SSH-key"></p>
<p> 然后将pub文件中的内容粘贴到Key表示的文本框中，然后在Title表示的文本框中随便命名一个名字，最后点击<code>Add SSH key</code>按钮即可添加SSH key。</p>
</li>
<li><p>虽然已经成功添加了SSH key，但是这并不代表着SSH配置成功了，我们继续在终端输入命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<p> 如果输出内容包含<code>You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>则表明SSH配置成功；如果出现错误信息，可以继续输入该命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -Tv git@github.com</div></pre></td></tr></table></figure>
<p> 进行诊断与调试。</p>
</li>
<li>最后附上配置SSH的<a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="external">官方教程</a>，还是很详细的。</li>
</ol>
<h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><p>至此，我们已经完成了GitHub的创建和SSH的配置，接下来就让我们来学习一下怎么安装Git和Node.js吧。</p>
<hr>
<p><strong>版权声明</strong></p>
<p>本网站如未注明，均由<a href="https://fengqingxiuyi.github.io/">青峰</a>创作并维护；本网站采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名(BY)-非商业性使用(NC)-相同方式共享(SA)4.0国际协议</a>授权。转载请注明作者及出处。</p>
<p>本文永久链接：<a href="https://fengqingxiuyi.github.io/2016/07/17/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT（一）GitHub/">https://fengqingxiuyi.github.io/2016/07/17/Mac+GitHub+Hexo+NexT/Mac+GitHub+Hexo+NexT（一）GitHub/</a></p>
]]></content>
    </entry>
    
  
  
</search>
